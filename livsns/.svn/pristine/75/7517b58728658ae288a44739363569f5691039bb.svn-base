<?php/*************************************************************************** * $Id: albums_app.class.php 17481 2013-07-05 09:36:46Z yaojian $ ***************************************************************************/class albums_app extends InitFrm{	public function __construct()	{		parent::__construct();	}	public function __destruct()	{		parent::__destruct();	}	/**	 * 获取相册数据	 * @param Array $data	 */	public function show($data)	{		if (!is_array($data))		{			return false;		}		$sql = 'SELECT * FROM ' . DB_PREFIX . 'albums WHERE isdrop = 0';		if ($data['condition']) $sql .= $this->get_condition($data['condition']);		if ($data['count'] != -1)		{			$data_limit = ' LIMIT ' . $data['offset'] . ' , ' . $data['count'];		}		if ($data_limit) $sql .= $data_limit;		$query = $this->db->query($sql);		$info = $cate_id = array();		while ($rows = $this->db->fetch_array($query))		{			if ($rows['cate_id']) $cate_id[$rows['cate_id']] = $rows['cate_id'];			if ($rows['albums_cover'] && unserialize($rows['albums_cover']))			{				$rows['albums_cover'] = unserialize($rows['albums_cover']);			}			$info[] = $rows;		}		if ($cate_id)		{			$cate_id = implode(', ', $cate_id);			$category_info = $this->get_category($cate_id);			if ($category_info)			{				foreach ($info as $k => $v)				{					$info[$k]['category'] = $category_info[$v['cate_id']];				}			}		}		return $info;	}	/**	 * 获取相册分类信息	 * @param Int|String $id	 */	public function get_category($id)	{		if (!$id) return false;		if (is_int($id))		{			$condition = ' AND id = ' . $id;		}		else if (is_string($id))		{			$condition = ' AND id IN (' . $id . ')';		}		$sql = 'SELECT * FROM ' . DB_PREFIX . 'category WHERE 1' . $condition;		$q = $this->db->query($sql);		$info = array();		while ($rows = $this->db->fetch_array($q))		{			$info[$rows['id']] = $rows;		}		return $info;	}	/**	 * 获取相册总数	 * @param Array $data 查询条件	 */	public function count($data = array())	{		if (!is_array($data))		{			return false;		}		$sql = 'SELECT COUNT(id) AS total FROM ' . DB_PREFIX . 'albums WHERE isdrop = 0';		if ($data) $sql .= $this->get_condition($data);		return $this->db->query_first($sql);	}	/**	 * 获取单个相册数据	 * @param Array $data 查询条件	 * @param String $fields 读取的字段	 */	public function detail($data, $fields = '*')	{		if (!is_array($data))		{			return false;		}		$sql = 'SELECT ' . $fields . ' FROM ' . DB_PREFIX . 'albums WHERE isdrop = 0';		foreach ($data as $k => $v)		{			if (is_int($v) || is_float($v))			{				$sql .= ' AND ' . $k . ' = ' . $v;			}			elseif (is_string($v))			{				$sql .= ' AND ' . $k . ' = "' . $v . '"';			}		}		$info = $this->db->query_first($sql);		if ($info['cate_id'])		{			$category_info = $this->get_category($info['cate_id']);			if ($category_info)			{				$info['category'] = $category_info[$info['cate_id']];			}		}		if ($info['albums_cover'] && unserialize($info['albums_cover']))		{			$info['albums_cover'] = unserialize($info['albums_cover']);		}		return $info;	}	/**	 * 创建数据	 * @param String $table 表名	 * @param Array $data 数据	 * @param String $pk 主键	 */	public function create($table, $data, $pk = 'id')	{		if (empty($table) || !is_array($data))		{			return false;		}		$fields = '';		foreach ($data as $k => $v)		{			if (is_string($v))			{				$fields .= $k . "='" . $v . "',";			}			elseif (is_int($v) || is_float($v))			{				$fields .= $k . '=' . $v . ',';			}		}		$fields = rtrim($fields, ',');		$sql = 'INSERT INTO ' . DB_PREFIX . $table . ' SET ' . $fields;		$this->db->query($sql);		$data[$pk] = $this->db->insert_id();		return $data;	}	/**	 * 更新数据	 * @param String $table 更新的表名	 * @param Array $data 更新的数据	 * @param Array $idsArr 更新的条件	 * @param Boolean $flag	 */	public function update($table, $data, $idsArr, $flag = false)	{		if (empty($table) || !is_array($data) || !is_array($idsArr))		{			return false;		}		$fields = '';		foreach ($data as $k => $v)		{			if ($flag)			{				$v = $v > 0 ? '+' . $v : $v;				$fields .= $k . '=' . $k . $v . ',';			}			else			{				if (is_string($v))				{					$fields .= $k . "='" . $v . "',";				}				elseif (is_int($v) || is_float($v))				{					$fields .= $k . '=' . $v . ',';				}			}		}		$fields = rtrim($fields, ',');		$sql = 'UPDATE ' . DB_PREFIX . $table . ' SET ' . $fields . ' WHERE 1';		if ($idsArr)		{			foreach ($idsArr as $key => $val)			{				if (is_int($val) || is_float($val))				{					$sql .= ' AND ' . $key . ' = ' . $val;				}				elseif (is_string($val))				{					$sql .= ' AND ' . $key . ' in (' . $val . ')';				}			}		}		return $this->db->query($sql);	}	/**	 * 删除数据	 * @param Array $data 删除条件	 */	public function delete($data)	{		if (!is_array($data))		{			return false;		}		$sql = 'DELETE FROM ' . DB_PREFIX . 'albums WHERE 1';		foreach ($data as $k => $v)		{			if (is_int($v) || is_float($v))			{				$sql .= ' AND ' . $k . ' = ' . $v;			}			elseif (is_string($v))			{				$sql .= ' AND ' . $k . ' IN (' . $v . ')';			}		}		return $this->db->query($sql);	}	/**	 * 获取查询条件	 * @param Array $data	 */	private function get_condition($data)	{		$condition = '';		//查询的关键字		if ($data['keyword'])		{			$condition .= " AND albums_name LIKE '%" . $data['keyword'] . "%'";		}		//根据ID获取数据		if ($data['id'])		{			if (is_int($data['id']))			{				$condition .= " AND id = " . $data['id'];			}			elseif (is_string($data['id']))			{				$condition .= " AND id IN (" . $data['id'] . ")";			}		}		//查看自己的数据		if ($data['user_id'])		{			$condition .= " AND user_id = " . $data['user_id'];		}		//查看组织内的数据		if ($data['org_id'])		{			$condition .= " AND org_id = " . $data['org_id'];		}		//根据分类查看		if ($data['cate_id'])		{			if (is_int($data['cate_id']))			{				$cate_info = $this->get_category($data['cate_id']);				$data['cate_id'] = $cate_info[$data['cate_id']]['childs'];			}			$condition .= " AND cate_id IN (" . $data['cate_id'] . ")";		}		if ($data['start_time'])		{			$start_time = strtotime($data['start_time']);			$condition .= " AND create_time >= " . $start_time;		}		if ($data['end_time'])		{			$end_time = strtotime($data['end_time']);			$condition .= " AND create_time < " . $end_time;		}		if(isset($data['is_audit']))		{			$condition .= " AND is_audit=".intval($data['is_audit']);		}		//查询发布的时间		if ($data['date_search'])		{			$today = strtotime(date('Y-m-d'));			$tomorrow = strtotime(date('Y-m-d', TIMENOW+24*3600));			switch ($data['date_search'])			{				case 1://所有时间段					break;				case 2://昨天的数据					$yesterday = strtotime(date('y-m-d', TIMENOW-24*3600));					$condition .= " AND create_time > '" . $yesterday . "' AND create_time < '" . $today . "'";					break;				case 3://今天的数据					$condition .= " AND create_time > '" . $today . "' AND create_time < '" . $tomorrow . "'";					break;				case 4://最近3天					$last_threeday = strtotime(date('y-m-d', TIMENOW-2*24*3600));					$condition .= " AND create_time > '" . $last_threeday . "' AND create_time < '" . $tomorrow . "'";					break;				case 5://最近7天					$last_sevenday = strtotime(date('y-m-d', TIMENOW-6*24*3600));					$condition .= " AND create_time > '" . $last_sevenday . "' AND create_time < '" . $tomorrow . "'";					break;				default://所有时间段					break;			}		}		//排序		$sort = ' ORDER BY ';		if ($data['order'] && is_array($data['order']))		{			foreach ($data['order'] as $k => $v)			{				$sort .= $k . ' ' . $v . ', ';			}			$sort = rtrim($sort, ', ');		}		else		{			$sort .= 'id DESC';		}		$condition = $condition . $sort;		return $condition;	}}?>