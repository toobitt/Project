<?php/**************************************************************************** LivSNS 0.1* (C)2004-2010 HOGE Software.** $Id: user.php 7586 2013-04-19 09:40:56Z yaojian $***************************************************************************/require_once './global.php';include_once CUR_CONF_PATH . 'lib/user.class.php';include_once ROOT_PATH . 'lib/class/auth.class.php';include_once ROOT_PATH . 'lib/class/publishconfig.class.php';include_once ROOT_PATH . 'lib/class/curl.class.php';require_once(CUR_CONF_PATH . 'lib/dingdone_user_mode.php');require_once(CUR_CONF_PATH . 'lib/auth_code_mode.php');require_once(CUR_CONF_PATH . 'lib/DDMail.class.php');require_once(CUR_CONF_PATH . 'lib/SendCloud.class.php');require_once(CUR_CONF_PATH . 'lib/auth_emailcode_mode.php');define('MOD_UNIQUEID', 'user');  //模块标识class userApi extends appCommonFrm{	private $userApi;	private $auth;	private $site;	private $dingdone_mode;	private $authcode_mode;	private $mail;	private $mode;		public function __construct()	{		parent::__construct();		$this->userApi = new user();		$this->auth = new Auth();		$this->site = new publishconfig();		$this->dingdone_mode = new dingdone_user_mode();		$this->authcode_mode = new auth_code_mode();		$this->mail = new DDMail();		$this->mode = new auth_emailcode_mode();	}	public function __destruct()	{		parent::__destruct();		unset($this->userApi);		unset($this->auth);		unset($this->site);	}		/**	 * 获取用户	 */	public function show()	{	    $offset = isset($this->input['offset']) ? intval($this->input['offset']) : 0;		$count = isset($this->input['count']) ? intval($this->input['count']) : 20;		$data = array(			'offset' => $offset,			'count' => $count,			'condition' => $this->condition()		);		$user_info = $this->userApi->show($data);		$this->setXmlNode('user_info', 'user');		if ($user_info)		{			foreach ($user_info as $user)			{				$this->addItem($user);			}		}		$this->output();	}		/**	 * 获取单个用户	 */	public function detail()	{		$id = intval($this->input['uid']);		if ($id > 0)		{			$user_info = $this->userApi->detail('user', array('id' => $id));			$user_permission = $this->dingdone_mode->getPermission($id);			if ($user_info)			{				if (unserialize($user_info['avatar']))				{					$user_info['avatar'] = unserialize($user_info['avatar']);				}				$user_info['user_permission'] = $user_permission;				if($user_info['create_time'] < strtotime(OLD_USER_TIME))				{				    $user_info['is_old_user'] = 1;				}				else 				{				    $user_info['is_old_user'] = 0;				}				if($user_info['is_bind_wx'])				{					$sql = 'SELECT avatar_url,nick_name,identity FROM ' . DB_PREFIX . 'user_bind WHERE bind_type="wx" AND bind_user_id = '.$user_info['id'];					$wx_data = $this->db->query_first($sql);					$user_info['bind']['wx'] = $wx_data;				}				$this->addItem($user_info);			}		}		$this->output();	}		/**	 * 获取组织信息	 */	public function get_org()	{		$cid = intval($this->input['cid']);		if ($cid > 0)		{			$company_info = $this->userApi->detail('company', array('id' => $cid));			if ($company_info)			{				$result = $this->get_re_org($company_info['org_id']);				$this->addItem($result);			}		}		$this->output();	}		private function get_re_org($fid)	{		$org_info = $this->auth->get_org($fid);		if ($org_info) {			foreach ($org_info as $k => $v)			{				$org_info[$k]['sub'] = $this->get_re_org($v['id']);			}		}		return $org_info;	}		/**	 * 创建用户	 */	public function create()	{		$data = $this->filter_data();		if (empty($data['password']))		{			$this->errorOutput(PARAM_WRONG);		}				/***********************************验证用户邮箱*********************************/		$email = $this->input['email'];	    if(!$email)		{			$this->errorOutput(NO_EMAIL);		}		elseif (!preg_match('/^[_\.0-9a-z-]+@([0-9a-z][0-9a-z-]+\.)+[a-z]{2,4}$/i',$email))		{			$this->errorOutput(ERROR_FORMAT_EMAIL);		}		elseif($_isExistEmail = $this->dingdone_mode->getUserByCond(" AND email = '" .$email. "' "))//邮箱必须唯一		{		    $this->errorOutput(THIS_EMAIL_HAS_EXISTS);		}		/***********************************验证用户邮箱*********************************/		//验证微信验证码		if(isset($this->input['wxcode']))		{			$wxcode = intval($this->input['wxcode']);			if(!$wxcode)			{				$this->errorOutput(NO_WXCODE);			}			$condition = " AND code='".$wxcode."' AND status = 0 AND type=1 AND expire_time>".TIMENOW;			$wxcode = $this->mode->detail('', $condition);			if(!$wxcode)			{				$this->errorOutput(NO_WXCODE);			}			$this->mode->delete($wxcode['id']);						//删除过期验证码			$sql = " DELETE FROM " .DB_PREFIX. "auth_emailcode WHERE type=1 AND expire_time<".TIMENOW;			$this->db->query($sql);		}		/***********************************验证用户电话号码*********************************/		/*		$authcode = $this->input['authcode'];		if (!$authcode)        {            $this->errorOutput(NO_AUTHCODE);        }        		//获取手机号		$telephone = trim($this->input['telephone']);	 	if (!$telephone)        {            $this->errorOutput(NOTEL);        }        	 	//验证手机号格式        if(!preg_match('/^1[3-8]\d{9}$/', $telephone))         {            $this->errorOutput(ERROR_FORMAT_TEL);        }        		//验证手机号是否已经存在        $ret = $this->dingdone_mode->getUserByCond(" AND telephone = '" . $telephone . "' ");        if ($ret)         {            $this->errorOutput(THIS_TEL_EXISTS);        }                //验证手机号码是否是该用户自己的	    $condition  = " AND telephone = '".$telephone."' ";	    $condition .= " AND code = '" .$authcode. "' ";	    $condition .= " AND expire_time > " . TIMENOW;	    $condition .= " AND status = 1 AND type = 1 ";	    $authcode = $this->authcode_mode->detail('',$condition);	    if (!$authcode)	    {	        $this->errorOutput(ERR_AUTHCODE);	    }	    //存在就表明验证通过，修改验证码状态为已使用	    $this->authcode_mode->audit($authcode['id']);	    */		/***********************************验证用户电话号码*********************************/				//默认角色		$data['admin_role_id'] = implode(',', $this->settings['default_role']);				$companyData = array(			'name' => $data['user_name']		);		//创建站点		$siteData = array(			'site_name' 			=> $data['user_name'],			'weburl'				=> WEBURL,			'site_dir'				=> SITE_DIR,			'sub_weburl'			=> SUB_WEBURL,			'indexname'				=> INDEXNAME,			'custom_content_dir'	=> CUSTOM_CONTENT_DIR,			'produce_format'		=> PRODUCE_FORMAT,			'suffix'				=> SUFFIX,		);		$site_info = $this->site->edit_site($siteData);		if (!$site_info) $this->errorOutput(FAILED);		$companyData['site_id'] = $site_info['site_id'];		//注册互助分类// 		if ($this->settings['App_seekhelp'])// 		{// 			$this->curl = new curl($this->settings['App_seekhelp']['host'], $this->settings['App_seekhelp']['dir']);// 			$this->curl->setSubmitType('post');// 			$this->curl->setReturnFormat('json');// 			$this->curl->initPostData();// 			$this->curl->addRequestData('a','create');// 			$this->curl->addRequestData('name', $data['user_name']);// 			$this->curl->addRequestData('brief', $data['user_name']);// 			$this->curl->addRequestData('fid', 0);// 			$ret = $this->curl->request('seekhelp_node_update.php');// 			if ($ret && is_array($ret))// 			{// 				$seekhelp_sort_id = $ret[0]['id'];// 			}// 		}				//创建组织机构		if (defined('DINGDONE_ORG') && DINGDONE_ORG)		{			$companyData['org_id'] = DINGDONE_ORG;			$data['father_org_id'] = DINGDONE_ORG;		}		else 		{			$orgData = array(				'name' => $data['user_name']			);			$org_info = $this->auth->create_org($orgData);			if (!$org_info) $this->errorOutput(FAILED);			$companyData['org_id'] = $org_info['id'];			$data['father_org_id'] = $org_info['id'];		}				//创建用户		//创建一个不存在的domain，使applant用户无法在m2o登录		$data['domain'] = defined('APPLANT_DOMAIN') ? APPLANT_DOMAIN : '';		$user_info = $this->auth->create_user($data);		if (!$user_info) $this->errorOutput(FAILED);		$companyData['user_id'] = $user_info['id'];				//创建企业		$companyData['create_time'] = TIMENOW;		$companyData['ip'] = hg_getip();		$company_info = $this->userApi->create('company', $companyData);		if (!$company_info) $this->errorOutput(FAILED);				//保存用于邮箱验证的令牌		$token = md5($user_info['user_name'] . $user_info['password'] . TIMENOW . hg_rand_num(6));		//本地化数据		$userData = array(			'id' 				=> $user_info['id'],			'role_id' 			=> $user_info['admin_role_id'],			'org_id' 			=> $user_info['father_org_id'],			'c_id' 				=> $company_info['id'],			's_id' 				=> $company_info['site_id'],			'user_name' 		=> $user_info['user_name'],			'password' 			=> $user_info['password'],			'salt' 				=> $user_info['salt'],			'brief' 			=> $user_info['brief'],			'avatar' 			=> $user_info['avatar'],			//'telephone' 		=> $telephone,			'email' 		    => $email,			'create_time' 		=> $user_info['create_time'],			'update_time' 		=> $user_info['update_time'],			//'seekhelp_sort_id' 	=> $seekhelp_sort_id,			'user_id' 			=> $user_info['id'],						'token' 			=> $token,						'is_agree' 			=> 1,//注册进来的都是已经同意了叮当协议的			'is_intest'			=> 1,//新注册都都是内测用户					);		$result = $this->userApi->create('user', $userData);		/*******************************发邮件给用户注册的邮箱***************************************/        if($result)        {            $preg    = array('{username}', '{activate_link}');            //产生一个用于邮箱验证的识别码            $replace = array($data['user_name'],$this->settings['sendcloud']['auth_url'] . '?dd_token=' . $token );            $htmlBody = file_get_contents(ROOT_DIR . 'email/email.html');            $content = str_replace($preg, $replace,$htmlBody);            //发送邮件            $sendCloud = new DDSendCloud();            $sendCloud->sendTo(array(	            'to'      => $email,	            'content' => $content,	        ));        }		/*******************************发邮件给用户注册的邮箱***************************************/		$result['id'] = $user_info['id'];		$this->addItem($result);		$this->output();	}		/**	 * 编辑用户	 */	public function update()	{		$id = intval($this->user['user_id']);		if ($id <= 0) $this->errorOutput(PARAM_WRONG);		$info = $this->userApi->detail('user', array('id' => $id));		if (!$info) $this->errorOutput(PARAM_WRONG);		$data = $this->filter_data();		$data['id'] = $id;		$data['admin_role_id'] = $info['role_id'];		$data['father_org_id'] = $info['org_id'];		$user_info = $this->auth->update_user($data);		if (!$user_info) $this->errorOutput(FAILED);		//更新本地数据		$updateData = array(			'role_id' => $user_info['admin_role_id'],			'org_id' => $user_info['father_org_id'],			'user_name' => $user_info['user_name'],			'brief' => $user_info['brief'],			'update_time' => $user_info['update_time']		);		if ($user_info['password']) $updateData['password'] = $user_info['password'];		if ($user_info['salt']) $updateData['salt'] = $user_info['salt'];		if ($user_info['avatar']) $updateData['avatar'] = $user_info['avatar'];		$result = $this->userApi->update('user', $updateData, array('id' => $id));		$this->addItem($result);		$this->output();	}    /**     * 更新用户信息     *     */    public function updateUserInfo()    {        $id = intval($this->user['user_id']);        if ($id <= 0) $this->errorOutput(PARAM_WRONG);        $info = $this->userApi->detail('user', array('id' => $id));        if (!$info) $this->errorOutput(PARAM_WRONG);        $updateData = array();        if(isset($this->input['rename_android_package']))        {            $updateData['rename_android_package'] = intval($this->input['rename_android_package']);        }        $result = $this->userApi->update('user', $updateData, array('id' => $id));        $this->addItem($result);        $this->output();    }		/**	 * 修改用户头像	 */	public function modifyAvatar()	{	    $id = intval($this->user['user_id']);	    if ($id <= 0) $this->errorOutput(NO_USER_ID);	    if (!isset($_FILES['Filedata']) || !$_FILES['Filedata'])	    {	        $this->errorOutput(NO_AVATAR);	    }	    $data = array('id' => $id);	    $user_info = $this->auth->modify_password($data, $_FILES);	    if (!$user_info) $this->errorOutput(FAILED);	    $updateData = array(			'update_time' => $user_info['update_time'],	        'avatar' => $user_info['avatar']		);		$output = array();		$result = $this->userApi->update('user', $updateData, array('id' => $id));		if ($result)		{		    $output['code'] = 0;		    if ($user_info['avatar'])		    {		        $user_info = $this->userApi->detail('user', array('id' => $id));    		    if ($user_info && unserialize($user_info['avatar']))    			{    				$output['data'] = unserialize($user_info['avatar']);    			}		    }		}		else		{		    $output['code'] = 1;		}		$this->addItem($output);		$this->output();	}		/**	 * 修改用户密码	 */	public function modifyPassword()	{	    $id = intval($this->user['user_id']);		if ($id <= 0) $this->errorOutput(NO_USER_ID);		$info = $this->userApi->detail('user', array('id' => $id));		if (!$info) $this->errorOutput(THIS_USER_NOT_EXISTS);		$data = array();		$oldpwd = trim($this->input['oldpwd']);		$pwd = trim($this->input['pwd']);		if ($oldpwd && $pwd)		{		    $password = md5(md5($oldpwd).$info['salt']);		    if ($password != $info['password'])		    {		        $this->errorOutput(OLDPWD_WRONG);		    }		    $data = array(    	        'password' => $pwd,    	    );		}				if ($data)		{    	    $data['id']	= $id;			$user_info = $this->auth->modify_password($data);    	    if (!$user_info) $this->errorOutput(FAILED);    	    //更新本地数据    		$updateData = array(    			'update_time' => $user_info['update_time']    		);    		if ($user_info['password'])    		{    		    $updateData['password'] = $user_info['password'];    		}    		if ($user_info['salt'])    		{    		    $updateData['salt'] = $user_info['salt'];    		}    		$result = $this->userApi->update('user', $updateData, array('id' => $id));    		$this->addItem($result);		}		$this->output();	}		public function updateLocal()	{	    $device_token = trim($this->input['device_token']);	    $type = trim($this->input['type']);	    $user_id = isset($this->input['uid']) ? $this->input['uid'] : $this->user['user_id'];	    if (intval($user_id) <= 0 || !$device_token || !$type)	    {	        $this->errorOutput(PARAM_WRONG);	    }	    $user_info = $this->userApi->detail('user', array('id' => $user_id));	    if (!$user_info) $this->errorOutput(PARAM_WRONG);	    /*	    if ($user_info['device_token'])	    {	        $params = array(	            'deviceToken' => $user_info['device_token'],	        	'type' => $user_info['type'],	            'message' => '您已在其他设备登录',	        );	        include_once CUR_CONF_PATH . 'lib/push_message.class.php';	        $push = new pushMessage();	        $push->sendMessage($params);	    }	    */	    $updateData = array(	        'device_token' => $device_token,	        'type' => $type	    );	    $result = $this->userApi->update('user', $updateData, array('id' => $user_id));	    $this->addItem($result);	    $this->output();	}		public function emptyDeviceToken()	{	    $user_id = intval($this->input['user_id']);	    $user_info = $this->userApi->detail('user', array('id' => $user_id));	    if (!$user_info) $this->errorOutput(PARAM_WRONG);	    $updateData = array(	        'device_token' => '',	        'type' => ''	    );	    $result = $this->userApi->update('user', $updateData, array('id' => $user_id));	    $this->addItem($result);	    $this->output();	}		/**	 * 处理提交的数据	 */	private function filter_data()	{		$username = trim(urldecode($this->input['username']));		$password = trim(urldecode($this->input['pwd']));		if (empty($username)) $this->errorOutput(PARAM_WRONG);				return array(			'user_name' => $username,			'password' => $password		);	}		/**	 * 查询条件	 */	private function condition()	{		return array();	}		//获取推送接口api	public function getPushApiConfig()	{		$user_id = $this->input['user_id'];		if(!$user_id)		{			if($this->user['user_id'])			{				$user_id = $this->user['user_id'];			}			else 			{				$this->errorOutput(NO_USER_ID);			}		}				$ret = $this->dingdone_mode->getPushApiConfig($user_id);		if($ret)		{			$this->addItem($ret);		}		else 		{			$this->errorOutput(NO_DATA);		}		$this->output();	}    /**     * 获取多个用户的配置     */    public function getPushApiConfigByUids()    {        $user_id = $this->input['user_id'];        if(!$user_id)        {            if($this->user['user_id'])            {                $user_id = $this->user['user_id'];            }            else            {                $this->errorOutput(NO_USER_ID);            }        }        $ret = $this->dingdone_mode->getPushApiConfigByuids($user_id);        if($ret)        {            $this->addItem($ret);        }        else        {            $this->errorOutput(NO_DATA);        }        $this->output();    }		/**	 * 无论状态与否，获取推送信息	 */	public function getPushApiInfo()	{		$user_id = $this->input['user_id'];		if(!$user_id)		{			if($this->user['user_id'])			{				$user_id = $this->user['user_id'];			}			else			{				$this->errorOutput(NO_USER_ID);			}		}				$ret = $this->dingdone_mode->getPushInfo($user_id);		if($ret)		{			$this->addItem($ret);		}		else		{			$this->errorOutput(NO_DATA);		}		$this->output();	}		//修改用户推送的状态	public function modifyUserPushStatus()	{		$user_id = $this->input['user_id'];		if(!$user_id)		{			$this->errorOutput(NO_USER_ID);		}				$ret = $this->dingdone_mode->update($user_id,array('push_status' => intval($this->input['status'])));		$this->addItem($ret);		$this->output();		}		/*******************************************修改用户密码******************************************/	public function modifyUserPassword()	{		$new_password = $this->input['new_password'];//需要修改的新密码		if(!$new_password)		{			$this->errorOutput(NO_NEW_PASSWORD);		}				//首先验证短信验证码		$telephone = trim($this->input['telephone']);	 	if (!$telephone)         {            $this->errorOutput(NOTEL);        }        	 	//验证手机号格式        if(!preg_match('/^1[3-8]\d{9}$/', $telephone))         {            $this->errorOutput(ERROR_FORMAT_TEL);        }                //验证码		$authcode = $this->input['authcode'];		if (!$authcode)        {            $this->errorOutput(NO_AUTHCODE);        }                //验证验证码合不合法	    $condition  = " AND telephone = '".$telephone."' ";	    $condition .= " AND code = '" .$authcode. "' ";	    $condition .= " AND expire_time > " . TIMENOW;	    $condition .= " AND status = 1 AND type = 2 ";	    $authcode = $this->authcode_mode->detail('',$condition);	    if (!$authcode)	    {	        $this->errorOutput(ERR_AUTHCODE);	    }	    //验证合格就根据电话号码查询出用户信息	    $user_info = $this->dingdone_mode->getUserByCond(" AND telephone = '" .$telephone. "' ");	    if(!$user_info)	    {	    	$this->errorOutput(ERR_TEL_NOT_EXTSTS);	    }	    	    //如果存在就用叮当m2o超管账号登陆auth	    $login_info = $this->loginM2o();       	if(!$login_info)       	{       		$this->errorOutput(LOGIN_M2O_FAIL);       	}       	//开始修改密码       	$ret = $this->updatePasswordToAuth(array(       		'access_token' 	=> $login_info['token'],       		'userid' 		=> $user_info['id'],       		'password' 		=> $new_password,       	    'user_name'		=> $user_info['user_name'],       	));       	       	if($ret['userid'])       	{       		 //成功之后，修改验证码状态为已使用	    	$this->authcode_mode->audit($authcode['id']);	    	//更新用户表的加密的密码	    	$this->dingdone_mode->update($user_info['id'],array(	    			'password' => md5(md5($new_password).$user_info['salt']),	    	));       		$this->addItem(array('return' => 1,'user_name'=> $ret['user_name']));       		$this->output();       	}       	else        	{       		$this->errorOutput(MODIFY_PASSWORD_FAIL);	       	}	}		/**	 * 通过邮箱找回密码	 */	public function modifyUserPasswdByEmail()	{		$new_password = $this->input['new_password'];//需要修改的新密码		if(!$new_password)		{			$this->errorOutput(NO_NEW_PASSWORD);		}			//首先验证短信验证码		$email = hg_clean_email(trim($this->input['email']));		if (!$email)		{			$this->errorOutput(ERROR_FORMAT_EMAIL);		}			//验证合格就根据电话号码查询出用户信息		$user_info = $this->dingdone_mode->getUserByCond(" AND email = '" .$email. "' ");		if(!$user_info)		{			$this->errorOutput(ERR_TEL_NOT_EXTSTS);		}			//如果存在就用叮当m2o超管账号登陆auth		$login_info = $this->loginM2o();		if(!$login_info)		{			$this->errorOutput(LOGIN_M2O_FAIL);		}			//开始修改密码		$ret = $this->updatePasswordToAuth(array(				'access_token' 	=> $login_info['token'],				'userid' 		=> $user_info['id'],				'password' 		=> $new_password,				'user_name'		=> $user_info['user_name'],		));			if($ret['userid'])		{			//更新用户表的加密的密码			$this->dingdone_mode->update($user_info['id'],array(					'password' => md5(md5($new_password).$user_info['salt']),			));			$this->addItem(array('return' => 1,'user_name'=> $ret['user_name']));			$this->output();		}		else		{			$this->errorOutput(MODIFY_PASSWORD_FAIL);		}	}		//登陆m2o	private function loginM2o()	{		$curl = new curl($this->settings['App_auth']['host'], $this->settings['App_auth']['dir']);		$curl->initPostData();		$curl->addRequestData('appid',$this->settings['super_account']['appid']);		$curl->addRequestData('appkey',$this->settings['super_account']['appkey']);		$curl->addRequestData('username', $this->settings['super_account']['username']);		$curl->addRequestData('password', $this->settings['super_account']['password']);		$ret = $curl->request('get_access_token.php');		if(!$ret || !is_array($ret) || isset($ret['ErrorCode']))		{			return false;		}				if(isset($ret[0]))		{			$ret = $ret[0];		}		return $ret;	}		//修改用户密码提交到auth	private function updatePasswordToAuth($data = array())	{		if(!$data)		{			return false;		}		$curl = new curl($this->settings['App_auth']['host'], $this->settings['App_auth']['dir'] . 'admin/');		$curl->initPostData();		$curl->addRequestData('access_token', $data['access_token']);		$curl->addRequestData('userid', $data['userid']);		$curl->addRequestData('password', $data['password']);		$curl->addRequestData('a', 'updatePassword');		$ret = $curl->request('admin_update.php');		if(!$ret || !is_array($ret) || isset($ret['ErrorCode']))		{			return false;		}		return $ret;	}	/*******************************************修改用户密码******************************************/	/***************************************用户绑定手机号***************************************/	//绑定与重新绑定都走这个接口	public function bindTelephone()	{		$user_id = $this->user['user_id'];		if(!$user_id)		{			$this->errorOutput(NO_LOGIN);		}				//首先验证短信验证码		$telephone = trim($this->input['telephone']);	 	if (!$telephone)         {            $this->errorOutput(NOTEL);        }        	 	//验证手机号格式        if(!preg_match('/^1[3-8]\d{9}$/', $telephone))         {            $this->errorOutput(ERROR_FORMAT_TEL);        }                //验证码		$authcode = $this->input['authcode'];		if (!$authcode)        {            $this->errorOutput(NO_AUTHCODE);        }                //验证验证码合不合法	    $condition  = " AND telephone = '".$telephone."' ";	    $condition .= " AND code = '" .$authcode. "' ";	    $condition .= " AND expire_time > " . TIMENOW;	    $condition .= " AND status = 1 AND type = 3 ";	    $authcode = $this->authcode_mode->detail('',$condition);	    if (!$authcode)	    {	        $this->errorOutput(ERR_AUTHCODE);	    }	    		//验证该手机号是不是已经被注册过了	    $user_info = $this->dingdone_mode->getUserByCond(" AND telephone = '" .$telephone. "' ");	    if($user_info)	    {	    	//如果该用户已经绑定了该手机号	    	if($user_info['id'] == $user_id)	    	{	    		$this->errorOutput(YOU_HAVE_BIND_THIS_PHONE);	    	}	    	else 	    	{	    		$this->errorOutput(THIS_PHONE_HAVE_BINED);	    	}	    }	    	    //如果不存在就绑定	    $ret = $this->dingdone_mode->update($user_id,array(	    			'telephone' => $telephone,	    ));	    	    if($ret)	    {	    	$this->addItem(array('return' => 1));	    	$this->output();	    }	    else 	    {	    	$this->errorOutput(PHONE_BIND_FAIL);	    }	}	/***************************************用户绑定手机号***************************************/			/***************************************重新发送激活邮件***************************************/	public function reSendActivateEmail()	{	    $user_id = $this->user['user_id'];		if(!$user_id)		{			$this->errorOutput(NO_LOGIN);		}				//查询出该人对邮箱		$user_info = $this->dingdone_mode->getUserByCond(" AND id = '" .$user_id. "'");		if(!$user_info)		{		    $this->errorOutput(THIS_USER_NOT_EXISTS);		}			    //如果该人对邮箱已经激活就不能再发送邮件了        if($user_info['is_activate'])        {            $this->errorOutput(YOU_HAVE_ACTIVATED);        }                //邮箱不存在，报错        if(!$user_info['email'])        {            $this->errorOutput(NO_EMAIL);        }                //发送邮件		if(!$this->sendActivateEmail($user_info,$user_info['email']))		{		    $this->errorOutput(EMAIL_SEND_FAIL);		}		        $this->addItem(array('return' => 1));	    $this->output();	}	/***************************************重新发送激活邮件***************************************/				/***************************************修改某人的邮箱，只针对没有激活的邮箱***************************************/		public function modifyEmail()	{	    $user_id = $this->user['user_id'];		if(!$user_id)		{			$this->errorOutput(NO_LOGIN);		}				//查询出该人的信息		$user_info = $this->dingdone_mode->getUserByCond(" AND id = '" .$user_id. "'");		if(!$user_info)		{		    $this->errorOutput(THIS_USER_NOT_EXISTS);		}			    //如果该人的邮箱已经激活就不再修改了，修改了又有什么意义呢        if($user_info['is_activate'])        {            $this->errorOutput(YOU_HAVE_ACTIVATED);        }        	    //邮箱不存在，报错        if(!$this->input['new_email'])        {            $this->errorOutput(NO_EMAIL);        }	    elseif($_isExistEmail = $this->dingdone_mode->getUserByCond(" AND email = '" .$this->input['new_email']. "' AND id != '" .$user_id. "' "))//邮箱必须唯一		{		    $this->errorOutput(THIS_EMAIL_HAS_EXISTS);		}                //更新该用户邮箱        $this->dingdone_mode->update($user_id,array('email' => $this->input['new_email']));        //发送邮件        if(!$this->sendActivateEmail($user_info,$this->input['new_email']))        {            $this->errorOutput(EMAIL_SEND_FAIL);           }	    $this->addItem(array('return' => 1));	    $this->output();	}	/***************************************修改某人的邮箱，只针对没有激活的邮箱***************************************/		/***************************************修改某人的邮箱，正常的修改***********************************************/	public function changeEmail()	{        $user_id = $this->user['user_id'];        $new_email = trim($this->input['new_email']);		if(!$user_id)		{			$this->errorOutput(NO_LOGIN);		}				//查询出该人的信息		$user_info = $this->dingdone_mode->getUserByCond(" AND id = '" .$user_id. "'");		if(!$user_info)		{		    $this->errorOutput(THIS_USER_NOT_EXISTS);		}        	    //邮箱不存在，报错        if(!$new_email)        {            $this->errorOutput(NO_EMAIL);        }        elseif($new_email == $user_info['email'])        {            $this->errorOutput(THE_NEW_EMAIL_IS_SAME_TO_OLD);        }	    elseif($_isExistEmail = $this->dingdone_mode->getUserByCond(" AND email = '" .$new_email. "' AND id != '" .$user_id. "' "))//邮箱必须唯一		{		    $this->errorOutput(THIS_EMAIL_HAS_EXISTS);		}                //更新该用户邮箱        $this->dingdone_mode->update($user_id,array(        	'change_email' => $new_email,            'email_ctime'  => TIMENOW,        ));        //发送邮件        if(!$this->sendChangeEmail($user_info,$new_email))        {            $this->errorOutput(EMAIL_SEND_FAIL);        }        	    $this->addItem(array('return' => 1));	    $this->output();	    	}	/***************************************修改某人的邮箱，正常的修改***********************************************/		/***************************************某人同意叮当协议***********************************************/	public function doAgreement()	{	    $user_id = $this->user['user_id'];	    if(!$user_id)		{			$this->errorOutput(NO_LOGIN);		}				//更新该用户邮箱        $this->dingdone_mode->update($user_id,array(        		'is_agree' => 1,        ));				$this->addItem(array('return' => 1));	    $this->output();	}	/***************************************某人同意叮当协议***********************************************/	//发送激活邮件	private function sendActivateEmail($user_info = array(),$email = '')	{	    if(!$user_info || !$email)	    {	        return FALSE;	    }	    	    //首先判断该用户发送的频率	    if($this->verifyEmailRate())	    {	        return FALSE;	    }        //更改之后发送激活邮件		$token = md5($user_info['user_name'] . $user_info['password'] . TIMENOW . hg_rand_num(6));//产生用于邮箱验证的令牌		//更新该用户的token        $this->dingdone_mode->update($user_info['id'],array('token' => $token));		//准备发送邮件		$preg    = array('{username}', '{activate_link}');        //产生一个用于邮箱验证的识别码        $replace = array($user_info['user_name'],$this->settings['sendcloud']['auth_url'] . '?dd_token=' . $token );        $htmlBody = file_get_contents(ROOT_DIR . 'email/email.html');        $content = str_replace($preg, $replace,$htmlBody);        //发送邮件        $sendCloud = new DDSendCloud();        $ret = $sendCloud->sendTo(array(            'to'      => $email,            'content' => $content,        ));                if($ret)        {            //记录发送的邮件信息            $this->dingdone_mode->createEmailControl(array(                        'user_id'     => $this->user['user_id'],                        'create_time' => TIMENOW,                        'ip'          => hg_getip(),            ));        }        return $ret;	}		//发送用户更新邮箱的激活邮件	private function sendChangeEmail($user_info = array(),$email = '')	{	    if(!$user_info || !$email)	    {	        return;	    }	    	    //首先判断该用户发送的频率	    if($this->verifyEmailRate())	    {	        return FALSE;	    }        //更改之后发送激活邮件		$token = md5($user_info['user_name'] . $user_info['password'] . TIMENOW . hg_rand_num(6));//产生用于邮箱验证的令牌		//更新该用户的token        $this->dingdone_mode->update($user_info['id'],array('c_token' => $token));		//准备发送邮件		$preg    = array('{username}', '{activate_link}');        //产生一个用于邮箱验证的识别码        $replace = array($user_info['user_name'],$this->settings['sendcloud']['confirm_url'] . '?dd_token=' . $token );        $htmlBody = file_get_contents(ROOT_DIR . 'email/bind_email.html');        $content = str_replace($preg, $replace,$htmlBody);        //发送邮件        $sendCloud = new DDSendCloud('change');        $ret = $sendCloud->sendTo(array(            'to'      => $email,            'content' => $content,        ));                if($ret)        {            //记录发送的邮件信息            $this->dingdone_mode->createEmailControl(array(                        'user_id'     => $this->user['user_id'],                        'create_time' => TIMENOW,                        'ip'          => hg_getip(),            ));        }        return $ret;	}		//验证邮箱发送的是否过快	private function verifyEmailRate()	{	    $_cond  = " AND user_id = '" .$this->user['user_id']. "' ";	    $_cond .= " AND ip = '" . hg_getip(). "' ";	    $_cond .= " ORDER BY create_time DESC ";	    $_emailInfo = $this->dingdone_mode->getEmailInfo($_cond);	    if($_emailInfo && ($_emailInfo['create_time'] + $this->settings['sendcloud']['send_rate']) > TIMENOW)	    {	        return TRUE;//发送过快	    }	    return FALSE;	}		//验证某个邮箱是否已经存在	public function checkEmailHasUsed()	{	    $email = $this->input['email'];	    if(!$email)		{			$this->errorOutput(NO_EMAIL);		}		elseif (!preg_match('/^[_\.0-9a-z-]+@([0-9a-z][0-9a-z-]+\.)+[a-z]{2,4}$/i',$email))		{			$this->errorOutput(ERROR_FORMAT_EMAIL);		}		elseif($_isExistEmail = $this->dingdone_mode->getUserByCond(" AND email = '" .$email. "' "))//邮箱必须唯一		{		    $this->errorOutput(THIS_EMAIL_HAS_EXISTS);		}	    else 	    {	        $this->addItem(array('return' => 1));	        $this->output();	    }	}		//后台设置用户的叮当角色	public function setUserRoleId()	{	    $user_id = $this->input['user_id'];	    if(!$user_id)	    {	        $this->errorOutput(NO_USER_ID);	    }		    $dingdone_role_id = intval($this->input['dingdone_role_id']);	    if(!$dingdone_role_id || !in_array($dingdone_role_id,array(1,2)))	    {	        $this->errorOutput(NO_ROLE_ID);	    }	    if($dingdone_role_id == 2)	    {	    	$is_developer_time = TIMENOW;	    }	    elseif ($dingdone_role_id == 1)	    {	    	$is_developer_time = 0;	    }	    	    $ret = $this->dingdone_mode->update($user_id,array(	             		'dingdone_role_id' => $dingdone_role_id,	    				'is_developer_time'=> $is_developer_time,	    ));	    	    		    if($ret)	    {	        $this->addItem(array('return' => 1));	        $this->output();	    }	    else	    {	        $this->errorOutput(FAILED);	    }	}	//更新用户默认站点	/*	public function updateUserDefaultSite()	{	    $user_id = $this->user['user_id'];		if(!$user_id)		{			$this->errorOutput(NO_LOGIN);		}				$defaultSiteId = intval($this->input['default_site_id']);		$ret = $this->dingdone_mode->update($user_id,array(		                'default_site_id' => $defaultSiteId,		));				if($ret)		{		    $this->addItem(array('return' => 1));	        $this->output();		}		else		{		    $this->errorOutput(UPDATE_DEFAULT_SITE_FAIL);		}	}	*/		/*	 * 根据邮箱得到用户信息	 */	public function getUserByEmail()	{		$email = trim($this->input['email']);		if ($email)		{			$user_info = $this->userApi->detail('user', array('email' => $email));			$user_permission = $this->dingdone_mode->getPermission($id);			if ($user_info)			{				$this->addItem($user_info);			}		}		$this->output();	}		//设置叮当用户为商业用户	public function setUserBusiness()	{	    $user_id = $this->input['user_id'];	    if(!$user_id)	    {	        $this->errorOutput(NO_USER_ID);	    }		    $is_business = intval($this->input['is_business']);	    $ret = $this->dingdone_mode->update($user_id,array(	            'is_business' => $is_business,	    ));	    	    if($ret)	    {	        $this->addItem(array('return' => 1));	        $this->output();	    }	    else	    {	        $this->errorOutput(FAILED);	    }	}		//设置商业用户是否去除叮当标识，只有经过商业授权的用户才能设置	public function setUserIsRemoveDD()	{	    $user_id = $this->user['user_id'];	    if(!$user_id)	    {	        $this->errorOutput(NO_USER_ID);	    }	    	    //首先判断该用户是否是商业授权用户	    $user_info = $this->dingdone_mode->getUserByCond(" AND id = '" .$user_id. "'");		if(!$user_info)		{		    $this->errorOutput(THIS_USER_NOT_EXISTS);		}				if(!$user_info['is_business'])		{		    $this->errorOutput(YOU_ARE_NOT_BUSINESS);		}	    	    $is_remove_dd = intval($this->input['is_remove_dd']);	    $ret = $this->dingdone_mode->update($user_id,array(	            'is_remove_dd' => $is_remove_dd?1:0,	    ));	    	    if($ret)	    {	        $this->addItem(array('return' => 1));	        $this->output();	    }	    else	    {	        $this->errorOutput(FAILED);	    }	}		//通过站点id来检测这个用户是否是商业授权用户	public function getUserBySid()	{	    $site_id = intval($this->input['sid']);        if(!$site_id)        {            $this->errorOutput(NO_SITE_ID);        }                $ret = $this->dingdone_mode->getUserByCond(" AND s_id = '" .$site_id. "' ");        if($ret)        {            $this->addItem($ret);            $this->output();        }        else        {            $this->output(NO_DATA);        }	}		/**	 * 记录叮当用户的登录	 */	public function recordLoginTimes()	{		$user_id = intval($this->user['user_id']);		$user_name = trim($this->user['user_name']);		$login_time = intval($this->user['login_time']);		$data = array(				'user_id' => $user_id,				'user_name' =>$user_name,				'login_time' =>TIMENOW		);		//先拿到最近的一次登录的记录		$new_login_record = $this->userApi->getNewLoginRecord($user_id);		if($new_login_record)		{			$login_info = $new_login_record[0];			//判断是否在本天			$now_time = date('Y-m-d',TIMENOW);			$login_info_time = date('Y-m-d',$login_info['login_time']);			if($login_info_time != $now_time)			{				$data = $this->userApi->create('user_login_time', $data);			}		}		else		{			$data = $this->userApi->create('user_login_time', $data);		}		if($data)		{			$this->addItem($data);		}		$this->output();	}		/**	 * 获取一定时间内的登录记录	 */	public function getLoginTimes()	{		$day = intval($this->inpu['day']);				//根据day得到对应时间前的0点的time()		$now_time_date_info = getdate(TIMENOW);		//day天前的time		$before_day = strtotime('-7 days');			$login_time = $before_day-($now_time_date_info['hours']*3600+$now_time_date_info['minutes']*60+$now_time_date_info['seconds']);		$login_record_info = $this->userApi->getRecordTimes($login_time , intval($this->user['user_id']));		if($login_record_info)		{			$this->addItem($login_record_info);		}		$this->output();	}		/**	 * 获取用户总数	 */	public function getAllUserCount()	{		$start_date = intval($this->input['start_date']);		$end_date = intval($this->input['end_date']);		$data = array();		if($start_date)		{			$data['start_date'] = $start_date;		}		if($end_date)		{			$data['end_date'] = $end_date;		}				$info = $this->userApi->count('user',$data);		if($info)		{			$this->addItem($info);		}		$this->output();	}		/**	 * 获取当天新增的用户	 */	public function getDayNewUsers()	{		//时间条件		$zeroTime = strtotime('today');		$data = array(			'count' => -1,			'condition' => array(				'start_time' => $zeroTime,				),		);		$info = $this->userApi->show($data);		$this->addItem($info);		$this->output();	}	public function login()	{		//第三方登录		if($this->input['bindtype'] && $this->input['identity'] && !$this->input['password'] && !$this->input['username'])		{			$bindinfo = array(			'identity'		=>$this->input['identity'],			'headimgurl'	=>$this->input['headimgurl'],			'nickname'		=>$this->input['nickname'],			'bindtype'		=>$this->input['bindtype'],			);			$sql = 'SELECT * FROM '  . DB_PREFIX . 'user_bind WHERE bind_type="'.$this->input['bindtype'].'" AND identity="'.$this->input['identity'].'"';			$bind_user = $this->db->query_first($sql);			if(!$bind_user)			{				$this->addItem($bindinfo);				$this->output();			}			$bind_user_id = $bind_user['bind_user_id'];			$sql = 'SELECT id,user_name,password,salt FROM '.DB_PREFIX.'user WHERE id = '.$bind_user_id;			$userinfo = $this->db->query_first($sql);			if(!$userinfo)			{				$this->addItem($bindinfo);				$this->output();			}			//更新用户名昵称和头像			else			{				if($bindinfo['nickname'] && $bindinfo['headimgurl'])				{					$sql = 'UPDATE ' . DB_PREFIX . 'user_bind set nick_name="'.addslashes($bindinfo['nickname']).'", avatar_url="'.addslashes($bindinfo['headimgurl']).'" where bind_id = '.$bind_user['bind_id'];					$this->db->query($sql);				}			}			//用户登录			$data = array(			'username'=>$userinfo['user_name'],			'password'=>$userinfo['password'],			//'salt'=>$userinfo['salt'],			'id'=>$userinfo['id'],			);		}		else		{			$data = array(			'username'=> trim($this->input['username']),			'password'=>trim($this->input['password']),			);			if(!$data['username'] || !$data['password'])			{				$this->errorOutput(PARAM_WRONG);			}			if($data['username'])			{				$where = ' AND user_name = "'.$data['username'].'"';			}						$sql = 'SELECT email,telephone,user_name FROM ' . DB_PREFIX . 'user WHERE 1 ';						if($userinfo = $this->db->query_first($sql . $where))			{				$data['username'] = $userinfo['user_name'];			}			else			{				$mobile = '';				if(preg_match('#^13[\d]{9}$|14^[0-9]\d{8}|^15[0-9]\d{8}$|^18[0-9]\d{8}$#', $data['username']))				{					$mobile = $data['username'];					$where = ' AND telephone = "' . $mobile . '"';				}				$email = '';				if(preg_match('#[a-z0-9&\-_.]+@[\w\-_]+([\w\-.]+)?\.[\w\-]+#is', $data['username']))				{					$email = $data['username'];					$where = ' AND email = "' . $email . '"';				}				if($where)				{							$sql .= $where; 					$userinfo = $this->db->query_first($sql);					if($userinfo)					{						$data['username'] = $userinfo['user_name'];					}				}			}		}		$result = $this->auth->login($data);		if(!is_array($result) || empty($result))		{			$this->errorOutput(USER_ERROR);		}		if(!$data['id'] && $this->input['bindtype'] && $this->input['identity'])		{			//插入绑定表			$sql = 'INSERT INTO ' .DB_PREFIX . 'user_bind set bind_user_id='.$result['id'] . ',bind_type="'.$this->input['bindtype'].'",identity="'.$this->input['identity'].'",create_time='.TIMENOW;			if($this->input['nickname'])			{				$sql .= ',nick_name="'.addslashes($this->input['nickname']).'"';			}			if($this->input['headimgurl'])			{				$sql .= ',avatar_url="'.addslashes($this->input['headimgurl']).'"';			}			if($this->db->query($sql))			{				$sql = 'UPDATE '  . DB_PREFIX . 'user set is_bind_wx = 1 where id = '.$result['id'];				$this->db->query($sql);			}		}		$this->addItem($result);		$this->output();	}	function unbind_wx()	{		$sql = 'DELETE FROM ' . DB_PREFIX . 'user_bind WHERE bind_user_id='.intval($this->user['user_id']);		$this->db->query($sql);		if(!$this->db->affected_rows())		{			$this->errorOutput(UNBIND_WX_ERROR);		}		else		{			$sql = 'UPDATE ' . DB_PREFIX . 'user set is_bind_wx = 0  where id = '.$this->user['user_id']; 			$this->db->query($sql);		}		$this->addItem(array('success'=>1));		$this->output();	}	function bind_wx()	{		if(!$this->input['identity'])		{			$this->errorOutput(INDENTITY_IS_NULL);		}		$nick_name = urldecode($this->input['nick_name']);		$headimgurl = urldecode($this->input['headimgurl']);		$bind_type = $this->input['bind_type'];		//插入绑定表		$sql = 'INSERT INTO ' .DB_PREFIX . 'user_bind set bind_user_id='.$this->user['user_id'] . ',bind_type="'.$bind_type.'",identity="'.$this->input['identity'].'",create_time='.TIMENOW;		if($nick_name)		{			$sql .= ',nick_name="'.addslashes($nick_name).'"';		}		if($headimgurl)		{			$sql .= ',avatar_url="'.addslashes($headimgurl).'"';		}		$this->db->query($sql);		if($this->db->insert_id())		{			if($bind_type == 'wx')			{				$field = 'is_bind_wx';			}			$sql = 'UPDATE '  . DB_PREFIX . 'user set '.$field.' = 1 where id = '.$this->user['user_id'];			$this->db->query($sql);		}		$this->addItem(array('success'=>1));		$this->output();	}		/**	 * 获取已经成为开发者的数目	 */	public function getIsDeveloperNums()	{		$info = $this->userApi->count('user',array('dingdone_role_id' => 2));		if($info)		{			$this->addItem($info);		}		$this->output();	}		/**	 * 获取已开通推送的数目	 */	public function getIsPushNums()	{		$info = $this->userApi->count('user',array('push_status' => 5));		if($info)		{			$this->addItem($info);		}		$this->output();	}		/**	 * 获取昨日登录过的用户	 */	public function getAllActivateUsers()	{		$start_date = intval($this->input['start_date']);		$end_date = intval($this->input['end_date']);		$data = array();		if($start_date)		{			$data['start_date'] = $start_date;		}		if($end_date)		{			$data['end_date'] = $end_date;		}			$info = $this->userApi->other_count('user_login_time'," and login_time >".$start_date." and login_time <".$end_date);		if($info)		{			$this->addItem($info);		}		$this->output();	}			/**	 * 获取流失用户	 */	public function getLiushiUserCount()	{		$time = LIUSHI_TIME;		$start_time = strtotime(date('Y-m-d',strtotime('-'.LIUSHI_TIME.' months')));		$end_time = $start_time+3600*24;		//先获取3个月前那天登de		$info = $this->userApi->getLiushi($start_time,$end_time);		$ret = array();		foreach ($info as $k => $v)		{			//判断此用户是否在endtime后登陆过 如果没有则算			$temp = $this->userApi->getLiushi($end_time,TIMENOW);			if(!$temp)			{				$ret[] = $v;			}		}		$this->addItem(array('total' => count($ret)));		$this->output();	}		/**	 * 获取今天的增加用户记录	 * 按小时来计算	 */	public function getTodayAddInfo()	{		$zero_time = strtotime(date('Y-m-d',TIMENOW));		$info = $this->userApi->getTodayAddInfo($zero_time);		$ret = array();		if($info && is_array($info))		{			foreach ($info as $k => $v)			{				$ret[intval($v['hour'])] =  intval($v['total']);			}		}		$this->addItem($ret);		$this->output();		}		/**	 * 获取今日的活跃用户信息	 * 根据小时	 */	public function getTodayActivateInfo()	{		$zero_time = strtotime(date('Y-m-d',TIMENOW));		$info = $this->userApi->getTodayActivateInfo($zero_time);		$ret = array();		if($info && is_array($info))		{			foreach ($info as $k => $v)			{				$ret[intval($v['hour'])] =  intval($v['total']);			}		}		$this->addItem($ret);		$this->output();	}		/**	 * 获取今日推送申请情况	 * 根据小时	 */	public function getTodayPushInfo()	{		$zero_time = strtotime(date('Y-m-d',TIMENOW));		$info = $this->userApi->getTodayPushInfo($zero_time);		$ret = array();		if($info && is_array($info))		{			foreach ($info as $k => $v)			{				$ret[intval($v['hour'])] =  intval($v['total']);			}		}		$this->addItem($ret);		$this->output();	}		public function getIsPushNumsInDate()	{		$start_time = intval($this->input['start_time']);		$end_time = intval($this->input['end_time']);		$info = $this->userApi->count('user',array(				'push_status' => 5,				'start_date'  => $start_time,				'end_date'	  => $end_time,			));		if($info)		{			$this->addItem($info);		}		$this->output();	}		public function getActivateInfoIndate()	{		$start_time = intval($this->input['start_time']);		$end_time = intval($this->input['end_time']);		$info = $this->userApi->getActivateInfoIndate($start_time,$end_time);		$this->addItem($info); 		$this->output();	}		public function getLostInfoIndate()	{		$start_time = intval($this->input['start_time']);		$end_time = intval($this->input['end_time']);		//先得到这一段时间内 登录的用户		$info = $this->userApi->getAllLoginInfoIndate($start_time,$end_time);		$this->addItem($info);		$this->output();	}		public function getTodayAddDevelopInfo()	{		$start_time = intval($this->input['start_time']);		$end_time = intval($this->input['end_time']);		$info = $this->userApi->getTodayAddDevelopInfo($start_time,$end_time);		$this->addItem($info);		$this->output();	}}$out = new userApi();$action = $_INPUT['a'];if (!method_exists($out,$action)){	$action = 'show';}$out->$action();