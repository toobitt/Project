<?php/**************************************************************************** $Id: column.class.php 17481 2013-04-19 09:36:46Z yaojian $***************************************************************************/class column extends InitFrm{	public function __construct()	{		parent::__construct();	}	public function __destruct()	{		parent::__destruct();	}		/**	 * 获取数据	 * @param Array $data	 */	public function show($data)	{		if ($data['count'] != -1)		{			$data_limit = ' LIMIT ' . $data['offset'] . ' , ' . $data['count'];		}		$sql = 'SELECT * FROM ' . DB_PREFIX . 'column WHERE 1';		//获取查询条件		$condition = $this->get_condition($data['condition']);		$sql .= $condition;		if ($data_limit) $sql .= $data_limit;		$query = $this->db->query($sql);		$info = $site = array();		while ($rows = $this->db->fetch_array($query))		{			$site[$rows['site_id']] = $rows['site_id'];			$info[] = $rows;		}		$site_ids = implode(',', $site);		$site = new publishconfig();		$site_info = $site->get_site_by_ids('id,site_name', $site_ids);		if ($site_info)		{			foreach ($info as $k => $v)			{				$info[$k]['site_name'] = $site_info[$v['site_id']]['site_name'];			}		}		return $info;	}		/**	 * 获取数据总数	 * @param Array $data	 */	public function count($data)	{		$condition = $this->get_condition($data);		$sql = 'SELECT COUNT(id) AS total FROM ' . DB_PREFIX . 'column WHERE 1';		if ($condition) $sql .= $condition;		return $this->db->query_first($sql);	}		/**	 * 获取单个数据	 * @param String $table	 * @param Array $data	 */	public function detail($table, $data)	{		$sql = 'SELECT * FROM ' . DB_PREFIX . $table .' WHERE 1';		foreach ($data as $k => $v)		{			if (is_int($v) || is_float($v))			{				$sql .= ' AND ' . $k . ' = ' . $v;			}			elseif (is_string($v))			{				$sql .= ' AND ' . $k . ' = "' . $v . '"';			}		}		return $this->db->query_first($sql);	}		/**	 * 获取站点数据	 */	public function get_sites()	{		$sql = 'SELECT DISTINCT site_id, name FROM ' . DB_PREFIX . 'company 		WHERE is_drop = 0 ORDER BY site_id';		$query = $this->db->query($sql);		$info = array();		while ($rows = $this->db->fetch_array($query)) {			$info[] = $rows;		}		return $info;	}		/**	 * 创建数据	 * @param String $table 表	 * @param Array $data 数据	 * @param String $pk 主键	 */	public function create($table, $data, $pk = 'id')	{		if (!$table || !is_array($data)) return false;		$fields = '';		foreach ($data as $k => $v)		{			if (is_string($v))			{				$fields .= $k . "='" . $v . "',";			}			elseif (is_int($v) || is_float($v))			{				$fields .= $k . '=' . $v . ',';			}		}		$fields = rtrim($fields, ',');		$sql = 'INSERT INTO ' . DB_PREFIX . $table . ' SET ' . $fields;		$this->db->query($sql);		$data[$pk] = $this->db->insert_id();		return $data;	}		/**	 * 更新数据	 * @param String $table 表	 * @param Array $data 数据	 * @param Array $idsArr 条件	 * @param Boolean $flag	 */	public function update($table, $data, $idsArr, $flag = false)	{		if (!$table || !is_array($data) || !is_array($idsArr)) return false;		$fields = '';		foreach ($data as $k => $v)		{			if ($flag)			{				$v = $v > 0 ? '+' . $v : $v;				$fields .= $k . '=' . $k . $v . ',';			}			else			{				if (is_string($v))				{					$fields .= $k . "='" . $v . "',";				}				elseif (is_int($v) || is_float($v))				{					$fields .= $k . '=' . $v . ',';				}			}		}		$fields = rtrim($fields, ',');		$sql = 'UPDATE ' . DB_PREFIX . $table . ' SET ' . $fields . ' WHERE 1';		if ($idsArr)		{			foreach ($idsArr as $key => $val)			{				if (is_int($val) || is_float($val))				{					$sql .= ' AND ' . $key . ' = ' . $val;				}				elseif (is_string($val))				{					$sql .= ' AND ' . $key . ' in (' . $val . ')';				}			}		}		return $this->db->query($sql);	}		/**	 * 删除数据	 * @paramString $table	 * @param Array $data	 */	public function delete($table, $data)	{		if (empty($table) || !is_array($data)) return false;		$sql = 'DELETE FROM ' . DB_PREFIX . $table . ' WHERE 1';		foreach ($data as $k => $v)		{			if (is_int($v) || is_float($v))			{				$sql .= ' AND ' . $k . ' = ' . $v;			}			elseif (is_string($v))			{				$sql .= ' AND ' . $k . ' IN (' . $v . ')';			}		}		return $this->db->query($sql);	}		/**	 * 获取查询条件	 * @param Array $data	 */	private function get_condition($data)	{		$condition = '';				//查询的关键字		if ($data['keyword'])		{			$condition .= " AND name LIKE '%" . $data['keyword'] . "%'";		}				//根据等级查询信息		if ($data['site_id'])		{			if (is_int($data['site_id']) && $data['site_id'] > 0)			{				$condition .= " AND site_id = " . $data['site_id'];			}			elseif (is_string($data['site_id']))			{				$condition .= " AND site_id IN (" . $data['site_id'] . ")";			}		}				//根据ID获取数据		if ($data['id'])		{			if (is_int($data['id']))			{				$condition .= " AND id = " . $data['id'];			}			elseif (is_string($data['id']))			{				$condition .= " AND id IN (" . $data['id'] . ")";			}		}				//根据用户获取数据		if ($data['uid'])		{			if (is_int($data['uid']))			{				$condition .= " AND user_id = " . $data['uid'];			}			elseif (is_string($data['uid']))			{				$condition .= " AND user_id IN (" . $data['uid'] . ")";			}		}				if ($data['start_time'])		{			$start_time = strtotime($data['start_time']);			$condition .= " AND create_time >= " . $start_time;		}				if ($data['end_time'])		{			$end_time = strtotime($data['end_time']);			$condition .= " AND create_time < " . $end_time;		}				//查询发布的时间        if ($data['date_search'])		{			$today = strtotime(date('Y-m-d'));			$tomorrow = strtotime(date('Y-m-d', TIMENOW+24*3600));			switch ($data['date_search'])			{				case 1://所有时间段					break;				case 2://昨天的数据					$yesterday = strtotime(date('y-m-d', TIMENOW-24*3600));					$condition .= " AND  create_time > '" . $yesterday . "' AND create_time < '" . $today . "'";					break;				case 3://今天的数据					$condition .= " AND  create_time > '" . $today . "' AND create_time < '" . $tomorrow . "'";					break;				case 4://最近3天					$last_threeday = strtotime(date('y-m-d', TIMENOW-2*24*3600));					$condition .= " AND  create_time > '" . $last_threeday . "' AND create_time < '" . $tomorrow . "'";					break;				case 5://最近7天					$last_sevenday = strtotime(date('y-m-d', TIMENOW-6*24*3600));					$condition .= " AND  create_time > '" . $last_sevenday . "' AND create_time < '" . $tomorrow . "'";					break;				default://所有时间段					break;			}		}				//排序		$sort = ' ORDER BY ';		if ($data['order'] && is_array($data['order']))		{			foreach ($data['order'] as $k => $v)			{				$sort .= $k . ' ' . $v . ', ';			}			$sort = rtrim($sort, ', ');		}		else		{			$sort .= 'id DESC';		}		$condition = $condition . $sort;		return $condition;	}	public function dealColumnData($ids)	{		if (!$ids)		{			return ;		}		$ids = is_array($ids) ? implode(',', $ids) :  $ids;		//获取所有被删除栏目的数据		$sql = 'SELECT * FROM '.DB_PREFIX.'column_cid WHERE column_id IN ('.$ids.')';		$query = $this->db->query($sql);		$arr = array();		while ($row = $this->db->fetch_array($query)) {			$arr[] = $row;			$cids[] = $row['cid'];		}		//进入计划队列		if (!empty($arr))		{			$sql = 'INSERT INTO '.DB_PREFIX.'column_cid_buffer (id, column_id, cid) VALUES';			foreach ($arr as $val)			{				$sql .= '("", '.$val['column_id'].', '.$val['cid'].'),';			}			$sql = rtrim($sql, ',');			$this->db->query($sql);			//删除索引关系			$sql = 'DELETE FROM '.DB_PREFIX.'column_cid WHERE column_id IN ('.$ids.')';			$this->db->query($sql);				if (!empty($cids))			{				$cids = implode(',', $cids);			}			$sql = 'UPDATE '.DB_PREFIX.'content SET column_id = "" ,column_path = "" WHERE id IN ('.$cids.')';			$this->db->query($sql);			/*			foreach ($arr as $val)			{				$sql = 'SELECT id, column_id, column_path FROM '.DB_PREFIX.'content WHERE id = '.$val['cid'];				$res = $this->db->query_first($sql);				if ($res['id'])				{					$res['column_id'] =  $res['column_id'] ? (@unserialize($res['column_id']) ? unserialize($res['column_id']) : '') : '';					if (is_array($res['column_id']) && !empty($res['column_id']))					{						unset($res['column_id'][$val['column_id']]);						if (!empty($res['column_id'][$val['column_id']]))						{							$res['column_id'] = serialize($res['column_id']);						}else 						{							$res['column_id'] = '';						}					}					$res['column_path'] =  $res['column_path'] ? (@unserialize($res['column_path']) ? unserialize($res['column_path']) : '') : '';					if (is_array($res['column_path']) && !empty($res['column_path']))					{						unset($res['column_path'][$val['column_id']]);						if (!empty($res['column_path'][$val['column_id']]))						{							$res['column_path'] = serialize($res['column_path']);						}else 						{							$res['column_path'] = '';						}					}				}				else				{					$sql = 'DELETE FROM '.DB_PREFIX.'content WHERE id = '.$val['cid'];					$this->db->query($sql);				}			}			*/		}	}}?>