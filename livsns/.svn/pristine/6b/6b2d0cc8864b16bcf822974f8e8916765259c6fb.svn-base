<?phpclass menu extends InitFrm{	public function __construct()	{		parent::__construct();	}		public function __destruct()	{		parent::__destruct();	}		/**	 * 根据条件获取快捷菜单信息	 * @param Int $offset	 * @param Int $count	 * @param Array $data	 */	public function getShortCutMenus($offset, $count, $condition = array(), $order = array())	{		if ($count != -1)		{			$data_limit = ' LIMIT ' . $offset . ' , ' . $count;		}		$sql = 'SELECT id, menu_name, menu_link, create_time 		FROM ' . DB_PREFIX . 'shortcut_menu WHERE 1';		if ($condition && is_array($condition))		{			//获取查询条件			$where = $this->get_condition($condition);			$sql .= $where;		}		if ($order && is_array($order))		{			$orderBy = $this->get_order($order);			$sql .= $orderBy;		}		else		{			$sql .= ' ORDER BY id DESC';		}		if ($data_limit)		{			$sql .= $data_limit;		}		$query = $this->db->query($sql);		$info = array();		while($row = $this->db->fetch_array($query))		{			$info[] = $row;		}		return $info;	}		/**	 * 根据条件获取快捷菜单信息的总数	 * @param Array $data	 */	public function getShortCutMenuCount($condition = array())	{		$sql = 'SELECT COUNT(id) AS total FROM ' . DB_PREFIX . 'shortcut_menu WHERE 1';		if ($condition && is_array($condition))		{			$where = $this->get_condition($condition);			$sql .= $where;		}		return $this->db->query_first($sql);	}		/**	 * 获取单个快捷菜单的信息	 * @param Int $menu_id	 */	public function getOneShortCutMenu($menu_id)	{		$sql = 'SELECT id, menu_name, menu_link, create_time 		FROM ' . DB_PREFIX . 'shortcut_menu WHERE id = ' . $menu_id;		return $this->db->query_first($sql);	}		/**	 * 验证菜单(名称)是否已经存在	 * @param $data Int 菜单ID String 菜单名	 */	public function check_menu_exists($data)	{		$sql = 'SELECT COUNT(id) AS total FROM ' . DB_PREFIX . 'shortcut_menu WHERE 1';		if (is_string($data))		{			$sql .= ' AND menu_name = "' . $data['menu_name'] . '"';		}		if (is_int($data))		{			$sql .= ' AND id = ' . $data;		}		$result = $this->db->query_first($sql);		if ($result['total'] > 0) return true;		return false;	}		/**	 * 创建快捷菜单	 * @param Array $data	 */	public function createShortCutMenu($data)	{		$fields = array();		foreach($data as $k=>$v)		{			if (is_string($v))			{				$fields[] = $k . "='" . $v . "'";			}			elseif (is_int($v))			{				$fields[] = $k . '=' . $v;			}		}		$sql = 'INSERT INTO ' . DB_PREFIX . 'shortcut_menu SET ' . implode(',', $fields);		$this->db->query($sql);		$data['id'] = $this->db->insert_id();		return $data;	}		/**	 * 更新快捷菜单信息	 * @param Array $data	 * @param Array $condition	 */	public function updateShortCutMenu($data, $condition)	{		if (!is_array($data) || !is_array($condition))		{			return false;		}		$fields = array();		foreach($data as $k=>$v)		{			if (is_string($v))			{				$fields[] = $k . "='" . $v . "'";			}			elseif (is_int($v))			{				$fields[] = $k . '=' . $v;			}		}		$sql = 'UPDATE ' . DB_PREFIX . 'shortcut_menu SET ' . implode(',', $fields) . ' WHERE 1';		$where = $this->get_condition($condition);		$sql .= $where;		return $this->db->query($sql);	}		/**	 * 删除快捷菜单	 * @param Array $data	 */	public function deleteShortCutMenu($data = array())	{		$sql = 'DELETE FROM ' . DB_PREFIX . 'shortcut_menu WHERE 1';		$condition = $this->get_condition($data);		$sql .= $condition;		return $this->db->query($sql);	}		/**	 * 获取查询条件	 * @param Array $data	 */	public function get_condition($data = array())	{		$condition = '';				//查询的关键字		if (isset($data['key']) && $data['key'])		{			$condition .= " AND menu_name LIKE '%" . $data['key'] . "%'";		}				//查询对应的ID的菜单信息		if (isset($data['menu_id']) && $data['menu_id'])		{			if (is_int($data['menu_id']))			{				$condition .= " AND id = " . $data['menu_id'];			}			elseif (is_string($data['menu_id']))			{				$condition .= " AND id in (" . $data['menu_id'] . ")";			}		}				return $condition;	}		/**	 * 获取排序	 * @param Array $data	 */	public function get_order($data = array())	{		$order = '';		//字段排序		if ($data && is_array($data))		{			$tmpArr = array();			foreach ($data as $k => $v)			{				$tmpArr[] = $k . ' ' . $v;			}			$order = ' ORDER BY ' . implode(', ', $tmpArr);		}		else		{			$order = ' ORDER BY id DESC';		}		return $order;	}		//-----------------------------------------------------------------------------------------		/**	 * 检测是否有自定义菜单	 * @param Int $user_id	 */	/*	public function check_custom_menu($user_id)	{		$result = $this->getCustomMenusCount($user_id, false);		if ($result['total'] == 0)		{			//没有任何信息(获取系统菜单)			$menu_info = $this->getShortCutMenus(0, -1, array('is_sys' => 1));			if (!$menu_info) return false;			$insertData = array();			foreach ($menu_info as $menu)			{				//导入到自定义菜单				$this->addCustomMenus($user_id, $menu['id']);			}		}		return true;	}*/		/**	 * 获取所有菜单信息	 * @param Int $user_id	 * @param Int $offset	 * @param Int $count	 */	public function getAllCustomMenus($user_id, $offset, $count)	{		if ($count != -1)		{			$data_limit = ' LIMIT ' . $offset . ' , ' . $count;		}		$sql = 'SELECT s.id, s.menu_name, s.menu_link, c.u_id 		FROM ' . DB_PREFIX . 'shortcut_menu s LEFT JOIN 		(SELECT * FROM ' . DB_PREFIX . 'custom_menu cm WHERE cm.u_id = ' . $user_id . ' AND cm.is_del = 0) c 		ON s.id = c.menu_id ORDER BY s.id DESC';		if ($data_limit)		{			$sql .= $data_limit;		}		$query = $this->db->query($sql);		$info = array();		while ($rows = $this->db->fetch_array($query))		{			if (empty($rows['u_id']))			{				$rows['u_id'] = 0;			}			$info[] = $rows;		}		return $info;	}		/**	 * 获取某个用户自定义菜单数据	 * @param Int $user_id	 * @param Int $offset	 * @param Int $count	 */	public function getCustomMenus($user_id, $offset, $count)	{		if ($count != -1)		{			$data_limit = ' LIMIT ' . $offset . ' , ' . $count;		}		$sql = 'SELECT s.* FROM ' . DB_PREFIX . 'custom_menu c 		INNER JOIN ' . DB_PREFIX . 'shortcut_menu s ON c.menu_id = s.id 		WHERE c.is_del = 0 AND c.u_id = ' . $user_id . ' ORDER BY s.id DESC';		if ($data_limit)		{			$sql .= $data_limit;		}		$query = $this->db->query($sql);		$info = array();		while ($rows = $this->db->fetch_array($query))		{			$info[] = $rows;		}		return $info;	}		/**	 * 获取某个用户自定义菜单的总数	 * @param Int $user_id	 */	public function getCustomMenusCount($user_id, $flag = true)	{		$sql = 'SELECT COUNT(menu_id) AS total FROM ' . DB_PREFIX . 'custom_menu 		WHERE u_id = ' . $user_id;		if ($flag) $sql .= ' AND is_del = 0';		$info = $this->db->query_first($sql);		return $info;	}		/**	 * 添加自定义菜单	 * @param Int $user_id	 * @param Int|String $menu_id	 */	public function addCustomMenus($user_id, $menu_id)	{		//检测添加的菜单是否存在		$menu_info = $this->getShortCutMenus(0, -1, array('menu_id' => $menu_id));		if (!$menu_info) return false;				$menu_ids = array();		foreach ($menu_info as $menu)		{			$menu_ids[] = $menu['id'];		}		$insertData = $menu_ids;		$menu_ids = implode(',', $menu_ids);				$updateData = array();		$exists_ids = array();		//检测添加的菜单是否已添加到自定义菜单中		$sql = 'SELECT u_id, menu_id, is_del FROM ' . DB_PREFIX . 'custom_menu 		WHERE u_id = ' . $user_id . ' AND menu_id in (' . $menu_ids . ')';		$query = $this->db->query($sql);		while ($rows = $this->db->fetch_array($query))		{			if ($rows['is_del'] == 1)			{				$updateData[] = $rows['menu_id'];			}			$exists_ids[] = $rows['menu_id'];		}		//更新已添加的删除数据为未删除状态		if ($updateData)		{			$this->updateCustomMenus(array('is_del' => 0), $user_id, implode(',', $updateData));		}		$sqlArr = array();		foreach ($insertData as $k => $v)		{			if ($exists_ids)			{				if (!in_array($v, $exists_ids))				{					$sqlArr[] = '(' . $user_id . ', ' . $v . ')';				}			}			else			{				$sqlArr[] = '(' . $user_id . ', ' . $v . ')';			}		}		$sqlArr = implode(', ', $sqlArr);		$sql = 'INSERT INTO ' . DB_PREFIX . 'custom_menu (u_id, menu_id) VALUES' . $sqlArr;		return $this->db->query($sql);	}		/**	 * 更新自定义菜单数据	 * @param Array $data	 * @param Int|String $menu_id	 */	public function updateCustomMenus($data, $user_id, $menu_id)	{		if (!$data || ($data && !is_array($data))) return false;		$fields = array();		foreach($data as $k=>$v)		{			if (is_string($v))			{				$fields[] = $k . "='" . $v . "'";			}			elseif (is_int($v))			{				$fields[] = $k . '=' . $v;			}		}		$sql = 'UPDATE ' . DB_PREFIX . 'custom_menu SET ' . implode(',', $fields) . ' WHERE 1';		if ($user_id)		{			$sql .= ' AND u_id = ' . $user_id;		}		if ($menu_id)		{			if (is_int($menu_id))			{				$sql .= ' AND menu_id = ' . $menu_id;			}			elseif (is_string($menu_id))			{				$sql .= ' AND menu_id in (' . $menu_id . ')';			}		}		return $this->db->query($sql);	}		/**	 * 删除自定义菜单数据	 * @param Int|String $menu_id	 */	public function deleteCustomMenus($menu_id)	{		$sql = 'DELETE FROM ' . DB_PREFIX . 'custom_menu WHERE 1';		if (is_int($menu_id))		{			$sql .= ' AND menu_id = ' . $menu_id;		}		elseif (is_string($menu_id))		{			$sql .= ' AND menu_id in (' . $menu_id . ')';		}		return $this->db->query($sql);	}}?>