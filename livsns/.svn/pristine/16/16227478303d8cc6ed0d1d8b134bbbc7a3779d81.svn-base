<?php/**************************************************************************** LivSNS 0.1* (C)2004-2010 HOGE Software.** $Id: create.php 12691 2012-10-19 09:30:41Z daixin $***************************************************************************/#define('ROOT_DIR', '../../');require( 'global.php');class activity extends appCommonFrm{		function __construct()	{		parent::__construct();		require_once  CUR_CONF_PATH.'lib/activity.class.php';		$this->libactivity = new activityLib();		require_once (ROOT_PATH . 'lib/class/team.class.php');		$this->team = new team();		require_once (ROOT_PATH . 'lib/class/mark.class.php');		$this->libmark = new mark();		require_once (ROOT_PATH . 'lib/class/option.class.php');		$this->liboption = new option();	}		public function checkUserExit()	{		//$this->user = array('user_id'=>123456,'user_name' => dai888);		if(!$this->user['user_id'])		{			$this->errorOutput("用户没有登录");		}		return array('user_id'=>$this->user['user_id'],'user_name' => $this->user['user_name']);	}	//参数获取	public function getData()	{		$data = array();		$data = $this->checkUserExit();		//活动id		if(isset($this->input['action_id']))		{			$data['action_id'] = trim($this->input['action_id']);		}		//名称		if(isset($this->input['action_name']))		{			$data['action_name'] = trim(htmlspecialchars_decode(urldecode($this->input['action_name'])));		}		//分类		if(isset($this->input['action_sort']))		{			$data['action_sort'] = trim(htmlspecialchars_decode(urldecode($this->input['action_sort'])));		}		//活动logo		if(isset($this->input['action_img']))		{			$data['action_img'] = trim(htmlspecialchars_decode(urldecode($this->input['action_img'])));		}		//活动报名截至时间		if(isset($this->input['register_time']))		{			$data['register_time'] = trim(htmlspecialchars_decode(urldecode($this->input['register_time'])));		}		//活动开始时间		if(isset($this->input['start_time']))		{			$data['start_time'] = trim(htmlspecialchars_decode(urldecode($this->input['start_time'])));		}		//活动结束时间		if(isset($this->input['end_time']))		{			$data['end_time'] = trim(htmlspecialchars_decode(urldecode($this->input['end_time'])));		}		//活动地点		if(isset($this->input['province']))		{			$data['province'] = trim(htmlspecialchars_decode(urldecode($this->input['province'])));		}		if(isset($this->input['city']))		{			$data['city'] = trim(htmlspecialchars_decode(urldecode($this->input['city'])));		}		if(isset($this->input['area']))		{			$data['area'] = trim(htmlspecialchars_decode(urldecode($this->input['area'])));		}		if(isset($this->input['address']))		{			$data['address'] = trim(htmlspecialchars_decode(urldecode($this->input['address'])));		}		//活动简介		if(isset($this->input['summary']))		{			$data['summary'] = trim(htmlspecialchars_decode(urldecode($this->input['summary'])));		}		//活动简介		if(isset($this->input['slogan']))		{			$data['slogan'] = trim(htmlspecialchars_decode(urldecode($this->input['slogan'])));		}		//分组id		if(isset($this->input['team_id']))		{			$data['team_id'] = trim(htmlspecialchars_decode(urldecode($this->input['team_id'])));		}		//分组id		if(isset($this->input['location']))		{			$data['location'] = trim(htmlspecialchars_decode(urldecode($this->input['location'])));		}		//分组id		if(isset($this->input['review']))		{			$data['review'] = trim(htmlspecialchars_decode(urldecode($this->input['review'])));		}		//分组id		if(isset($this->input['team_type']))		{			$data['team_type'] = trim(htmlspecialchars_decode(urldecode($this->input['team_type'])));		}		//标签本地数据		if(isset($this->input['mark']))		{			$data['mark'] = trim(htmlspecialchars_decode(urldecode($this->input['mark'])));		}		if(isset($this->input['topic_mark']))		{			$data['topic_mark'] = trim(htmlspecialchars_decode(urldecode($this->input['topic_mark'])));		}		/*		//图片		if(isset($this->input['action_compic']))		{			$data['action_compic'] = trim($this->input['action_compic']);		}		//视频		if(isset($this->input['action_video']))		{			$data['action_video'] = trim($this->input['action_video']);		}		*/		/**报名用户设置**/				//报名是否需要审核				if(isset($this->input['need_info']))		{			$data['need_info'] = trim(urldecode($this->input['need_info']));		}				//活动是否需要支付		if(isset($this->input['need_pay']))		{			$data['need_pay'] = trim(urldecode($this->input['need_pay']));		}		//活动是否限制人数		if(isset($this->input['need_num']))		{			$data['need_num'] = trim(urldecode($this->input['need_num']));		}		return $data;	}		//参数获取	public function getUpdateData()	{		$data = array();		$data = $this->checkUserExit();		//活动id		$data['action_id'] = trim($this->input['action_id']);		$data['action_name'] = trim(htmlspecialchars_decode(urldecode($this->input['action_name'])));		$data['action_sort'] = trim(htmlspecialchars_decode(urldecode($this->input['action_sort'])));		$data['action_img'] = trim(htmlspecialchars_decode(urldecode($this->input['action_img'])));		$data['register_time'] = trim(htmlspecialchars_decode(urldecode($this->input['register_time'])));		$data['start_time'] = trim(htmlspecialchars_decode(urldecode($this->input['start_time'])));		$data['end_time'] = trim(htmlspecialchars_decode(urldecode($this->input['end_time'])));		$data['province'] = trim(htmlspecialchars_decode(urldecode($this->input['province'])));		$data['city'] = trim(htmlspecialchars_decode(urldecode($this->input['city'])));		$data['area'] = trim(htmlspecialchars_decode(urldecode($this->input['area'])));		$data['address'] = trim(htmlspecialchars_decode(urldecode($this->input['address'])));		$data['summary'] = trim(htmlspecialchars_decode(urldecode($this->input['summary'])));		$data['slogan'] = trim(htmlspecialchars_decode(urldecode($this->input['slogan'])));		$data['team_id'] = trim(htmlspecialchars_decode(urldecode($this->input['team_id'])));		$data['location'] = trim(htmlspecialchars_decode(urldecode($this->input['location'])));		$data['review'] = trim(htmlspecialchars_decode(urldecode($this->input['review'])));		$data['team_type'] = trim(htmlspecialchars_decode(urldecode($this->input['team_type'])));		$data['mark'] = trim(htmlspecialchars_decode(urldecode($this->input['mark'])));		$data['topic_mark'] = trim(htmlspecialchars_decode(urldecode($this->input['topic_mark'])));		$data['need_info'] = trim(urldecode($this->input['need_info']));		$data['need_pay'] = trim(urldecode($this->input['need_pay']));		$data['need_num'] = trim(urldecode($this->input['need_num']));		return $data;	}		//逻辑处理	public function processData($data = array())	{		if(is_array($data))		{			//活动名判断			if(defined('ABLE_SAME_NAME') && !ABLE_SAME_NAME)			{				$sname = '';				$sname = $this->libactivity->getActivity('count(action_id) as total', array(), 0, 1, '');				if($sname)				{					$this->errorOutput("活动名重复");				}			}			//活动时间判断			if(!is_numeric($data['start_time']) || !is_numeric($data['end_time']))			{				$this->errorOutput("活动时间格式不对");			}			else			{				if($data['end_time'] < $data['start_time'])				{					$this->errorOutput("活动时间设置不对");				}			}		}	}	//重名判断	public function findNameAbleUse()	{		$data['action_name'] = $this->input['action_name'];		if(!$data['action_name'])		{			$this->errorOutput("活动名不存在");		}		$result = $this->libactivity->getActivity('count(action_id) as total', array(), 0, 1, '');		if($result)		{			$this->errorOutput("活动名重复");		}		$this->addItem(array('state'=>true));		$this->output();	}	//创建	public function create()	{		$data = array();		//加载数据		$data = $this->getData();		if(defined('ABLE_SAME_ACTION'))		{			$total = $this->libactivity->get('activity','count(action_id) as total',array('user_id'=>$data['user_id'],'state'=>1), 0, 1, array());			if(ABLE_SAME_ACTION)			{				if($total > ABLE_SAME_ACTION)				{					$this->errorOutput("你的创建数目已经达到系统的设置的最大数");				}			}		}		//加载创建时间		$data['create_time'] = TIMENOW;		//来源ip		$data['from_ip'] = hg_getip();		//来源部分		$data['app_name'] = $this->user['display_name'];		//来源客户端		$data['client'] = $_SERVER['HTTP_USER_AGENT'];		//加载审核		$data['state'] = 1;//有效				$reslt = $this->libactivity->insertActivity($data);		if($reslt)		{			//提交迅搜借口			$this->team->add_search($reslt, 'action');			$this->team->update_total(array('action_num'=>1,'team_id'=>$data['team_id']));			if(isset($this->input['mark']) && strlen($this->input['mark']))			{				$this->libmark->create_source_id_mark(array('parent_id'=>$data['team_id'], 'source_id'=>$reslt,'action'=>'keywords','source'=>'activity','name'=>trim(urldecode($this->input['mark']))));					}			//添加活动召见者			$post = array();			$post['user_id'] = $data['user_id'];			$post['user_name'] = $data['user_name'];			$post['from_ip'] = $data['from_ip'];			$post['client'] = $data['client'];			$post['app_name'] = $data['app_name'];			$post['apply_time'] = $data['create_time'];			$post['action_id'] = $reslt;			$post['part_num'] = 1;			$post['apply_status'] = 0;			$post['levl'] = 2;			$this->libactivity->insert('activity_apply',$post);			//添加图片			if (isset($this->input['action_compic']) && $this->input['action_compic'])			{				$img = $this->input['action_compic'];				$img = unserialize(trim(urldecode($img)));					//加载新图片				if($img)				{					foreach($img as $k=>$v)					{						$t['img_info'] = htmlspecialchars_decode(trim($v['img_info']));						$t['img_intro'] = htmlspecialchars_decode(trim($v['img_intro']));						$t['action_id'] = $reslt;						$t['r_id'] = -1;						$t['create_time']  = $data['create_time'];						$t['user_id'] = $data['user_id'];						$t['user_name'] = $data['user_name'];						$this->libactivity->insert('material', $t);					}				}			}			//添加视频			if ($this->input['action_video'])			{				$video_url = $this->input['action_video'] ? htmlspecialchars_decode(trim(urldecode($this->input['action_video']))) :'';				$this->team->add_video($video_url, 'action', $reslt);			}			//获取关注小组的用户信息			$members_info = $this->liboption->members('team', $data['team_id'], 'attention', 0, -1);									if ($members_info && $members_info['data']['attention'])			{				$team_info = $this->team->get_one_team($data['team_id']);				//发送通知							include_once ROOT_PATH . '/lib/class/notify.class.php';				$notify = new notify();								$send_arr = array();				$send_con = array();				foreach ($members_info['data']['attention']['infos'] as $v)				{					$send_con['from_id'] = 0;					$send_con['to_id'] = $v['user_id'];					$send_con['content'] = '您关注的"' . $team_info['team_name'] . '"小组有新行动！';					$send_con['page_link'] = 'team.php?team_id=' . $data['team_id'];					$send_con['link_text'] = '快去看看吧！';					$send_arr[] = $send_con;				}				if ($send_arr)				{					$notify->notify_send(json_encode($send_arr), 0);				}							}		}		$this->setXmlNode('activity', 'create');		$this->addItem_withkey('action_id',$reslt);		$this->output();	}		//更新数据	public function update()	{		$data = array();		$data = $this->getUpdateData();				if(!$data['action_id'] || !is_numeric($data['action_id']))		{			$this->errorOutput("你搜索得活动id参数不合法");		}		//获取原始数据		$rawData = $this->libactivity->getActivity('*', array('action_id'=>$data['action_id']), 0, 1, '');				if(!$rawData)		{			$this->errorOutput("你更新的活动不存在");		}		//更新次数		if(defined(EDITS))		{			if($rawData['edit_count'] < EDITS)			{				$data['edit_count'] = $rawData['edit_count'] + 1;			}			else 			{				$this->errorOutput("你的编辑次数过多");			}		}		//更新数据		$result = $this->libactivity->updateActivity($data, false, true);		//更新迅搜接口		$this->team->update_search($data['action_id'], 'action');		//添加图片		$this->libactivity->delete('material', array('action_id'=>$data['action_id'],'r_id'=>'-1'));				///*		if ($this->input['action_compic'])		{			$img = $this->input['action_compic'];			$img = unserialize(trim(urldecode($img)));				//加载新图片			if($img)			{				foreach($img as $k=>$v)				{					$t['img_info'] = htmlspecialchars_decode(trim($v['img_info']));					$t['img_intro'] = htmlspecialchars_decode(trim($v['img_intro']));					$t['action_id'] = $data['action_id'];					$t['r_id'] = -1;					$t['create_time']  = $data['create_time'];					$t['user_id'] = $data['user_id'];					$t['user_name'] = $data['user_name'];					$this->libactivity->insert('material', $t);				}			}		}		//视频		if (isset($this->input['action_video']))		{			$video_url = trim(urldecode($this->input['action_video']));			$video_info = $this->team->show_video($data['action_id'], 'action');			if($video_info)			{				if(!$video_url)				{					$sql = "delete from ".DB_PREFIX."video where source='action' and sid=".$data['action_id'];					$a = $this->db->query($sql);				}				else 				{					if ($video_url != $video_info['url'])					{						$this->team->update_video($video_info['id'], $video_url, 'action', $data['action_id']);					}				}			}			else 			{				$this->team->add_video($video_url, 'action', $data['action_id']);			}		}		else 		{					}		//比较数据，调用对应更新接口		$currentData = $this->libactivity->getActivity('*',array('action_id'=>$data['action_id']), 0, 1, '');		//更新小组数据		if($rawData['team_id'] != $currentData['team_id'])		{			//TODO			if($this->team->update_total(array('action_num'=>-1,'team_id'=>$rawData['team_id'])))			{				$this->team->update_total(array('action_num'=>1,'team_id'=>$currentData['team_id']));			}		}		//更新审核权限		if($rawData['rights'] && !$currentData['rights'])		{			$this->updateRights($data['action_id']);		}		//更新标签				$mark = ($this->input['mark']) ? trim(urldecode($this->input['mark'])) : '';		if($rawData['mark'] || $mark )		{ 			$this->libmark->update_source_id_mark(array('parent_id'=>$rawData['team_id'],'source_id'=>$data['action_id'],'action'=>'keywords','source'=>'activity','name'=>$mark));				}		//*/		$this->setXmlNode('activity', 'update');		$this->addItem_withkey('action_id',$data['action_id']);		$this->output();	}	//更新审核关系只有	public function updateRights($action_id)	{		//获取所有待审核的数据		$result = $this->libactivity->getActivityApply('id,action_id', array('action_id'=>$action_id,'apply_status'=>1,'state'=>1), 0, -1, '');		if($result)		{			$ids = $sp = '';			foreach ($result as $k => $v)			{				$ids .= $sp . $v['id'];				$sp = ',';			}			//更新待审核为免审核			if($this->libactivity->updateActivityApply(array('id'=>ids,'action_id'=>action_id,'apply_status'=>0), true))			{				//更新申请通过的人数				$this->libactivity->updateActivity(array('yet_join'=>count($result),'action_id'=>action_id), true, true);			}		}				return $result;	}	//关闭	public function delete()	{		$data = $this->getData();				if(!$data['action_id'] || !is_numeric($data['action_id']))		{			$this->errorOutput("你搜索得活动id参数不合法");		}		$rawData = $this->libactivity->get('activity', 'team_id,state', array('action_id'=>$data['action_id']), 0, 1, array());		if(!$rawData['state'])		{			$this->errorOutput("你搜索得活动不存在");		}		$state = isset($this->input['state']) ? intval($this->input['state']) : 1;		//关闭		$tata['state'] = $state;		$result = $this->libactivity->update('activity', $tata, array('action_id'=>$data['action_id']), array());		if($result && $tata['state'] != $rawData['state'])		{			if($tata['state'] == 2 && $rawData['state'] == 1)			{				//更新对应小组的活动总数				$this->team->update_total(array('action_num'=>-1,'team_id'=>$rawData['team_id']));				//删除标签				$this->libmark->delete_source_id_mark(array('source_id'=>$data['action_id'],'source'=>'activity','action'=>'keywords','parent_id'=>$rawData['team_id']));			}			else if($tata['state'] == 1 && $rawData['state'] == 2)			{				$this->team->update_total(array('action_num'=>1,'team_id'=>$rawData['team_id']));			}			else if($tata['state'] == 0)			{				if($rawData['state'] == 1)				{					//更新对应小组的活动总数					$this->team->update_total(array('action_num'=>-1,'team_id'=>$rawData['team_id']));					//删除标签					$this->libmark->delete_source_id_mark(array('source_id'=>$data['action_id'],'source'=>'activity','action'=>'keywords','parent_id'=>$rawData['team_id']));				}				//nothing todo			}			else			{				$this->errorOutput("你更新的活动已经被删除，不可以回复");			}					}		if ($result)		{			//获取参与行动的用户信息			$member_info = $this->libactivity->get('activity_apply', 'user_id', array('action_id' => $data['action_id']), 0, -1);			if ($member_info)			{				//发送通知				include_once ROOT_PATH . '/lib/class/notify.class.php';				$notify = new notify();				$send_arr = array();				$send_con = array();				foreach ($member_info as $v)				{					$send_con['from_id'] = 0;					$send_con['to_id'] = $v['user_id'];					$send_con['content'] = '您参与的行动被关闭了！';					$send_arr[] = $send_con;				}				if ($send_arr)				{					$notify->notify_send(json_encode($send_arr), 0);				}			}		}		$this->setXmlNode('activity', 'delete');		$this->addItem_withkey('action_id',$data['action_id']);		$this->output();	}	//显示多条数据	public function show()	{		$offset = isset($this->input['offset']) ? intval($this->input['offset']) : 0;		$count = isset($this->input['count']) ? intval($this->input['count']) : 10;				//获取选取条件		$ce = $data = array();		if($this->input['time_type'])		{			$time_type = $this->input['time_type'];			if($time_type ==1)			{				$ce['start_time'] = '>'.TIMENOW;			}			if($time_type ==2)			{				$ce['start_time'] = '<'.TIMENOW;				$ce['end_time'] = '>'.TIMENOW;			}			if($time_type ==3)			{				$ce['end_time'] = '<'.TIMENOW;			}			if($time_type ==4)			{				$ce['end_time'] = '>'.TIMENOW;			}		}		if(isset($this->input['name']) && !empty($this->input['name']) )		{			$ce['action_name'] = " like '%".trim(htmlspecialchars_decode(urldecode($this->input['name'])))."%' ";		}		$data = $this->getCondition();						//获取选取条件			$this->setXmlNode('activity', 'show');		$total = $this->libactivity->getActivitys('activity','count(action_id) as total',$data,0, 1, array(),$ce);				$this->addItem_withkey('total', $total);		if($total)		{			if(isset($this->input['time']) && $this->input['time'] == 1 )			{				$lis = array('yet_join'=>'desc','create_time'=>'desc');			}			else 			{				$lis = array('create_time'=>'desc');			}			$result = $this->libactivity->getActivitys('activity', 'a.*', $data, $offset, $count, $lis,$ce);						if($result)			{				foreach ($result as $k=>$v)				{					if($v['action_img'])					{						$v['action_img'] = unserialize(htmlspecialchars_decode($v['action_img']));					}					$join_state = 0;					if($this->user['user_id'])					{						$join_state = $this->libactivity->get('activity_apply','count(id) as total',array('user_id'=>$this->user['user_id'],'action_id'=>$v['action_id']),0,1,array());					}					$user = $this->user['user_id'] ? $this->user['user_id'] : 0;					$pp = $this->liboption->getTotalAndUse($user, 'activity', $v['action_id'], 'parise'); 					$v['praise'] = $pp['total'];					$v['join_state'] = $join_state;					$arr[$v['action_id']] =$v;				}				$this->addItem_withkey('data', $arr);			}		}		$this->output();	}	//显示具体某条	public function detail()	{		$offset = isset($this->input['offset']) ? intval($this->input['offset']) : 0;		$count = isset($this->input['count']) ? intval($this->input['count']) : 6;		$data = $this->getCondition();		//print_r($data);exit;		$action_id = trim(urldecode($this->input['action_id']));		if(!$action_id || !is_numeric($action_id))		{			$this->errorOutput("你搜索得活动id参数不合法");		}		//获取选取条件		$data['action_id'] = $action_id;		$result = array();		$result = $this->libactivity->get('activity', '*', $data, 0 , 1, array());		$this->setXmlNode('activity', 'detail');		if(!$result)		{			$this->errorOutput("你搜索得活动不存在");		}		else		{			foreach ($result as $k=>$v)			{				$v = htmlspecialchars_decode($v);				if($k == 'action_img' && $v)				{					$v = unserialize($v);				}				$this->addItem_withkey($k,$v);			}			if($count == 0)			{				//获取用户信息				$yet_join['total'] = $this->libactivity->getActivityApply('count(id) as total', array('action_id'=>$action_id,'apply_status'=>'0,2','state'=>1), 0, 1, '');				if($yet_join['total'])				{					$yet_join['info'] = $this->libactivity->getActivityApply('*', array('action_id'=>$action_id,'apply_status'=>'0,2','state'=>1), $offset, $count, '');				}				$this->addItem_withkey('yet_join',$yet_join);			}			$user_id = ($this->user['user_id']) ? $this->user['user_id'] : 0;			$join = $this->libactivity->get('activity_apply','count(id) as total',array('action_id'=>$action_id,'user_id'=>$user_id),0,1,array());			$this->addItem_withkey('join', $join);			//回顾图片			$review_info = $this->libactivity->get('material', '*', array('action_id'=>$data['action_id']), 0, -1, array(),array());			$img = array();			if($review_info)			{				foreach($review_info as $k=>$v)				{					$v['img_info'] = unserialize(htmlspecialchars_decode($v['img_info']));					if($v['r_id'] >=0)					{						$img[$v['m_id']] = $v;					}					else 					{						$action_compic[$v['m_id']] = $v;					}				}			}			$this->addItem_withkey('action_compic', $action_compic);			$this->addItem_withkey('review_img', $img);			//回顾视频			$video_info = $this->team->show_video($data['action_id'], 'activity');			$this->addItem_withkey('video_url', $video_info);			//			//回顾视频			$video_info = $this->team->show_video($data['action_id'], 'action');			$this->addItem_withkey('action_video', $video_info);		}		$this->output();	}	//某个条件下的条数条数	public function count()	{		//获取选取条件		$data =  array();		$data = $this->getCondition();		//getActivity('count(action_id) as total', $data, 0, 1, '');		$result = $this->libactivity->get('activity','count(action_id) as total', $data, 0, 1, array());		$this->setXmlNode('activity_type', 'count');		$this->addItem_withkey('total',$result);		$this->output();	}	public function showMyAttentionAction()	{		//获取选取条件		$data =  array();		$data = $this->getCondition();		$data['user_id'] = trim($this->input['user_id']);		if(!$data['user_id'])		{			$this->errorOutput("你搜索得用户不存在");		}		$offset = isset($this->input['offset']) ? intval($this->input['offset']) : 0;		$count = isset($this->input['count']) ? intval($this->input['count']) : 6;		$this->setXmlNode('activity', 'showMyAttentionAction');		$total = $this->libactivity->get('activity_apply','count(id) as toal', $data, 0, 1, array());		$this->addItem_withkey('total', $total);		if($total)		{			$result = $this->libactivity->showMyAttentionAction($data, $offset, $count, array('apply_time'=>'desc','create_time'=>'desc'));			$this->addItem_withkey('data', $result);		}		$this->output();	}	//活动回顾	public function getReviewActions()	{		$offset = isset($this->input['offset']) ? intval($this->input['offset']) : 0;		$count = isset($this->input['count']) ? intval($this->input['count']) : 10;		$team_id =  intval($this->input['team_id']) ;		$this->setXmlNode('activity', 'getReviewActions');		$total = $this->libactivity->get('activity','count(action_id) as total',array('state'=>1,'team_id'=>$team_id),0, 1, array(),array('end_time'=>'<'.TIMENOW));				$this->addItem_withkey('total', $total);		if($total)		{			$result = $this->libactivity->get('activity', '*',array('state'=>1,'team_id'=>$team_id), $offset, $count, array(),array('end_time'=>'<'.TIMENOW));			if($result)			{				foreach($result as $k=>$v)				{					$v[ 'action_img'] = unserialize(htmlspecialchars_decode($v['action_img']));					$review_info = $this->libactivity->get('material', '*', array('action_id'=>$v['action_id']), 0, -1, array());					$img = array();					if($review_info)					{						foreach($review_info as $m=>$n)						{							$n['img_info'] = unserialize(htmlspecialchars_decode($n['img_info']));							$img[$n['m_id']] = $n;						}					}					$v['review_img'] = $img;					//					$video_info = $this->team->show_video($v['action_id'], 'activity');					$v['video_url'] = $video_info;					$arr[$v['action_id']] = $v;				}				$this->addItem_withkey('data', $arr);			}		}		$this->output();	}		//活动回顾	public function getEndActions()	{		$offset = isset($this->input['offset']) ? intval($this->input['offset']) : 0;		$count = isset($this->input['count']) ? intval($this->input['count']) : 10;		$team_id =  intval($this->input['team_id']) ;		$this->setXmlNode('activity', 'getReviewActions');		$total = $this->libactivity->get('activity','count(action_id) as total',array('state'=>1,'team_id'=>$team_id),0, 1, array(),array('end_time'=>'<'.TIMENOW, 'review'=>' != "" '));				$this->addItem_withkey('total', $total);		if($total)		{			$result = $this->libactivity->get('activity', '*',array('state'=>1,'team_id'=>$team_id), $offset, $count, array(),array('end_time'=>'<'.TIMENOW, 'review'=>' != "" '));			if($result)			{				foreach($result as $k=>$v)				{					$v[ 'action_img'] = unserialize(htmlspecialchars_decode($v['action_img']));					$review_info = $this->libactivity->get('material', '*', array('action_id'=>$v['action_id']), 0, -1, array());					$img = array();					if($review_info)					{						foreach($review_info as $m=>$n)						{							$n['img_info'] = unserialize(htmlspecialchars_decode($n['img_info']));							$img[$n['m_id']] = $n;						}					}					$v['review_img'] = $img;					//					$video_info = $this->team->show_video($v['action_id'], 'activity');					$v['video_url'] = $video_info;					$arr[$v['action_id']] = $v;				}				$this->addItem_withkey('data', $arr);			}		}		$this->output();	}	//按时间段加载数据	public function getTimeActions()	{		$data = array();		if(isset($this->input['type']))		{			 $year = date("Y");			 $month = date("m");			 $allday = date("t");			 			 $strat_time = strtotime($year."-".$month."-1");			 $end_time = strtotime($year."-".$month."-".$allday);			$data['start_time'] = ">".(isset($this->input['start_time']) ? intval($this->input['start_time']) : $strat_time);			$data['end_time'] = "<".(isset($this->input['end_time']) ? intval($this->input['end_time']) : $end_time);			$count = -1;		}		else 		{			$count = 100;		}		$team_id =  intval($this->input['team_id']) ;		if(!$team_id)		{			$this->errorOutput("你搜索得小组不存在不存在");		}		$this->setXmlNode('activity', 'getTimeActions');		$total = $this->libactivity->getEndActions('activity','count(action_id) as total',array('state'=>1,'team_id'=>$team_id),0, 1, array());		$this->addItem_withkey('total', $total);		if($total)		{			$result = $this->libactivity->getEndActions('activity', '*',array('state'=>1,'team_id'=>$team_id), 0, $count, array(),$data);			//获取活动id			if($result)			{				$ids = $sp = '';				foreach($result as $k=>$v)				{					$ids .= $sp . $v['action_id'];					$sp = ',';					$v['action_img'] = unserialize(htmlspecialchars_decode($v['action_img']));					$arr[$v['action_id']] = $v;				}				$test = $this->libactivity->get('activity_review','*',array('action_id'=>$ids), 0, $count, array('create_time'=>'desc'));				if($test)				{					foreach($test as $k=>$v)					{						$tt[$v['action_id']] = $arr[$v['action_id']];						$tt[$v['action_id']]['up_time'] = $v['create_time'];					}				}				$this->addItem_withkey('data', $tt);			}		}		$this->output();	}	//	public function getCondition ()	{		$data = array ();		//状态		$data['state'] = '1';		if(isset($this->input['state']))		{			$data['state'] = trim($this->input['state']);		}		//小组		if(isset($this->input['team_id']))		{			$data['team_id'] = trim($this->input['team_id']);		}		//小组		if(isset($this->input['action_id']))		{			$data['action_id'] = trim($this->input['action_id']);		}		//类型		if(isset($this->input['team_type']) || isset($this->input['team_category']))		{			$post = array();			if(isset($this->input['team_type']) && !empty($this->input['team_type']))			{				$post['team_type'] = $this->input['team_type'];			}			if(isset($this->input['team_category']) && !empty($this->input['team_category']))			{				$post['team_category'] = $this->input['team_category'];			}			$post['state'] = 1;			if($post)			{				$teams = $this->libactivity->get('team','team_id',$post,0,-1,array());								$data['team_id'] = $sp = '';				foreach($teams as $k=>$v)				{					$data['team_id'] .= $sp . $v['team_id'];					$sp = ',';				}			}		}				if(isset($this->input['user_id']))		{			$data['user_id'] = trim(htmlspecialchars_decode(urldecode($this->input['user_id'])));		}		return $data;	}		public function getRevData()	{		$data = array();				if(isset($this->input['yet_join']) && is_numeric($this->input['yet_join']))		{			$data['yet_join'] = trim($this->input['yet_join']);		}		if(isset($this->input['apply_num']) && is_numeric($this->input['apply_num']))		{			$data['apply_num'] = trim($this->input['apply_num']);		}		if(isset($this->input['collect_num']) && is_numeric($this->input['collect_num']))		{			$data['collect_num'] = trim($this->input['collect_num']);		}		if(isset($this->input['thread_num']) && is_numeric($this->input['thread_num']))		{			$data['thread_num'] = trim($this->input['thread_num']);		}		if(isset($this->input['reply_num']) && is_numeric($this->input['reply_num']))		{			$data['reply_num'] = trim($this->input['reply_num']);		}		if(isset($this->input['scan_num']) && is_numeric($this->input['scan_num']))		{			$data['scan_num'] = trim($this->input['scan_num']);		}		if(isset($this->input['share_num']) && is_numeric($this->input['share_num']))		{			$data['share_num'] = trim($this->input['share_num']);		}		if(isset($this->input['praise_num']) && is_numeric($this->input['praise_num']))		{			$data['praise_num'] = trim($this->input['praise_num']);		}		if(isset($this->input['heat_num']) && is_numeric($this->input['heat_num']))		{			$data['heat_num'] = trim($this->input['heat_num']);		}		return $data;	}	/***	 * 数据增加更新接口	 ***/		public function updateAddData()	{		$data = array();		$data = $this->getRevData();		if(isset($this->input['action_id']) && is_numeric($this->input['action_id']))		{			$pata['action_id'] = trim($this->input['action_id']);		}		if(!$data || !$pata['action_id'])		{			$this->errorOutput("你传递的参数不合法");		}		$result = $this->libactivity->update('activity', $data, $pata, $data);		$this->setXmlNode('activity', 'updateAddData');		$this->addItem(array('state'=>$result));		$this->output();	}	public function getPermission($team_id, $permission = '')	{		$result = array();		$result = $this->team->get_permission($team_id, 1, $permission = '');		return $result;	}	public function showApplyTypes()	{		$result = array();		$result = $this->libactivity->get('activity_apply_type','type_id,type_name,type_value', array('user_id'=>0), 0, -1, array());		$this->setXmlNode('activity', 'showApplyTypes');		foreach($result as $k => $v)		{			$this->addItem_withkey($v['type_id'],$v);		}		$this->output();	}	public function updateReview()	{		$data = array();		$data = $this->getData();				$pre = $this->libactivity->get('activity','action_id,state,team_id,isopen,type_state', array('action_id'=>$data['action_id']),0 ,1,array());//;		if($pre['state'] !=1 || $pre['isopen'] !=1)		{			$this->errorOutput("你编辑的活动没有开启或存在");		}		$result = $this->libactivity->get('activity_review','id', array('action_id'=>$data['action_id']),0 ,1,array());//;		//加载视频		if (isset($this->input['video_url']))		{			$video_url = $this->input['video_url'] ? trim(urldecode($this->input['video_url'])) :'';			$video_info = $this->team->show_video($data['action_id'], 'activity');			if($video_info)			{				if(!$video_url)				{					$sql = "delete from ".DB_PREFIX."video where source='activity' and sid=".$data['action_id'];					$a = $this->db->query($sql);				}				else 				{					if ($video_url != $video_info['url'])					{						$this->team->update_video($video_info['id'], $video_url, 'activity', $data['action_id']);					}				}			}		}		else 		{			$this->db->query("delete from '.DB_PREFIX.'video where source='activity' and sid=".$data['action_id']);		}		if($result)		{			$id = $result;			$this->libactivity->update('activity_review', array('review'=>$data['review'],'up_time'=>TIMENOW), array('id'=>$id),array());		}		else 		{			$team_id = $pre['team_id'];			$data['create_time'] = TIMENOW;			$data['team_id'] = $team_id;			$id = $this->libactivity->insert('activity_review',$data);			if($id)			{				if($team_id)				{					$this->updateTimesData($team_id, 1);				}			}		}		//删除原来图片		if($id)		{			$this->libactivity->delete('material', array('action_id'=>$data['action_id'],'r_id'=>$id));		}		//加载图片		if (isset($this->input['img']) && $this->input['img'])		{			$img = $this->input['img'];			$img = unserialize(trim(urldecode($img)));				//加载新图片			if($img)			{				foreach($img as $k=>$v)				{					$t['img_info'] = htmlspecialchars_decode(trim($v['img_info']));					$t['img_intro'] = htmlspecialchars_decode(trim($v['img_intro']));					$t['action_id'] =$data['action_id'];					$t['r_id'] = $id;					$t['create_time']  = $data['create_time'];					$t['user_id'] = $data['user_id'];					$t['user_name'] = $data['user_name'];					$t['state'] = $pre['state'];					if($pre['state'] == 1)					{						if($pre['type_state']=='')						{							$t['type_state'] = 'avtivity';						}						else 						{							$t['type_state'] = $pre['type_state'];						}					}										$this->libactivity->insert('material', $t);				}			}		}		//先向原文件写入		$this->libactivity->update('activity', array('review'=>$data['review']), array('action_id'=>$data['action_id']),array());				$this->setXmlNode('activity', 'updateReview');		$this->addItem_withkey('info',$data['action_id']);		$this->output();	}	//获取时间轴的时间	public function getTimesData()	{		$team_id = trim($this->input['team_id']);		if(!$team_id)		{			$this->errorOutput("你缺少重要参数");		}		$result = $this->libactivity->get('activity_review_date','DISTINCT year,month,sign',array('team_id'=>$team_id,'state'=>1),0,-1,array('year'=>'desc','month'=>'desc'),array('sign'=>'>0'));		$this->setXmlNode('activity', 'updateReview');		if($result)		{			foreach($result as $k=>$v)			{				$arr[$v['year']][$v['month']] = $v['sign'];				$this->addItem_withkey($v['year'],$arr[$v['year']]);			}		}		$this->output();	}	//更新时间数据	public function updateTimesData($team_id, $num)	{		$data['year'] = date("Y");		$data['month']  = date("m"); 		$data['day']  = date("d"); 		$data['team_id'] = $team_id;		$result = $this->libactivity->get('activity_review_date', '*',$data, 0, 1,array());		if($result)		{			$this->libactivity->update('activity_review_date', array('sign'=>$num), $data, array('sign'=>$num));		}		else		{			$data['sign'] = $num;			$this->libactivity->insert('activity_review_date', $data);		}		return true;	}	/**	 * 物理删除	 * Enter description here ...	 */	public function clear()	{		if($this->input['action_id'])		{			$data['action_id'] = trim($this->input['action_id']);		}		if($this->input['team_id'])		{			$data['team_id'] = trim($this->input['team_id']);		}		$ids = $this->libactivity->get('activity', 'action_id,team_id,isopen', $data, 0, -1, array());		if($ids)		{			$team_id = $action_id = $sp = ''; 			foreach($ids as $k=>$v)			{				$action_id .= $sp . $v['action_id'];				$team_id .= $sp . $v['team_id'];				 $sp = ','; 				 if($v['isopen'])				 {				 	$this->libactivity->update('team', array('action_num'=>-1), array('team_id'=>$v['team_id']), array('action_num'=>-1));				 }			}			//删除活动评论			$this->libactivity->delete('commtent',  array('action_id'=>$action_id));			//删除回顾			if(isset($this->input['team_id']))			{				$this->libactivity->delete('activity_review_date',  array('team_id'=>$team_id));			}			else			{							}			//删除附件			$this->libactivity->delete('material',  array('action_id'=>$action_id));			//删除视频			$this->libactivity->delete('video',  array('sid'=>$action_id,'source'=>'activity'));			//删除视频			$this->libactivity->delete('video',  array('sid'=>$action_id,'source'=>'action'));			//删除回顾			$this->libactivity->delete('activity_review',  array('action_id'=>$action_id));						//删除活动参加			$this->libactivity->delete('activity_apply',  array('action_id'=>$action_id));						//删除足迹			$this->team-> delete_visit($action_id,'action');			//删除赞			$this->liboption->delete(array('source'=>'activity', 'source_id'=>$action_id, 'action'=>'parise'));			//删除标签			$this->libmark->delete_source_id_mark(array('source'=>'activity', 'source_id'=>$action_id, 'action'=>'keywords'));			//删除活动			$this->libactivity->delete('activity',  $data);		}		$this->setXmlNode('activity', 'clear');		$this->addItem_withkey('state',true);		$this->output();	}		function getTopicMarkDay()	{		$count = $this->input['count'] ? $this->input['count'] : 10;		$ret = $this->libactivity->getTopicMarkDay($count);		$this->addItem($ret);		$this->output();	}	//删除活动	function updateDeleteState()	{		$set = $post = $data = array();				$set['state'] = trim($this->input['state']);		if($set['state'] == 1)		{			$data['type_state'] = $post['type_state'] = trim(urldecode($this->input['type']));			$set['type_state'] = '';		}		else 		{			$set['type_state'] = trim(urldecode($this->input['type']));			//更新状态			$post['state'] = 1;		}		if(isset($this->input['action_id']))		{			$post['action_id'] = $data['action_id'] = trim($this->input['action_id']);		}		if(isset($this->input['team_id']))		{			$data['team_id'] = trim($this->input['team_id']);		}				$result = array();		$result = $this->libactivity->get('activity','action_id,team_id', $data, 0, -1, array());		if($result)		{			if(!(isset($post['action_id']) && !empty($post['action_id'])))			{				$post['action_id'] = $sp = '';				foreach($result as $k=>$v)				{					$post['action_id'] .= $sp . $v['action_id']; 					$sp = ',';					$team[$v['action_id']][] = $v['team_id']; 				}			}		}			if($this->libactivity->update('activity', $set, $post, array()))		{			//更新报名表			$this->libactivity->update('activity_apply', $set, $post, array());			//更新活动评论表			$this->libactivity->update('commtent', $set, $post, array());			//更新回顾表			if(isset($this->input['team_id']))			{				//更新所有的小组统计				$this->libactivity->update('activity_review_date', $set, array('team_id'=>implode(',', $team)), array());			}			else 			{				$list = array();				$list =  $this->libactivity->get('activity_review','create_time,action_id,state', $post, 0, -1, array());				if($list)				{					foreach($list as $k=>$v)					{						$data = array();						$data['year'] = date("Y", $v['create_time']);						$data['month']  = date("m", $v['create_time']); 						$data['day']  = date("d", $v['create_time']); 						$data['team_id'] =  $team[$v['action_id']];						if($list[$v['state']] ==1 && ($set['state'] ==0))						{							$this->libactivity->update('activity_review_date', array('sign'=>-1), $data,  array('sign'=>-1));						}						elseif($set[$v['state']] ==1 && ($list['state'] ==0))						{							$this->libactivity->update('activity_review_date', array('sign'=>1), $data,  array('sign'=>1));						}						else 						{							//TODO						}					}				}			}			$this->libactivity->update('activity_review', $set, $post, array());			//更新附件表			$this->libactivity->update('material', $set, $post, array());			//更新视频表			$this->libactivity->update('video', $set, $post, array());			//更新标签表			$set['source'] = 'activity';			$set['source_id'] = implode(',', $post['action_id']);			$this->libmark->update_mark_state($set);			//更新赞			$this->liboption->updateState($set);		}		//迅搜接口		if ($set['state'])		{			$this->team->add_search($post['action_id'], 'action');		}		else 		{			$this->team->delete_search($post['action_id'], 'action');		}		$this->setXmlNode('activity', 'updateDeleteState');		$this->addItem_withkey('action_id', $post['action_id']);		$this->output();	}	//关闭开启活动	function updateCloseState()	{		$set['isopen'] = isset($this->input['isopen']) ? trim($this->input['isopen']) : 1;		$post['action_id'] = trim($this->input['action_id']);				$result = $this->libactivity->update('activity', $set, $post, array());				$this->setXmlNode('activity', 'updateCloseState');		$this->addItem_withkey('action_id', $post['action_id']);		$this->output();	}		//失误方法	function unknow()	{		$this->errorOutput("你搜索得方法不存在");	}	function __destruct()	{		parent::__destruct();		unset($this->libactivity);	}	}$out = new activity();$action = $_REQUEST['a'];if (!method_exists($out,$action)){	$action = 'unknow';}$out->$action();