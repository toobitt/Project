<?php/**************************************************************************** LivSNS 0.1* (C)2004-2010 HOGE Software.** $Id: shortcutMenu_update.php 12433 2012-10-11 09:59:16Z yaojian $***************************************************************************/require_once './global.php';require_once CUR_CONF_PATH . 'lib/menu.class.php';define('MOD_UNIQUEID', 'shortCutMenu'); //模块标识class shortCutMenuUpdateApi extends adminUpdateBase{	private $menu;		public function __construct()	{		parent::__construct();		$this->menu = new menu();	}		public function __destruct()	{		parent::__destruct();		unset($this->menu);	}		/**	 * 创建快捷菜单	 */	public function create()	{		//处理提交的数据		$data = $this->check_data();		//验证菜单名称是否已经存在		$verify = $this->menu->check_menu_exists($data['menu_name']);		if ($verify) $this->errorOutput(NAME_EXISTS);		$data['user_id'] = $this->user['user_id'];		$data['user_name'] = $this->user['user_name'];		$data['create_time'] = TIMENOW;		$result = $this->menu->createShortCutMenu($data);		$this->addItem($result);		$this->output();	}		/**	 * 修改快捷菜单	 */	public function update()	{		$menu_id = isset($this->input['m_id']) ? intval($this->input['m_id']) : -1;		if ($menu_id < 0) $this->errorOutput(PARAM_WRONG);		$menu_info = $this->menu->getOneShortCutMenu($menu_id);		if (!$menu_info) $this->errorOutput(OBJECT_NULL);		//处理提交的数据		$data = $this->check_data();		$verifyData = array();		if ($data['menu_name'] != $menu_info['menu_name'])		{			//验证修改的名称是否存在			$verify = $this->menu->check_menu_exists($data['menu_name']);			if ($verify) $this->errorOutput(NAME_EXISTS);			$verifyData['menu_name'] = $data['menu_name'];		}		if ($data['menu_link'] != $menu_info['menu_link'])		{			$verifyData['menu_link'] = $data['menu_link'];		}		$result = $this->menu->updateShortCutMenu($verifyData, array('menu_id' => $menu_id));		$this->addItem($result);		$this->output();	}		/**	 * 删除快捷菜单	 */	public function delete()	{		$menu_id = isset($this->input['m_id']) ? trim(urldecode($this->input['m_id'])) : '';		if (empty($menu_id)) $this->errorOutput(PARAM_WRONG);		if (!strpos($menu_id, ',')) $menu_id = intval($menu_id);		//先删除自定义菜单中对应的数据		$this->menu->deleteCustomMenus($menu_id);		//删除快捷菜单		$result = $this->menu->deleteShortCutMenu(array('menu_id' => $menu_id));		$this->addItem($result);		$this->output();	}		public function audit()	{			}		public function publish()	{			}		public function sort()	{			}		/**	 * 处理提交的数据	 */	private function check_data()	{		$menu_name = isset($this->input['m_name']) ? trim(urldecode($this->input['m_name'])) : '';		$menu_link = isset($this->input['m_link']) ? trim(urldecode($this->input['m_link'])) : '';		if (empty($menu_name) || empty($menu_link))		{			$this->errorOutput(PARAM_WRONG);		}		return array(			'menu_name' => $menu_name,			'menu_link' => $menu_link		);	}		/**	 * 方法不存在的时候调用的方法	 */	public function none()	{		$this->errorOutput('调用的方法不存在');	}}$out = new shortCutMenuUpdateApi();$action = $_INPUT['a'];if (!method_exists($out,$action)){	$action = 'none';}$out->$action();?>