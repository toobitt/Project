<?php/**************************************************************************** LivSNS 0.1* (C)2004-2010 HOGE Software.** $Id: photoedit.php 17960 2013-03-21 14:28:00 jeffrey $***************************************************************************/require_once './global.php';require_once CUR_CONF_PATH . 'lib/photoedit.class.php';define('MOD_UNIQUEID', 'photoedit'); //模块标识class photoeditApi extends adminReadBase{	private $photoedit;		public function __construct()	{		parent::__construct();		$this->photoedit = new photoeditClass();	}	public function __destruct()	{		parent::__destruct();		unset($this->photoedit);	}		public function index()	{			}		/**	 * 信息列表	 */	public function show()	{		$offset = isset($this->input['offset']) ? intval($this->input['offset']) : 0;		$count = isset($this->input['count']) ? intval($this->input['count']) : 20;		$condition = $this->get_condition();		$photoedit_info = array();		$photoedit_info = $this->photoedit->show($offset, $count, $condition);		$this->setXmlNode('photoedit_info', 'photoedit');				if ($photoedit_info)		{			foreach ($photoedit_info as $value)			{				$this->addItem($value);			}		}				$this->output();	}		/**	* 单一图片的历史痕迹	**/	public function viewall()	{		$fid = intval($this->input['fid']);		if (empty($fid)){			$this->errorOutput(OBJECT_NULL);		}		else		{			$result = array();			$result = $this->photoedit->detail_f($fid);			foreach($result as $k => $v)			{				$result[$k]['update_time'] = date("Y-m-d H:i:s",$v['update_time']);				$result[$k]['lujing'] = AD_DOMAIN;			}		}		$this->addItem($result);		$this->output();	}		/**	 * 信息数据总数	 */	public function count()	{		$condition = $this->get_condition();		$info = $this->photoedit->count($condition);		echo json_encode($info);	}	/**	**	信息编辑	**/	public function detail()	{		$id = trim($this->input['id']);		if(!$id){			$this->errorOutput(OBJECT_NULL);		}				$info = array();		$info = $this->photoedit->detail($id);		$this->addItem($info);		$this->output();	}		/**	 * 查询条件	 * @param Array $data	 */	private function get_condition()	{			//自定义时间查询		if($this->input['start_time'])		{			$start_time = strtotime(trim(($this->input['start_time'])));			$start_time = (int)$start_time;			$condition .= " AND create_time >= ".$start_time;		}				if($this->input['end_time'])		{			$end_time = strtotime(trim(($this->input['end_time'])));			$end_time = (int)$end_time;			$condition .= " AND create_time <= ".$end_time;		}				if($this->input['date_search'])		{			$today = strtotime(date('Y-m-d'));			$tomorrow = strtotime(date('y-m-d',TIMENOW+24*3600));			switch(intval($this->input['date_search']))			{				case 1://所有时间段					break;				case 2://昨天的数据					$yesterday = strtotime(date('y-m-d',TIMENOW-24*3600));					$condition .= " AND  create_time > '".$yesterday."' AND create_time < '".$today."'";					break;				case 3://今天的数据					$condition .= " AND  create_time > '".$today."' AND create_time < '".$tomorrow."'";					break;				case 4://最近3天					$last_threeday = strtotime(date('y-m-d',TIMENOW-2*24*3600));					$condition .= " AND  create_time > '".$last_threeday."' AND create_time < '".$tomorrow."'";					break;				case 5://最近7天					$last_sevenday = strtotime(date('y-m-d',TIMENOW-6*24*3600));					$condition .= " AND  create_time > '".$last_sevenday."' AND create_time < '".$tomorrow."'";					break;				default://所有时间段					break;			}		}				return $condition;	}}$out = new photoeditApi();$action = $_INPUT['a'];if (!method_exists($out, $action)){	$action = 'show';}$out->$action();?>