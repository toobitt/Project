<?phpclass teamClass extends InitFrm{	public function __construct()	{		parent::__construct();	}		public function __destruct()	{		parent::__destruct();	}		/**	 * 根据条件获取小组信息	 * @param Int $offset	 * @param Int $count	 * @param Array $data	 */	public function show($offset, $count, $data = array())	{		if ($count != -1)		{			$data_limit = ' LIMIT ' . $offset . ' , ' . $count;		}				$sql = 'SELECT t.*,t.permission+0 as permission,tt.type_name,tc.c_name as category_name FROM ' . DB_PREFIX . 'team t 		LEFT JOIN ' . DB_PREFIX . 'team_type tt ON t.team_type = tt.type_id 		LEFT JOIN ' . DB_PREFIX . 'team_category tc ON t.team_category = tc.c_id WHERE 1'; 		//获取查询条件		$condition = $this->get_condition($data);		$sql = $sql . $condition . $data_limit;		$query = $this->db->query($sql);		$info = array();		while($row = $this->db->fetch_array($query))		{			$row['team_logo'] = unserialize(htmlspecialchars_decode($row['team_logo']));			$info[] = $row;		}		return $info;	}		/**	 * 根据小组的ID获取小组	 * @param String $ids	 * @param Int $state	 */	public function team_by_id($ids, $state = null)	{		$sql = 'SELECT t.*,t.permission+0 as permission,tt.type_name,tc.c_name as category_name FROM ' . DB_PREFIX . 'team t 		LEFT JOIN ' . DB_PREFIX . 'team_type tt ON t.team_type = tt.type_id 		LEFT JOIN ' . DB_PREFIX . 'team_category tc ON t.team_category = tc.c_id WHERE t.team_id in (' . $ids . ')';		if (isset($state))		{			$sql .= ' AND t.state = ' . $state;		}		else		{			$sql .= ' AND t.state != -1';		}		$query = $this->db->query($sql);		$info = array();		while ($row = $this->db->fetch_array($query))		{			$row['team_logo'] = unserialize(htmlspecialchars_decode($row['team_logo']));			$info[$row['team_id']] = $row;		}		return $info;	}		/**	 * 根据条件获取小组信息的总数	 * @param Array $data	 */	public function count($data = array())	{		$sql = 'SELECT COUNT(t.team_id) AS total FROM ' . DB_PREFIX . 'team t WHERE 1';		$condition = $this->get_condition($data);						$sql = $sql . $condition;		$info = $this->db->query_first($sql);		return $info;	}		/**	 * 根据条件获取单个小组信息	 * @param Int $team_id	 * @param Int $state	 */	public function detail($team_id, $state = null)	{		$sql = 'SELECT t.*,t.permission+0 as permission,tt.type_name,tc.c_name as category_name FROM ' . DB_PREFIX . 'team t 		LEFT JOIN ' . DB_PREFIX . 'team_type tt ON t.team_type = tt.type_id 		LEFT JOIN ' . DB_PREFIX . 'team_category tc ON t.team_category = tc.c_id WHERE t.team_id = ' . $team_id;		if (isset($state))		{			$sql .= ' AND t.state = ' . $state;		}		else		{			$sql .= ' AND t.state != -1';		}		$result = $this->db->query_first($sql);		if ($result)		{			$result['team_logo'] = unserialize(htmlspecialchars_decode($result['team_logo']));		}		return $result;	}		/**	 * 获取小组类型的数据	 * @param Int $type	 */	public function team_type($type)	{		$sql = 'SELECT * FROM ' . DB_PREFIX . 'team_type WHERE 1';		if ($type) $sql .= ' AND type_id = ' . $type;		$query = $this->db->query($sql);		$info = array();		while($row = $this->db->fetch_array($query))		{			$info[] = $row;		}		return $info;	}		/**	 * 获取小组分类信息	 */	public function team_category()	{		$sql = 'SELECT c_id,c_name,CONCAT(c_path, "-", c_id) bpath,team_num FROM ' . DB_PREFIX . 'team_category 		ORDER BY bpath';		$query = $this->db->query($sql);		$info = array();		while($row = $this->db->fetch_array($query))		{			$info[] = $row;		}		return $info;	}		/**	 * 检测小组类型	 * @param Int $type	 */	public function check_team_type($type)	{		$sql = 'SELECT COUNT(type_id) AS total FROM ' . DB_PREFIX . 'team_type 		WHERE type_id = ' . $type;		$result = $this->db->query_first($sql);		return $result['total'];	}		/**	 * 检测小组分类	 * @param Int $category	 */	public function check_team_category($category)	{		$sql = 'SELECT COUNT(c_id) AS total FROM ' . DB_PREFIX . 'team_category 		WHERE c_id = ' . $category;		$result = $this->db->query_first($sql);		return $result['total'];	}		/**	 * 检测小组名称是否存在	 * @param String $name	 */	public function check_team_name($name, $id = 0)	{		if ($id)		{			$cond = ' AND team_id != ' . intval($id);		}		$sql = 'SELECT * FROM ' . DB_PREFIX . 'team WHERE team_name = "' . $name . '"' . $cond;		return $this->db->query_first($sql);	}		/**	 * 检测创建小组的个数	 * @param Int $user_id	 */	public function check_create_team_num($user_id)	{		$sql = 'SELECT COUNT(team_id) AS total FROM ' . DB_PREFIX . 'team 		WHERE creater_id = ' . $user_id . ' AND state != -1';		$result = $this->db->query_first($sql);		return $result['total'];	}		/**	 * 是否为行动召集者	 * @param Int $team_id	 * @param String $user_id	 */	public function is_apply_user($team_id, $user_id)	{		$sql = 'SELECT user_id FROM ' . DB_PREFIX . 'apply_action 		WHERE team_id = ' . $team_id . ' AND user_id in (' . $user_id . ')' . ' AND state = 1 AND status = 1';		$query = $this->db->query($sql);		$info = array();		while ($row = $this->db->fetch_array($query))		{			$info[] = $row['user_id'];		}		return $info;	}		/**	 * 检测是否申请过行动召集者	 * @param Int $team_id	 * @param Int $user_id	 */	public function is_apply($team_id, $user_id)	{		$sql = 'SELECT COUNT(*) AS total FROM ' . DB_PREFIX . 'apply_action 		WHERE team_id = ' . $team_id . ' AND user_id = ' . $user_id . ' AND state != -1 AND status = 1';		$result = $this->db->query_first($sql);		return $result['total'];	}		/**	 * 获取黑名单用户信息	 * @param Int $team_id	 * @param Int $offset	 * @param Int $count	 */	public function black_list($team_id, $offset, $count)	{		$data_limit = ' LIMIT ' . $offset . ' , ' . $count;		$sql = 'SELECT * FROM ' . DB_PREFIX . 'team_blacklist 		WHERE team_id = ' . $team_id . ' AND status = 1 ORDER BY join_time DESC';		$sql .= $data_limit;		$query = $this->db->query($sql);		$info = array();		while ($row = $this->db->fetch_array($query))		{			$info[] = $row;		}		return $info;	}		/**	 * 获取黑名单用户总数	 * @param Int $team_id	 */	public function blacklist_count($team_id)	{		$sql = 'SELECT COUNT(black_id) AS total FROM ' . DB_PREFIX . 'team_blacklist 		WHERE team_id = ' . $team_id . ' AND status = 1';		$result = $this->db->query_first($sql);		return $result;	}		/**	 * 检测是否已被拉入黑名单	 * @param Int $team_id	 * @param Int $user_id	 */	public function check_join_black_list($team_id, $user_id)	{		$sql = 'SELECT COUNT(black_id) AS total FROM ' . DB_PREFIX . 'team_blacklist 		WHERE team_id = ' . $team_id . ' AND user_id = ' . $user_id . ' AND status = 1';		$result = $this->db->query_first($sql);		return $result['total'];	}		/**	 * 获取申请活动召集者信息	 * @param String $where	 * @param Array $limit	 * @param Array $order	 */	public function get_apply_list($where = '', $limit = array(0, 20), $order = array('apply_time' => 'DESC'))	{				$sql = 'SELECT * FROM ' . DB_PREFIX . 'apply_action WHERE status = 1';		if ($where) $sql .= ' AND ' . $where;		if ($order)		{			$sql .= ' ORDER BY ';			$delimiter = '';			foreach ($order as $k=>$v)			{				$sql .= $delimiter . $k . ' ' . $v;				$delimiter = ',';			}		}		if ($limit)		{			$sql .= ' LIMIT ' . $limit[0] . ', ' . $limit[1];		}		$query = $this->db->query($sql);		$info = array();		while ($row = $this->db->fetch_array($query))		{			$info[] = $row;		}		return $info;	}		/**	 * 获取单个申请信息	 * @param Int $apply_id	 */	public function get_one_apply($apply_id)	{		$sql = 'SELECT * FROM ' . DB_PREFIX . 'apply_action WHERE a_id = ' . $apply_id . ' AND status = 1';		$result = $this->db->query_first($sql);		return $result;	}		/**	 * 获取申请活动召集者总数	 * @param String $where	 */	public function get_apply_count($where = '')	{		$sql = 'SELECT COUNT(a_id) AS total FROM ' . DB_PREFIX . 'apply_action WHERE status = 1';		if ($where)		{				$sql = $sql . ' AND ' . $where;		}		$info = $this->db->query_first($sql);		return $info;	}		/**	 * 获取某个小组的公告	 * @param Int $team_id	 * @param Int $offset	 * @param Int $count	 */	public function get_notice_by_team($team_id, $offset, $count)	{		$data_limit = ' LIMIT ' . $offset . ' , ' . $count;		$sql = 'SELECT * FROM ' . DB_PREFIX . 'team_announcement WHERE team_id = ' . $team_id;		$sql .= ' ORDER BY pub_time DESC';		$sql .= $data_limit;		$query = $this->db->query($sql);		$info = array();		while($row = $this->db->fetch_array($query))		{			$info[] = $row;		}		return $info;	}		/**	 * 获取小组的公告总数	 * @param Int $team_id	 */	public function get_notice_count($team_id)	{		$sql = 'SELECT COUNT(id) AS total FROM ' . DB_PREFIX . 'team_announcement 		WHERE team_id = ' . $team_id;		$result = $this->db->query_first($sql);		return $result;	}		/**	 * 获取具体的小组公告信息	 * @param Int $id	 */	public function get_one_notice($id)	{		$sql = 'SELECT a.*,t.team_name FROM ' . DB_PREFIX . 'team_announcement a, ' . DB_PREFIX . 'team t 		WHERE t.team_id = a.team_id AND a.id = ' . $id;		return $this->db->query_first($sql);	}		/**	 * 获取小组与用户的权限	 * @param Int $user_id	 * @param Array $team_info	 * @param String $permission 具体的权限	 */	public function get_permission($user_id, $team_info, $permission = '')	{		$team_permission = array();		foreach ($this->settings['team_permission'] as $k => $v)		{			$team_permission[$k] = $v['permission'] & $team_info['permission'] ? true : false;		}		//判断用户类型		$user_type = $this->check_user_type($user_id, $team_info['team_id']);		$result = array();		if ($permission)		{			if ($user_type['level'] == 0)			{				$result['level'] = $user_type['level'];				$result['permission'] = true;				return $result;			}			else			{				$p = $user_type['permission'][$permission] & $team_permission[$permission] ? true : false;				$result['level'] = $user_type['level'];				$result['permission'] = $p;				return $result;			}		}		foreach ($team_permission as $k=>$v)		{			if ($user_type['level'] == 0)			{				$result['permission'][$k] = true;				$result['level'] = $user_type['level'];			}			else			{				$result['permission'][$k] = $user_type['permission'][$k] & $v ? true : false;				$result['level'] = $user_type['level'];			}		}		return $result;	}		/**	 * 判断用户类型	 * @param Int $user_id	 * @param Int $team_id	 */	public function check_user_type($user_id, $team_id)	{		//是否为小组管理员		$sql = 'SELECT COUNT(team_id) AS total FROM ' . DB_PREFIX . 'team 		WHERE creater_id = ' . $user_id . ' AND team_id = ' . $team_id . ' AND state = 1';		$result = $this->db->query_first($sql);		if ($result['total'] > 0)		{			return array('level' => 0);		}		//是否为黑名单用户		$result = $this->check_join_black_list($team_id, $user_id);		if ($result > 0)		{			return $this->settings['user_permission']['black_user'];		}		else		{			//是否为活动召集者			$sql = 'SELECT COUNT(a_id) AS total FROM ' . DB_PREFIX . 'apply_action 			WHERE user_id = ' . $user_id . ' AND team_id = ' . $team_id . ' AND state = 1 AND status = 1';			$result = $this->db->query_first($sql);						if ($result['total'] > 0)			{				return $this->settings['user_permission']['activity_creater'];			}						//是否为关注用户			$data = array(				'user_id' => $user_id,				'source' => 'team',				'source_id' => $team_id,				'action' => 'attention'			);			$option = new option();			$result = $option->get_relation($data);			if ($result['state'] == 1)			{				return $this->settings['user_permission']['attention_user'];			}			else			{				//非关注用户				return $this->settings['user_permission']['no_attention_user'];			}		}	}		/**	 * 获取申请小组的信息	 * @param Int $offset	 * @param Int $count	 * @param Int $type	 */	public function show_team_apply($offset, $count, $type = '')	{		$data_limit = ' LIMIT ' . $offset . ' , ' . $count;		$sql = 'SELECT ta.*,tt.type_name FROM ' . DB_PREFIX . 'team_apply ta 		LEFT JOIN ' . DB_PREFIX . 'team_type tt ON tt.type_id = ta.type 		WHERE ta.status = 1 AND ta.team_id = 0';		if ($type) $sql .= ' AND ta.type = ' . intval($type) . ' ORDER BY ta.id DESC';		$sql .= $data_limit;		$query = $this->db->query($sql);		$info = array();		while ($row = $this->db->fetch_array($query))		{			$info[] = $row;		}		return $info;	}		/**	 * 获取单个申请小组信息	 * @param Int $id	 */	public function apply_detail($id)	{		$sql = 'SELECT * FROM ' . DB_PREFIX . 'team_apply WHERE id = ' . $id . ' AND status = 1';		return $this->db->query_first($sql);	}		/**	 * 获取申请小组的总数	 * @param Int $type	 */	public function team_apply_count($type = '')	{		$sql = 'SELECT COUNT(*) AS total FROM ' . DB_PREFIX . 'team_apply WHERE status = 1 AND team_id = 0';		if ($type) $sql .= ' AND type = ' . intval($type);		$result = $this->db->query_first($sql);		return $result;	}		/**	 * 创建小组操作	 * @param Array $data	 */	public function create($data)	{		$fields = array();		foreach($data as $k=>$v)		{			if ($k == 'permission')			{				$fields[] = $k . "=b'" . decbin($v) . "'";			}			else			{				if (is_string($v))				{					$fields[] = $k . "='" . $v . "'";				}				elseif (is_int($v))				{					$fields[] = $k . '=' . $v;				}			}		}		$sql = 'INSERT INTO ' . DB_PREFIX . 'team SET ' . implode(',', $fields);		$this->db->query($sql);		$data['team_id'] = $this->db->insert_id();		return $data;	}		/**	 * 申请小组操作	 * @param Array $data	 */	public function create_team_apply($data)	{		$fields = array();		foreach($data as $k=>$v)		{			if (is_string($v))			{				$fields[] = $k . "='" . $v . "'";			}			elseif (is_int($v))			{				$fields[] = $k . '=' . $v;			}		}		$sql = 'INSERT INTO ' . DB_PREFIX . 'team_apply SET ' . implode(',', $fields);		return $this->db->query($sql);	}		/**	 * 更新申请小组信息	 * @param Array $data	 * @param Int|String $id	 * @param Int|String $team_id	 */	public function update_team_apply($data, $id, $team_id = '')	{		$fields = array();		foreach($data as $k=>$v)		{			if (is_string($v))			{				$fields[] = $k . "='" . $v . "'";			}			elseif (is_int($v))			{				$fields[] = $k . '=' . $v;			}		}		$sql = 'UPDATE ' . DB_PREFIX . 'team_apply SET ' . implode(',', $fields) . ' WHERE 1';		if ($id)		{			if (is_int($id))			{				$sql .= ' AND id = ' . $id;			}			elseif (is_string($id))			{				$sql .= ' AND id in (' . $id . ')';			}		}		if ($team_id)		{			if (is_int($team_id))			{				$sql .= ' AND team_id = ' . $team_id;			}			elseif (is_string($team_id))			{				$sql .= ' AND team_id in (' . $team_id . ')';			}		}		return $this->db->query($sql);	}		/**	 * 更新小组类型统计	 * @param Int $type_id	 * @param Int $num	 */	public function update_team_type($type_id, $num = 1)	{		$num = intval($num) > 0 ? ' + ' . $num : ' - ' . abs($num);		$sql = 'UPDATE ' . DB_PREFIX . 'team_type SET team_num = team_num' . $num . ' 		WHERE type_id = ' . $type_id;		return $this->db->query($sql);	}		/**	 * 更新小组分类统计	 * @param Int $category_id	 * @param Int $num	 */	public function update_team_category($category_id, $num = 1)	{		$num = intval($num) > 0 ? ' + ' . $num : ' - ' . abs($num);		$sql = 'UPDATE ' . DB_PREFIX . 'team_category SET team_num = team_num' . $num . ' 		WHERE c_id = ' . $category_id;		return $this->db->query($sql);	}		/**	 * 小组加入黑名单操作	 * @param Array $data	 */	public function join_black_list($data)	{			//检测是否已加入黑名单		$num = $this->check_join_black_list($data['team_id'], $data['user_id']);		if (intval($num) > 0) return true;				$fields = array();		foreach($data as $k=>$v)		{			if (is_string($v))			{				$fields[] = $k . '="' . $v . '"';			}			elseif (is_int($v))			{				$fields[] = $k . '=' . $v;			}		}		$sql = 'INSERT INTO ' . DB_PREFIX . 'team_blacklist SET ' . implode(',', $fields);		$this->db->query($sql);		$info = array(			'team_id' => $data['team_id'],			'black_id' => $this->db->insert_id(),			'user_id' => $data['user_id'],		);		if($info['black_id'])		{			return $info;		}		else		{			return false;		}		 	}		/**	 * 小组取消黑民单操作	 * @param Array $data	 */	public function quit_black_list($data)	{		//检测是否已加入黑名单		$num = $this->check_join_black_list($data['team_id'], $data['user_id']);		if ($num == 0) return true;				$sql = 'DELETE FROM ' . DB_PREFIX . 'team_blacklist 		WHERE team_id = ' . $data['team_id'] . ' AND user_id = ' . $data['user_id'];				return $this->db->query($sql);	}		/**	 * 更新黑名单数据	 * @param Array $data	 * @param Int|String $black_id	 * @param Int|String $team_id	 */	public function update_blacklist($data, $black_id, $team_id = '')	{		$fields = array();		foreach($data as $k=>$v)		{			if (is_string($v))			{				$fields[] = $k . "='" . $v . "'";			}			elseif (is_int($v))			{				$fields[] = $k . '=' . $v;			}		}		$sql = 'UPDATE ' . DB_PREFIX . 'team_blacklist SET ' . implode(',', $fields) . ' WHERE 1';		if ($black_id)		{			if (is_int($black_id))			{				$sql .= ' AND black_id = ' . $black_id;			}			elseif (is_string($a_id))			{				$sql .= ' AND black_id in (' . $black_id . ')';			}		}		if ($team_id)		{			if (is_int($team_id))			{				$sql .= ' AND team_id = ' . $team_id;			}			elseif (is_string($team_id))			{				$sql .= ' AND team_id in (' . $team_id . ')';			}		}		return $this->db->query($sql);	}		/**	 * 更新小组信息	 * @param Array $data	 * @param Int|String $team_id	 */	public function update($data, $team_id, $flag = false)	{		$fields = array();		foreach($data as $k=>$v)		{			if ($flag)			{				$v = $v > 0 ? '+' . $v : $v;				$fields[] = $k . '=' . $k . $v;			}			else			{				if ($k == 'permission')				{					$fields[] = $k . "=b'" . decbin($v) . "'";				}				else				{					if (is_string($v))					{						$fields[] = $k . "='" . $v . "'";					}					elseif (is_int($v))					{						$fields[] = $k . '=' . $v;					}				}			}		}		$sql = 'UPDATE ' . DB_PREFIX . 'team SET ' . implode(',', $fields) . ' WHERE 1';		if (is_int($team_id))		{			$sql .= ' AND team_id = ' . $team_id;		}		elseif (is_string($team_id))		{			$sql .= ' AND team_id in (' . $team_id . ')';		}		return $this->db->query($sql);	}		/**	 * 申请成为活动召集者	 * @param Array $data	 */	public function add_apply($data)	{		$fields = array();		foreach($data as $k=>$v)		{			if (is_string($v))			{				$fields[] = $k . '="' . $v . '"';			}			elseif (is_int($v))			{				$fields[] = $k . '=' . $v;			}		}		$sql = 'INSERT INTO ' . DB_PREFIX . 'apply_action SET ' . implode(',', $fields);		return $this->db->query($sql);	}		/**	 * 更新活动召集者数据	 * @param Array $data	 * @param Int|String $a_id	 * @param Int|String $team_id	 */	public function update_apply($data, $a_id, $team_id = '')	{		$fields = array();		foreach($data as $k=>$v)		{			if (is_string($v))			{				$fields[] = $k . "='" . $v . "'";			}			elseif (is_int($v))			{				$fields[] = $k . '=' . $v;			}		}		$sql = 'UPDATE ' . DB_PREFIX . 'apply_action SET ' . implode(',', $fields) . ' WHERE 1';		if ($a_id)		{			if (is_int($a_id))			{				$sql .= ' AND a_id = ' . $a_id;			}			elseif (is_string($a_id))			{				$sql .= ' AND a_id in (' . $a_id . ')';			}		}		if ($team_id)		{			if (is_int($team_id))			{				$sql .= ' AND team_id = ' . $team_id;			}			elseif (is_string($team_id))			{				$sql .= ' AND team_id in (' . $team_id . ')';			}		}		return $this->db->query($sql);	}		/**	 * 发布小组公告	 * @param Array $data	 */	public function add_notice($data)	{		$fields = array();		foreach($data as $k=>$v)		{			if (is_string($v))			{				$fields[] = $k . '="' . $v . '"';			}			elseif (is_int($v))			{				$fields[] = $k . '=' . $v;			}		}		$sql = 'INSERT INTO ' . DB_PREFIX . 'team_announcement SET ' . implode(',', $fields);		return $this->db->query($sql);	}		/**	 * 更新小组公告	 * @param Array $data	 * @param Int|String $id	 */	public function save_notice($data, $id)	{		$fields = array();		foreach($data as $k=>$v)		{			if (is_string($v))			{				$fields[] = $k . "='" . $v . "'";			}			elseif (is_int($v))			{				$fields[] = $k . '=' . $v;			}		}		$sql = 'UPDATE ' . DB_PREFIX . 'team_announcement SET ' . implode(',', $fields) . ' WHERE 1';		if (is_int($id))		{			$sql .= ' AND id = ' . $id;		}		elseif (is_string($id))		{			$sql .= ' AND id in (' . $id . ')';		}		return $this->db->query($sql);	}		/**	 * 删除小组公告	 * @param Int $id	 */	public function del_notice($id)	{		$sql = 'DELETE FROM ' . DB_PREFIX . 'team_announcement WHERE id = ' . $id;		return $this->db->query($sql);	}		/**	 * 获取查询条件	 * @param Array $data	 */	public function get_condition($data = array())	{		$condition = '';				//查询的关键字		if($data['key'])		{			$condition .= " AND t.team_name LIKE '%" . $data['key'] . "%' ";		}					//查询的起始时间		if($data['start_time'])		{			$condition .= " AND t.pub_time >= " . $data['start_time'];		}				//查询的结束时间		if($data['end_time'])		{			$condition .= " AND t.pub_time <= " . $data['end_time'];			}        //查询发布的时间        if(is_numeric($data['date_search']))		{			$today = strtotime(date('Y-m-d'));			$tomorrow = strtotime(date('Y-m-d',TIMENOW+24*3600));			switch($data['date_search'])			{				case 1://所有时间段					break;				case 2://昨天的数据					$yesterday = strtotime(date('y-m-d',TIMENOW-24*3600));					$condition .= " AND  t.pub_time > '".$yesterday."' AND t.pub_time < '".$today."'";					break;				case 3://今天的数据					$condition .= " AND  t.pub_time > '".$today."' AND t.pub_time < '".$tomorrow."'";					break;				case 4://最近3天					$last_threeday = strtotime(date('y-m-d',TIMENOW-2*24*3600));					$condition .= " AND  t.pub_time > '".$last_threeday."' AND t.pub_time < '".$tomorrow."'";					break;				case 5://最近7天					$last_sevenday = strtotime(date('y-m-d',TIMENOW-6*24*3600));					$condition .= " AND  t.pub_time > '".$last_sevenday."' AND t.pub_time < '".$tomorrow."'";					break;				default://所有时间段					break;			}		}				//查询小组的状态		if (is_numeric($data['state']))		{			switch ($data['state'])			{				case 1://所有状态					$condition .= " AND t.state != -1";				break;				case 2: //待审核					$condition .= " AND t.state = 0";				break;				case 3: //已审核					$condition .= " AND t.state = 1";				break;				case 4: //已关闭					$condition .= " AND t.state = 2";				break;				case 5: //已审核和关闭的					$condition .= " AND t.state != -1 AND t.state != 0";				break;				case 6: //已删除					$condition .= " AND t.state = -1";				break;				case 7: //已审核和待审核					$condition .= " AND t.state != 2 AND t.state != -1";				break;				default:					$condition .= " AND t.state != -1";				break;			}		}				//查询小组的类型		if(is_numeric($data['team_type']))		{			if($data['team_type'] == -1)			{				$condition .= " ";			}			else			{				$condition .= " AND t.team_type = " . $data['team_type'];			}		}				//查询小组的分类		if(is_numeric($data['team_category']))		{			if($data['team_category'] == -1)			{				$condition .= " ";			}			else			{				$condition .= " AND t.team_category = " . $data['team_category'];			}		}				$team_type_hgupdn = array(			1 => 'update_time',			2 => 'topic_num',			3 => 'action_num',			4 => 'attention_num',		);				$data['hgupdn'] = strtoupper($data['hgupdn']);				if ($data['hgupdn'] != 'ASC')		{			$data['hgupdn'] = 'DESC';		}		if (!in_array($data['hgorder'], $team_type_hgupdn))		{			$data['hgorder'] = 'pub_time';		}		if(is_numeric($data['_type']))		{			$data['hgorder'] = $team_type_hgupdn[$data['_type']];		}		if($data['hgorder'] == 'attention_num')		{			$orderby = ' ORDER BY t.action_num ' . $data['hgupdn'] . ',t.attention_num ' . $data['hgupdn'] ;		}		else		{			$orderby = ' ORDER BY t.' . $data['hgorder']  . ' ' . $data['hgupdn'] ;		}				//查询排序方式(升序或降序,默认为降序)		$condition .= $orderby;		return $condition;	}		/**	 * 删除申请行动召集	 * @param String $ids	 */	public function del_apply($ids)	{		$sql = 'DELETE FROM ' . DB_PREFIX . 'apply_action WHERE team_id in (' . $ids . ')';		return $this->db->query($sql);	}		/**	 * 删除黑名单	 * @param String $ids	 */	public function del_blacklist($ids)	{		$sql = 'DELETE FROM ' . DB_PREFIX . 'team_blacklist WHERE team_id in (' . $ids . ')';		return $this->db->query($sql);	}		/**	 * 删除申请小组数据	 * @param String $ids	 */	public function del_team_apply($ids)	{		$sql = 'DELETE FROM ' . DB_PREFIX . 'team_apply WHERE team_id in (' . $ids . ')';		return $this->db->query($sql);	}		/**	 * 删除小组数据	 * @param String $ids	 */	public function del_team($ids)	{		$sql = 'DELETE FROM ' . DB_PREFIX . 'team WHERE team_id in (' . $ids . ')';		return $this->db->query($sql);	}				//------------------------------------------------------------------------------------------	/**	 * 发布系统，将内容传入发布队列	 */	public function publish_insert_query($id, $op, $column_id = array(), $child_queue = 0)	{		$id = intval($id);		if(empty($id))		{			return false;		}		if(empty($op))		{			return false;		}		$sql = "select * from " . DB_PREFIX ."team where team_id = " . $id;		$info = $this->db->query_first($sql);		if(empty($column_id))		{					$info['column_id'] = unserialize($info['column_id']);			if(is_array($info['column_id']))			{				$column_id = array_keys($info['column_id']);				$column_id = implode(',', $column_id);			}					}		else 		{			$column_id = implode(',', $column_id);		} 		require_once ROOT_PATH . 'lib/class/publishplan.class.php';		$plan = new publishplan();		$data = array(			'set_id' 	=>	GROUP_PLAN_SET_ID,			'from_id'   =>  $info['team_id'],			'class_id'	=> 	0,			'column_id' => $column_id,			'title'     =>  $info['team_name'],			'action_type' => $op,			'publish_time'  => $info['pub_time'],			'publish_people' => urldecode($this->user['user_name']),			'ip'   =>  hg_getip(),		);		if($child_queue)		{			$data['set_id'] = GROUP_PLAN_SET_ID;		}		$ret = $plan->insert_queue($data);		return $ret;	}		//using	public function publish()	{		$id = intval($this->input['id']);		$column_id = urldecode($this->input['column_id']);		$new_column_id = explode(',',$column_id);		$column_id = $this->publish_column->get_columnname_by_ids('id,name',$column_id);		$column_id = serialize($column_id);			//查询修改文章之前已经发布到的栏目		$sql = "select * from " . DB_PREFIX ."team where team_id = " . $id;		$q = $this->db->query_first($sql);		$q['column_id'] = unserialize($q['column_id']);		$ori_column_id = array();		if(is_array($q['column_id']))		{			$ori_column_id = array_keys($q['column_id']);		}				$sql = "update " . DB_PREFIX ."team set column_id = '". $column_id ."' where team_id = " . $id;		$this->db->query($sql);				if(intval($q['state']) == 1)		{			if(!empty($q['expand_id']))   //已经发布过，对比修改先后栏目			{				$del_column = array_diff($ori_column_id, $new_column_id);				if(!empty($del_column))				{					$this->publish_insert_query($id, 'delete', $del_column);				}				$add_column = array_diff($new_column_id, $ori_column_id);				if(!empty($add_column))				{					$this->publish_insert_query($id, 'insert', $add_column);				}				$same_column = array_intersect($ori_column_id, $new_column_id);				if(!empty($same_column))				{					$this->publish_insert_query($id, 'update', $same_column);				}			}			else 							//未发布，直接插入			{				$op = "insert";				$this->publish_insert_query($id, $op);			}		}		else    //打回		{			if(!empty($q['expand_id']))			{				$op = "delete";				$this->publish_insert_query($id, $op);			}		}		return true;	}}?>