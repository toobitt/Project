<?php/**************************************************************************** LivSNS 0.1* (C)2004-2010 HOGE Software.* $Id: payments.php 17960 2013-03-21 14:28:00 jeffrey $***************************************************************************/require './global.php';require_once CUR_CONF_PATH . 'lib/pay.class.php';define('MOD_UNIQUEID', 'payments'); //模块标识class paymentsApi extends outerReadBase{	private $pay;	public function __construct()	{		parent::__construct();		$this->pay = new payClass();	}	public function __destruct()	{		parent::__destruct();	}			public function show()	{	}		public function count()	{	}		public function detail()	{			}			//根据payid 指定支付类型	public function payments()	{		$payid = $this->input['payid'];                           //支付设置的id		$paycode = $this->input['paycode'];                       //签约类型的code		$trade_no = $this->input['trade_no'];                     //商户订单号		$total_fee = $this->input['total_fee'];                   //订单金额		$subject = $this->input['subject'];                       //商品名称		$uid = $this->input['uid'];                               //用户id				if(!$payid || !$paycode || !$trade_no || !$total_fee || !$subject){			$this->errorOutput("参数缺损！！");		}		else		{			//优先读取缓存文件			if(file_exists("cache/".$payid."_config_cache.php"))			{				$paycode_temp = $paycode;				include_once ("cache/".$payid."_config_cache.php");				//判断该支付类型是否存在				if($is_on=="1")				{					if(!strstr($paycode,$paycode_temp))					{						$this->errorOutput("该签约类型没有启用!");						}					else					{						$WIDpartner		= $sellerid;			            //合作身份者ID，以2088开头的16位纯数字						$WIDkey   			= $sellerkey;			        //安全检验码，以数字和字母组成的32位字符						$WIDseller_email	= $sellernumber;		        //签约支付宝账号或卖家支付宝帐户						$WIDout_trade_no = $trade_no;                       //订单号						$WIDsubject = $subject;                             //订单名称						$WIDtotal_fee = $total_fee;                         //订单金额						$WIDuid = $uid;                                     //用户标识 UID						$WIDnotify_url = $notify_url;						$WIDcallback_url = $call_back_url;						$WIDmerchant_url = $merchant_url;						include_once 'payments/'.$paycode_temp.'/'.$paycode_temp.'.php';						$this->addItem($ruselt_url);						$this->output();					}				}				else 				{					$this->errorOutput("该支付配置没有启用!");					}			}			else			{				//缓存文件不存在，则读取数据库				$result = array();				$result = $this->pay->detail($payid);				if(is_array($result) &&!empty($result) && count($result)>0)				{					//判断该支付类型是否启用					if(!strstr($result['paycode'],$paycode))					{						$this->errorOutput("该签约类型没有启用!");						}					else {						$WIDpartner		= $result['sellerid'];			    //合作身份者ID，以2088开头的16位纯数字						$WIDkey   			= $result['sellerkey'];			//安全检验码，以数字和字母组成的32位字符						$WIDseller_email	= $result['sellernumber'];		//签约支付宝账号或卖家支付宝帐户						$WIDout_trade_no = $trade_no;                       //订单号						$WIDsubject = $subject;                             //订单名称						$WIDtotal_fee = $total_fee;                         //订单金额						$WIDuid = $uid;                                     //用户标识 UID						$WIDnotify_url = $result['notify_url'];						$WIDcallback_url = $result['call_back_url'];						$WIDmerchant_url = $result['merchant_url'];						include_once 'payments/'.$paycode.'/'.$paycode.'.php';						unset($result);						$this->addItem($ruselt_url);						$this->output();					}				}				else				{					$this->errorOutput("该支付配置不存在或没启用!");				}			}								}	}			//某次交易的详细数据	public function detail_data()	{		$trade_no = trim($this->input['trade_no']);		if(!$trade_no){			$this->errorOutput(OBJECT_NULL);		}		$info = array();		$info = $this->pay->detail_data($trade_no);		$this->addItem($info);		$this->output();	}		public function none()	{		$this->errorOutput("方法调用错误");	}	}$out = new paymentsApi();$action = $_INPUT['a'];if (!method_exists($out, $action)){	$action = 'none';}$out->$action();?>