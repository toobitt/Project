<?phprequire('./global.php');define('MOD_UNIQUEID', 'wbuser');class wbUserUpdate extends adminUpdateBase{	public function __construct()	{		parent::__construct();		include_once(ROOT_PATH . 'lib/class/share.class.php');		$this->share = new share();	}		public function __destruct()	{		parent::__destruct();	}		public function create()	{		if(empty($this->input['name']))		{			$this->errorOutput('用户昵称不能为空');		}		if(empty($this->input['group_id']))		{			$this->errorOutput('微博类型不能为空');					}				$circle_id = implode(',',$this->input['circle_id']);		$circle = $this->getCircleByid($circle_id);		if($circle)		{			$circle = serialize($circle);		}		$name = $this->input['name'];		$group_id = intval($this->input['group_id']);		$name = str_replace(array('，',',',' '),array(',',',',','),$name);		$name = explode(',',$name);		$nameValue = array_values($name);		array_walk($nameValue,array($this,'escape_string'));		$valuestring = implode(",",$nameValue);		$sql = "SELECT name FROM ".DB_PREFIX."user WHERE name IN(".$valuestring.") AND group_id = " . $group_id;			$q = $this->db->query($sql);		$exists_name = array();		while($row = $this->db->fetch_array($q))		{			$exists_name[] = $row['name'];		}			$name = array_diff($name,$exists_name);				$type = $this->share->get_plat_type();		$type = $type[0];		$group_name = $type[$group_id];				$sql = "SELECT * FROM " . DB_PREFIX ."plat_token WHERE appid = " . intval($this->user['appid']) ." AND type = " . $group_id ." ORDER BY lastusetime ASC ";		$plat_token = $this->db->query_first($sql);						//验证用户		foreach ($name as $k => $v)		{			$user_info = $this->share->get_user('',$v,$plat_token['plat_token']);			$user_info = $user_info[0];			if($user_info['error'])			{				$this->errorOutput($v . '--' . $user_info['error']);			}			$userData[$v] = $user_info;		}		foreach ($name as $k => $v)		{			$avatar = array();			if($userData[$v])			{				$uid = $userData[$v]['uid'];				$avatar = array('host'=>$userData[$v]['avatar'],'dir' => '','filepath' =>'','filename' => '');				$userData[$v]['avatar'] = $avatar;				}					$sql = "INSERT INTO " . DB_PREFIX . "user(uid, name,group_id,group_name,circle_id,create_time,update_time,user_id,user_name,avatar,user_info) VALUES					('{$uid}','{$v}', ".$group_id.", '".$group_name."', '".$circle."', ".TIMENOW.", ". TIMENOW.", ".intval($this->user['user_id']).", '".urldecode($this->user['user_name'])."', '".serialize($avatar)."', '".serialize($userData[$v])."')";			$this->db->query($sql);			$insert_id = $this->db->insert_id();			$this->update_weibo_circle('', $circle_id, $insert_id);					}		$this->addLogs('添加用户','','','添加用户+' . implode(',',$name));				$this->addItem('success');		$this->output();		}			public function update()	{		if(empty($this->input['id']))		{			$this->errorOutput('ID不能为空');			}		if(empty($this->input['name']))		{			$this->errorOutput('用户昵称不能为空');		}		if(empty($this->input['group_id']))		{			$this->errorOutput('微博类型不能为空');					}				//验证用户是否存在		$sql = "SELECT * FROM " . DB_PREFIX ."plat_token where appid = " . intval($this->user['appid']) ."  and type = " . intval($this->input['group_id']) . " ORDER BY lastusetime ASC ";		$plat_token = $this->db->query_first($sql);		$user_info = $this->share->get_user('',$this->input['name'],$plat_token['plat_token']);		$user_info = $user_info[0];		if($user_info['error'])		{			$this->errorOutput($this->input['name'] . '--' . $user_info['error']);		}				$sql = "SELECT * FROM " . DB_PREFIX ."user WHERE id = ".intval($this->input['id']);		$ret = $this->db->query_first($sql);		$old_circleid_id = $ret['circle_id'];		$old_circleid_id = unserialize($ret['circle_id']);		$old_circleid = '';		if($old_circleid_id)		{			$old_circleid = array_keys($old_circleid_id);			$old_circleid = implode(',',$old_circleid);		}		$circle_id = implode(',',$this->input['circle_id']);			$circle = $this->getCircleByid($circle_id);		if($circle)		{			$circle = serialize($circle);		}			$info = array(	       //'name' => $this->input['name'],    //不给改，改了回有问题			'group_id'  => intval($this->input['group_id']),			'circle_id'  => $circle,		);		if($user_info)		{			$info['avatar'] = array('host'=>$user_info['avatar'],'dir' => '','filepath' =>'','filename' => '');			$user_info['avatar'] = $info['avatar'];			$info['avatar'] = serialize($info['avatar']);			$info['user_info'] = serialize($user_info);			$info['uid'] = $user_info['uid'];		}		$type = $this->share->get_plat_type();		$type = $type[0];		$info['group_name'] = $type[$info['group_id']];							$sql = "UPDATE " . DB_PREFIX . "user SET ";		$space = '';		foreach($info as $k => $v)		{			$sql .= $space . $k . "='" . $v ."'";			$space = ',';		}		$sql .=  " WHERE id=" . intval($this->input['id']);		$this->db->query($sql);				if($this->db->affected_rows() > 0)		{			$update_info = array(				'update_time'  => TIMENOW,			);			$sql = "UPDATE " . DB_PREFIX . "user SET ";			$space = '';			foreach($info as $k => $v)			{				$sql .= $space . $k . "='" . $v ."'";				$space = ',';			}			$sql .=  " WHERE id=" . intval($this->input['id']);			$this->db->query($sql);						}		//判断用户圈子是否发生改变，更改微博分发表，用户-圈子关系部		$this->update_weibo_circle($old_circleid,$circle_id,intval($this->input['id']));			$info['id'] = intval($this->input['id']);		$this->addLogs('修改用户','',$info, $info['name']);			$this->addItem($info);		$this->output();	}			public function delete()	{		if(empty($this->input['id']))		{			$this->errorOutput("ID不能为空");		}		$ids = urldecode($this->input['id']);				$sql = "DELETE FROM " . DB_PREFIX . "user WHERE id IN(". $ids .")";		$this->db->query($sql);		$sql = "DELETE FROM " . DB_PREFIX ."weibo WHERE uid IN(" . $ids .")";		$this->db->query($sql);		$sql = "DELETE FROM " . DB_PREFIX ."weibo_circle WHERE uid IN(" . $ids .")";		$this->db->query($sql);		$sql = "DELETE FROM " . DB_PREFIX ."user_circle WHERE user_id IN(" . $ids .")";		$this->db->query($sql);		$this->addLogs('删除用户','','', '删除用户+' . $ids);	 				$this->addItem($ids);		$this->output();	}			public function audit()	{		if(empty($this->input['id']))		{			$this->errorOutput('ID不能为空'); 		}		$id = urldecode($this->input['id']);		$audit = intval($this->input['audit']);		$arr_id = explode(',',$id);		if($audit == 1)		{			$sql = "UPDATE " . DB_PREFIX ."user SET status = 1 WHERE id IN(" . $id . ")";			$this->db->query($sql);			$opration = '审核';			$return = array('status' => 1,'id'=> $arr_id);					}		else if($audit == 0 )		{			$sql = "UPDATE " . DB_PREFIX ."user SET status = 2 WHERE id IN(" . $id . ")";			$this->db->query($sql);			$opration = '打回';			$return = array('status' => 2, 'id' => $arr_id);					}		$this->addLogs($opration, '', '', $opration .'+'. $id);			$this->addItem($return);		$this->output();	}		private function update_weibo_circle($old_circleid,$new_circleid,$uid)	{		$old_id = array();		$new_id = array();		if(!empty($old_circleid))		{			$old_id = explode(',',$old_circleid);		}		if(!empty($new_circleid))		{			$new_id = explode(',',$new_circleid);		}		$del_id = array_diff($old_id,$new_id);		$add_id = array_diff($new_id,$old_id);		if($del_id || $add_id)		{			$sql = "UPDATE " . DB_PREFIX ."weibo SET distribute_count = " . count($new_id) ." WHERE uid = " . $uid;			$this->db->query($sql);					}		if(!empty($del_id))		{			$del_id = implode(',',$del_id);			$sql = "DELETE FROM " . DB_PREFIX ."user_circle WHERE user_id = " . $uid ." AND circle_id IN(" . $del_id . ")";			$this->db->query($sql);			$sql = "DELETE FROM " . DB_PREFIX ."weibo_circle WHERE uid =" . $uid ." AND circle_id IN(". $del_id .")";			$this->db->query($sql);		}		if(!empty($add_id))		{			$sql = "INSERT INTO " . DB_PREFIX ."user_circle (user_id, circle_id) VALUES ";			$space = '';			foreach ($add_id as $k => $v)			{				$sql .= $space ."(" . $uid .", " . $v . ")";				$space = ',';			}			$this->db->query($sql);			//查询weibo表 写入微博分发表			$sql = "SELECT * FROM " . DB_PREFIX ."weibo WHERE uid= " . $uid;			$ret = $this->db->fetch_all($sql);			if(!empty($ret))			{				$sql = "INSERT INTO " . DB_PREFIX ."weibo_circle (uid,circle_id,weibo_id,create_time) VALUES ";				$space = '';								foreach($add_id as $k => $v)				{					foreach($ret as $kk=>$vv)					{						$sql .= $space . "(".$uid.", ".$v.",".$vv['id'].", ".$vv['create_time'].")";						$space = ',';					}				}				$this->db->query($sql);			}			return true;				}		return ;	}		/**	public function search_user()	{		if(empty($this->input['key']))		{			$this->errorOutput('关键字不能为空');		}		$key = urldecode($this->input['key']);		$sql = "SELECT * FROM " . DB_PREFIX ."group";		$ret = $this->db->fetch_all($sql);		if(!empty($ret))		{			$r = array();			foreach($ret as $k => $v)			{				require_once ('./' . $v['file_bundle'] . '.php');				$wb = new $v['file_bundle']();				$r[] = $wb->user_search($key,$v);						}		}		if(!empty($r))		{			foreach ($r as $k => $v)			{				if(!empty($v))				{					foreach($v as $kk=>$vv)					{						$this->addItem($vv);						}					}						}		}		$this->output();	}	*/		public function search_user()	{		if(empty($this->input['key']))		{			$this->errorOutput('关键字不能为空');		}		if(empty($this->input['type_id']))		{			$this->errorOutput(NOPLATID);		}		$key = urldecode($this->input['key']);		$sql = "SELECT * FROM " . DB_PREFIX ."plat_token WHERE appid = " . intval($this->user['appid']) ." AND type = " . intval($this->input['type_id']) . " ORDER BY lastusetime ASC ";		$ret = $this->db->query_first($sql);		$plat_token = $this->share->search_user($ret['appid'],$ret['platid'],$ret['plat_token'],$key);		if(!empty($plat_token))		{			if(!empty($plat_token['info']))			{				foreach ($plat_token['info'] as $kk => $vv)				{					$plat_token['info'][$kk]['platId'] = $plat_token['platId'];					$plat_token['info'][$kk]['plat_type_name'] = $plat_token['plat_type_name'];				}							}		}			if(!empty($plat_token['info']))		{			foreach ($plat_token['info'] as $kk => $vv)			{				$this->addItem($vv);				}		}		$this->output();	}				public function user_put_queue()	{		if(empty($this->input['id']))		{			$this->errorOutput('NOID');		}		$id = intval($this->input['id']);				$sql = "SELECT * FROM " . DB_PREFIX ."user WHERE id = " . $id;		$info = $this->db->query_first($sql);			if($info['status'] != 1)		{			$return = array('error' => 1, 'msg' => '账号未审核', 'id' => $id);		}		else		{			$info['last_time'] = '';			$sql = "INSERT INTO ".DB_PREFIX."queue_user SET ";			$space = "";			foreach ($info as $k => $v)			{				$sql .= $space . $k . "= '".$v ."'";				$space = ",";			}			$this->db->query($sql);					$return = array('msg' => '正在获取...', 'id' => $id);			}		$this->addItem($return);		$this->output();	}		public function getCircleByid($circle_id)	{		if(!$circle_id)		{			return false;		}		$sql = "SELECT id, name FROM " . DB_PREFIX ."circle WHERE id IN(". $circle_id .")";		$info = $this->db->query($sql);		$ret = array();		while($row = $this->db->fetch_array($info))		{			$ret[$row['id']] = $row['name'];		}		return $ret;	}			function escape_string(&$value,$key)	{		$q = "'";		$value = $q.$value.$q;		return $value;				}		public function sort(){}	public function publish(){}		public function unknow()	{		$this->errorOutput('方法不存在');	}}$out = new wbUserUpdate();if(!method_exists($out, $_INPUT['a'])){	$action = 'unknow';}else {	$action = $_INPUT['a'];}$out->$action(); ?>