<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>百度地图</title>
<meta name="viewport" content="user-scalable=no,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0"/>
<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
<style type="text/css">
    html{height:100%}
    body{height:100%;margin:0;padding:0;font-size:12px}
    .BMap_Marker img {width:100%}
</style>
<script type="text/javascript" src="./convertor.js"></script>
<script type="text/javascript">
function object2str(arr)
{
    if (typeof(arr) == 'string')
    {
        return arr;
    }
    var s = "Array(\n";
    for (var k in arr)
    {
        if (typeof(arr[k]) == 'object')
        {
            s = s + "\t" + k + ' => ' + object2str(arr[k]);
        }
        else
        {
            s = s + "\t" + k + ' => ' + arr[k] + "\n";
        }
    }
    s = s + ')';
    return s;
}

function print_r(arr)
{
    s = object2str(arr);
    alert(s);
}
var map;
var _GET = {};
var gIcon = {};
var gMarkPosition;
var selfCurPostionMarker;
function hg_load_para()
{
    var para = document.location.hash.substr(1);
    gHash = para;
    para = para.split('&');
    var t;
    for (var i = 0; i < para.length; i++)
    {
        try
        {
            t = para[i].split('=');
            if (!t[0])
            {
                continue;
            }
            if (!t[1])
            {
                t[1] = '';
            }
            else
            {
                t[1] = decodeURIComponent(t[1]);
            }
            if (t[0].substr(-2,2) == '[]')
            {
                t[0] = t[0].substr(0, t[0].length - 2);
                if (!_GET[t[0]])
                {
                    _GET[t[0]] = [];
                }
                _GET[t[0]].push(t[1]);
            }
            else
            {
                _GET[t[0]] = t[1];
            }
        }
        catch (e)
        {
        }
    }
    _GET['level'] = _GET['level'] ? _GET['level'] : 14;
    _GET['level'] = parseInt(_GET['level']);
    //print_r(_GET);
}

function hg_setmapsize(w, h)
{
    var mapdiv = document.getElementById('map');
    if (w)
    {
        mapdiv.style.width = w + 'px';
    }
    if (h)
    {
        mapdiv.style.height = h + 'px';
    }
}
var _selfPos = false;
function initialize() {
    hg_load_para();
    hg_setmapsize(_GET['width'], _GET['height']);
    var level = _GET['level'];
    if (_GET['lng'] && _GET['lat'])
    {
        map = new BMap.Map('map', {enableHighResolution:true,maxZoom:18});
        map.enableDoubleClickZoom();
        _selfPos = new BMap.Point(_GET['lng'], _GET['lat']);
        map.centerAndZoom(_selfPos, level);
        map.enableContinuousZoom();    //启用地图惯性拖拽，默认禁用
        map.addControl(new BMap.NavigationControl({anchor: BMAP_ANCHOR_TOP_RIGHT}));  //添加默认缩放平移控件
        addMarker(_selfPos, '', '', '', 1);
        //BMap.Convertor.translate(_selfPos,0,addMarker, '', '', '', 1);     //真实经纬度转成百度坐标
        //_GET['type'] = _GET['type'] ? _GET['type'] : 'traffic';
        //hg_sh_traffic();
    }
    hg_load_sort();
}
var gClick = true;
function hg_opendetail(id)
{
    if (!gClick)
    {
        //return;
    }
    gHash = 'func=showDetail&id=' + id;
    document.location.href = '?' + gHash;
}

function hg_cancel_touch()
{
    gClick = false;
}

function hg_highline(obj, re)
{
    if (!re)
    {
        obj.style.background = '#fff';
    }
    else
    {
        obj.style.background = '#eee';
    }
}
var gMarkers = [];
var addMarker = function(point, itemdata, index, length, self)
{
    try
    {
        if (gIcon[itemdata.group_id])
        {
            var size = new BMap.Size(26,37);
            var myIcon = new BMap.Icon(gIcon[itemdata.group_id], size);
            var marker = new BMap.Marker(point,{icon:myIcon});          // 创建标注
        }
        else
        {
            var marker = new BMap.Marker(point);          // 创建标注
            if (_GET['markicon'])
            {
                var size = new BMap.Size(26,37);
                var myIcon = new BMap.Icon(_GET['markicon'], size);
            }
            else
            {
                var size = new BMap.Size(15,15);
                var myIcon = new BMap.Icon('point.png', size);
            }
            var marker = new BMap.Marker(point,{icon:myIcon});
        }
    }
    catch (e)
    {
        var marker = new BMap.Marker(point);          // 创建标注
    }
    try
    {
        if (itemdata.pic.filename)
        {
            var pic = itemdata.pic.host + itemdata.pic.dir + '200x200/' + itemdata.pic.filepath + itemdata.pic.filename;
            var imghtml = '<img src="' + pic + '" width="100" height="100" align="left" style="margin-right:5px;" />';
        }
        else
        {
            var imghtml = '';
        }
    }
    catch (e)
    {
        var imghtml = '';
    }
    try
    {
        var content = itemdata.content;
        var id = itemdata.id;
        var address = itemdata.address;
        var time = date('H:i', itemdata.create_time);
    }
    catch (e)
    {
        var content = '';
        var id = 0;
        var time = '';
        var address = '';
    }
    if (self)
    {
        if (selfCurPostionMarker)
        {
            map.removeOverlay(selfCurPostionMarker);
        }
        var circle = new BMap.Circle(point,500);
        circle.setStrokeWeight(1);
        circle.setStrokeColor('#fff');
        //marker.setAnimation(BMAP_ANIMATION_BOUNCE);//BMAP_ANIMATION_BOUNCE
        //map.centerAndZoom(point, 15);
        if (self == 2)
        {
            map.panTo(point);
            map.setCenter(point);
        }
        map.addOverlay(marker);
        map.addOverlay(circle);
        //marker.dispose(); // 1.1 版本不需要这样调用
        selfCurPostionMarker = marker;
        gMarkers.push(marker);
        return;
    }

    var html = '<div style="line-height:1.5;font-size:14px;" ontouchstart="hg_highline(this, 1);" ontouchend="hg_highline(this, 0);" ontouch="hg_opendetail(' + id + ');" ontouchmove="hg_cancel_touch();" onclick="hg_opendetail(' + id + ');">' + imghtml + '<div style="padding:0 8px;"><span style="font-size:12px;color:#999">' + time + '</span>&nbsp;&nbsp;' + content + '<div style="font-size:10px;color:#999">' + address + '</div></div>';
    var infoWindow = new BMap.InfoWindow(html, {maxWidth:320});//,{enableAutoPan:false}
    infoWindow.addEventListener("click", function(e){});
    marker.addEventListener("click", function(){this.openInfoWindow(infoWindow);});
    gMarkers.push(marker);
    setTimeout(function(){
        map.addOverlay(marker);
        marker.setAnimation(BMAP_ANIMATION_DROP);//BMAP_ANIMATION_BOUNCE
        map.centerAndZoom(point, _GET['level']);
        if (!_selfPos)
        {
            if (index == 0)
            {
                //alert(map.highResolutionEnabled());
                gMarkPosition = point;
                setTimeout(function(){
                    marker.openInfoWindow(infoWindow);
                }, 400);
            }
        }
    }, ((length - index) % 10) * 200);
}

function loadScript() {
    var script = document.createElement("script");
    script.src = "http://api.map.baidu.com/api?v=1.4&callback=initialize";
    document.body.appendChild(script);
}

function callback(xyResults)
{
    var point;
    for(var index in xyResults)
    {
        xyResult = xyResults[index];
        if(xyResult.error != 0){continue;}//出错就直接返回;
        var point = new BMap.Point(xyResult.x, xyResult.y);
        addMarker(point);
        map.setCenter(point);
    }
    hg_sh_traffic();
}

function hg_showpoints(data)
{
    data = eval(data);
    if (!map)
    {
        map = new BMap.Map('map', {enableHighResolution:true,maxZoom:18});
        map.enableDoubleClickZoom();
        map.enableContinuousZoom();    //启用地图惯性拖拽，默认禁用
        map.addControl(new BMap.NavigationControl({anchor: BMAP_ANCHOR_TOP_RIGHT}));  //添加默认缩放平移控件
        hg_sh_traffic();
    }
    else
    {
        //console.log(gMarkers);
        if (gMarkers && gMarkers.length > 0)
        {
            for (var i=0; i < gMarkers.length; i++)
            {
                map.removeOverlay(gMarkers[i]);
            }
        }
    }
    var mi = false;
    if (data && data.length > 0)
    {
        var item, point;
        var j = 0;
        for (var i = (data.length - 1); i>= 0; i--)
        {
            item = data[i];
            if (!item)
            {
                continue;
            }
            if (item.baidu_longitude == '0.00000000000000' || item.baidu_latitude == '0.00000000000000' )
            {
                if(item.longitude == '0.00000000000000' || item.latitude == '0.00000000000000' )
                {
                    continue;
                }
                else
                {
                    point = new BMap.Point(item.longitude, item.latitude);
                    mi = true;
                    BMap.Convertor.translate(point,2,addMarker, item, i, data.length, false);     //真实经纬度转成百度坐标
                }
            }
            else
            {
                point = new BMap.Point(item.baidu_longitude,item.baidu_latitude);
                mi = true;
                addMarker(point, item, i, data.length, false);
                //BMap.Convertor.translate(point,2,addMarker, item, i, data.length, false);     //真实经纬度转成百度坐标
            }
        }
    }
    hg_remove_node('scriptforpoint');
}
function hg_showsort(data)
{
    data = eval(data);
    if (data.length > 0)
    {
        var item, point;
        var points = [];
        var sortshow = document.getElementById('sortshow');
        var html = '';
        var size = '';
        html = html + '<span style="background:#666;color:#fffffd;margin-right:5px;cursor:pointer;" onclick="hg_load_points(0);">全部</span>';
        for (var i = 0; i < data.length; i++)
        {
            item = data[i];
            try
            {
                gIcon[item.id] = item.icon.host + item.icon.dir + size + item.icon.filepath + item.icon.filename;
            }
            catch (e)
            {
                gIcon[item.id] = '';
            }
            html = html + '<span style="background:' + item.color + ';color:#fffffd;margin-right:5px;cursor:pointer;" onclick="hg_load_points(' + item.id + ');">' + item.title + '</span>';
        }
        //print_r(gIcon);
        sortshow.innerHTML = html;
        sortshow.style.display = 'block';
    }
    hg_remove_node('scriptforsort');
    hg_load_points();
}

function hg_remove_node(id)
{
    //document.getElementById(id).removeNode();
}

function hg_load_sort()
{
    if (_GET['suri'])
    {
        var script = document.createElement("script");
        script.id='scriptforsort';
        script.src = _GET['suri'] + '&callback=hg_showsort';
        document.body.appendChild(script);
    }
    else
    {
        hg_load_points();
    }
}
function hg_load_points(sort)
{
    if (_GET['duri'])
    {
        var script = document.createElement("script");
        script.id='scriptforpoint';
        if (sort)
        {
            sort = '&sort_id=' + parseInt(sort);
        }
        else
        {
            sort = '';
        }
        script.src = _GET['duri'] + '&expire=1&callback=hg_showpoints' + sort;
        document.body.appendChild(script);
    }
}

window.onload = loadScript;
var gHash, gTtraffic;
function hg_sh_traffic()
{
    if (_GET['type'] == 'traffic')
    {
        if (!gTtraffic)
        {
            gTtraffic = new BMap.TrafficLayer();        // 创建交通流量图层实例
        }
        map.addTileLayer(gTtraffic);
    }
    else
    {
        map.removeTileLayer(gTtraffic);
    }
}
setInterval(
        function()
        {
            var para = document.location.hash.substr(1);
            if (para != gHash)
            {
                _GET = [];
                hg_load_para();
                if (_GET['lng'] && _GET['lat'])
                {
                    var point = new BMap.Point(_GET['lng'], _GET['lat']);
                    BMap.Convertor.translate(point,0,addMarker, '', '', '', 2);     //真实经纬度转成百度坐标
                    //map.setCenter(point);
                }
                else
                {
                    hg_toggle_traffic();
                    if(gMarkPosition)
                    {
                        map.panTo(gMarkPosition);
                    }
                }
            }
        },
        1000
);
function hg_toggle_traffic()
{
    if (_GET['type'] == 'traffic')
    {
        _GET['type'] = 'normal';
        document.getElementById('realtime_traffic').innerHTML = '显示实时路况';
        document.getElementById('explain_traffic').style.display = 'none';
    }
    else
    {
        document.getElementById('realtime_traffic').innerHTML = '关闭实时路况';
        document.getElementById('explain_traffic').style.display = '';
        _GET['type'] = 'traffic';
    }
    hg_sh_traffic();
}
if (_GET['type'] == 'traffic')
{
    document.getElementById('realtime_traffic').innerHTML = '关闭实时路况';
}

function date ( format, timestamp ) {
    var a, jsdate=((timestamp) ? new Date(timestamp*1000) : new Date());
    var pad = function(n, c){
        if( (n = n + "").length < c ) {
            return new Array(++c - n.length).join("0") + n;
        } else {
            return n;
        }
    };
    var txt_weekdays = ["Sunday","Monday","Tuesday","Wednesday",
        "Thursday","Friday","Saturday"];
    var txt_ordin = {1:"st",2:"nd",3:"rd",21:"st",22:"nd",23:"rd",31:"st"};
    var txt_months = ["", "January", "February", "March", "April",
        "May", "June", "July", "August", "September", "October", "November",
        "December"];
    var f = {
        // Day
        d: function(){
            return pad(f.j(), 2);
        },
        D: function(){
            t = f.l(); return t.substr(0,3);
        },
        j: function(){
            return jsdate.getDate();
        },
        l: function(){
            return txt_weekdays[f.w()];
        },
        N: function(){
            return f.w() + 1;
        },
        S: function(){
            return txt_ordin[f.j()] ? txt_ordin[f.j()] : 'th';
        },
        w: function(){
            return jsdate.getDay();
        },
        z: function(){
            return (jsdate - new Date(jsdate.getFullYear() + "/1/1")) / 864e5 >> 0;
        },

        // Week
        W: function(){
            var a = f.z(), b = 364 + f.L() - a;
            var nd2, nd = (new Date(jsdate.getFullYear() + "/1/1").getDay() || 7) - 1;

            if(b <= 2 && ((jsdate.getDay() || 7) - 1) <= 2 - b){
                return 1;
            } else{

                if(a <= 2 && nd >= 4 && a >= (6 - nd)){
                    nd2 = new Date(jsdate.getFullYear() - 1 + "/12/31");
                    return date("W", Math.round(nd2.getTime()/1000));
                } else{
                    return (1 + (nd <= 3 ? ((a + nd) / 7) : (a - (7 - nd)) / 7) >> 0);
                }
            }
        },

        // Month
        F: function(){
            return txt_months[f.n()];
        },
        m: function(){
            return pad(f.n(), 2);
        },
        M: function(){
            t = f.F(); return t.substr(0,3);
        },
        n: function(){
            return jsdate.getMonth() + 1;
        },
        t: function(){
            var n;
            if( (n = jsdate.getMonth() + 1) == 2 ){
                return 28 + f.L();
            } else{
                if( n & 1 && n < 8 || !(n & 1) && n > 7 ){
                    return 31;
                } else{
                    return 30;
                }
            }
        },

        // Year
        L: function(){
            var y = f.Y();
            return (!(y & 3) && (y % 1e2 || !(y % 4e2))) ? 1 : 0;
        },
        //o not supported yet
        Y: function(){
            return jsdate.getFullYear();
        },
        y: function(){
            return (jsdate.getFullYear() + "").slice(2);
        },

        // Time
        a: function(){
            return jsdate.getHours() > 11 ? "pm" : "am";
        },
        A: function(){
            return f.a().toUpperCase();
        },
        B: function(){
            // peter paul koch:
            var off = (jsdate.getTimezoneOffset() + 60)*60;
            var theSeconds = (jsdate.getHours() * 3600) +
                    (jsdate.getMinutes() * 60) +
                    jsdate.getSeconds() + off;
            var beat = Math.floor(theSeconds/86.4);
            if (beat > 1000) beat -= 1000;
            if (beat < 0) beat += 1000;
            if ((String(beat)).length == 1) beat = "00"+beat;
            if ((String(beat)).length == 2) beat = "0"+beat;
            return beat;
        },
        g: function(){
            return jsdate.getHours() % 12 || 12;
        },
        G: function(){
            return jsdate.getHours();
        },
        h: function(){
            return pad(f.g(), 2);
        },
        H: function(){
            return pad(jsdate.getHours(), 2);
        },
        i: function(){
            return pad(jsdate.getMinutes(), 2);
        },
        s: function(){
            return pad(jsdate.getSeconds(), 2);
        },
        //u not supported yet

        // Timezone
        //e not supported yet
        //I not supported yet
        O: function(){
            var t = pad(Math.abs(jsdate.getTimezoneOffset()/60*100), 4);
            if (jsdate.getTimezoneOffset() > 0) t = "-" + t; else t = "+" + t;
            return t;
        },
        P: function(){
            var O = f.O();
            return (O.substr(0, 3) + ":" + O.substr(3, 2));
        },
        //T not supported yet
        //Z not supported yet

        // Full Date/Time
        c: function(){
            return f.Y() + "-" + f.m() + "-" + f.d() + "T" + f.h() + ":" + f.i() + ":" + f.s() + f.P();
        },
        //r not supported yet
        U: function(){
            return Math.round(jsdate.getTime()/1000);
        }
    };

    return format.replace(/[\\]?([a-zA-Z])/g, function(t, s){
        if( t!=s ){
            // escaped
            ret = s;
        } else if( f[s] ){
            // a date function exists
            ret = f[s]();
        } else{
            // nothing special
            ret = s;
        }

        return ret;
    });
}

</script>
</head>
<body style="margin:0">
<div style="position:absolute;display:none;z-index:999;margin:10px;background:rgba(255, 255, 255, .6);border:1px solid #ccc;padding:5px 0 5px 5px;" id="sortshow">
</div>
<div style="cursor:pointer;position:absolute;z-index:999;margin:50px 0 0 10px;background:rgba(255, 255, 255, .8);border:1px solid #ccc;padding:5px 0 5px 5px;color:#000;width:75px">
<span onclick="hg_toggle_traffic()" id="realtime_traffic">显示实时路况<span>
</div>
<div id="explain_traffic" style="display:none;position:absolute;z-index:999;width:72px;margin:72px 0 0 10px;background:rgba(255, 255, 255, .8);border-bottom:1px solid #ccc;border-left:1px solid #ccc;border-right:1px solid #ccc;padding:0 4px 4px;color:#000;font-size:10px">
    <span style="background:#d84a47;color:#fff;margin:0 2px;">拥挤</span>
    <span style="background:#f3ad00;color:#fff;margin-right:2px;">缓行</span>
    <span style="background:#60be4b;color:#fff;">畅通</span>
</div>

<div id="map" style="width: 100%; height: 100%"></div>
</body>
</html>
