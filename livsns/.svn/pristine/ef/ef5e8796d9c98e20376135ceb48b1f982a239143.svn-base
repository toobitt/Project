<?phprequire_once './global.php';require_once './lib/team.class.php';require_once './lib/topic.class.php';include_once ROOT_PATH . '/lib/class/option.class.php';class teamApi extends outerReadBase{	private $team;	private $topic;		public function __construct()	{		parent::__construct();		$this->team = new teamClass();		$this->topic = new topicClass();	}		public function __destruct()	{		parent::__destruct();		unset($this->team);		unset($this->topic);	}		/**	 * 获取所有通过审核的小组信息	 */	public function show()	{		$offset = isset($this->input['offset']) ? intval($this->input['offset']) : 0;		$count = isset($this->input['count']) ? intval($this->input['count']) : 20;		$condition = $this->filter_data();		$teams = $this->team->show($offset, $count, $condition);		$this->setXmlNode('team_info', 'team');		if (!empty($teams))		{			foreach($teams as $team)			{				$this->addItem($team);			}		}		$this->output();	}		/**	 * 获取所有通过审核的小组数量	 */	public function count()	{		$condition = $this->filter_data();		$info = $this->team->count($condition);		echo json_encode($info);	}		/**	 * 根据小组的ID获取审核过的小组	 */	public function get_team_by_id()	{		$team_ids = trim(urldecode($this->input['team_ids']));		if (!$team_ids) $this->errorOutput(PARAM_WRONG);		$teams = $this->team->team_by_id($team_ids);		$this->setXmlNode('team_info', 'team');		$this->addItem($teams);		$this->output();	}		/**	 * 获取单个已审核的小组信息	 */	public function detail()	{		$team_id = isset($this->input['team_id']) ? intval($this->input['team_id']) : -1;		if ($team_id < 0) $this->errorOutput(PARAM_WRONG);		$team_info = $this->team->detail($team_id, 1);		$this->setXmlNode('team_info', 'team');		$this->addItem($team_info);		$this->output();	}		/**	 * 获取小组的类型信息	 */	public function team_type()	{		$type = isset($this->input['team_type']) ? intval($this->input['team_type']) : 0;		$types = $this->team->team_type($type);		$this->setXmlNode('team_type', 'team');		if (!empty($types))		{			foreach($types as $type)			{				$this->addItem($type);			}		}		$this->output();	}		/**	 * 获取小组的分类信息	 */	public function team_category()	{		$categorys = $this->team->team_category();		$this->setXmlNode('team_categorys', 'category');		if (!empty($categorys))		{			foreach($categorys as $category)			{				$this->addItem($category);			}		}		$this->output();	}		/**	 * 获取小组和用户权限	 */	public function get_permission()	{		$team_id = isset($this->input['team_id']) ? intval($this->input['team_id']) : -1;		if ($team_id < 0) $this->errorOutput(PARAM_WRONG);		$team_info = $this->team->detail($team_id, 1);		if (!$team_info)		{			$team_info = array(				'team_id' => $team_id,				'permission' => 0			);		}		$user_id = isset($this->input['user_id']) ? intval($this->input['user_id']) : $this->user['user_id'];		$permission = isset($this->input['permission']) ? trim(urldecode($this->input['permission'])) : '';		if ($user_id <= 0) $this->errorOutput(PARAM_WRONG);		//获取权限		$result = $this->team->get_permission($user_id, $team_info, $permission);		$this->addItem($result);		$this->output();	}		/**	 * 检测是否为行动召集者	 */	public function check_apply_user()	{		$team_id = isset($this->input['team_id']) ? intval($this->input['team_id']) : -1;		if ($team_id < 0) $this->errorOutput(PARAM_WRONG);		$team_info = $this->team->detail($team_id, 1);		if (!$team_info['team_id']) $this->errorOutput(PARAM_WRONG);		$user_ids = trim(urldecode($this->input['user_id']));		$apply_users = $this->team->is_apply_user($team_id, $user_ids);		if ($apply_users)		{			foreach ($apply_users as $v)			{				$this->addItem($v);			}		}		$this->output();	}		/**	 * 获取关注小组的用户	 */	public function get_members()	{		$team_id = isset($this->input['team_id']) ? intval($this->input['team_id']) : -1;		if ($team_id < 0) $this->errorOutput(PARAM_WRONG);		$team_info = $this->team->detail($team_id, 1);		if (!$team_info) $this->errorOutput(TEAM_NO_EXISTS);		$offset = isset($this->input['offset']) ? intval($this->input['offset']) : 0;		$count = isset($this->input['count']) ? intval($this->input['count']) : 10;		$option = new option();		$members_info = $option->members('team', $team_id, 'attention', $offset, $count);		$this->addItem($members_info);		$this->output();	}		/**	 * 获取黑名单用户信息	 */	public function get_blacklist()	{		$team_id = isset($this->input['team_id']) ? intval($this->input['team_id']) : -1;		if ($team_id < 0) $this->errorOutput(PARAM_WRONG);		$team_info = $this->team->detail($team_id, 1);		if (!$team_info) $this->errorOutput(TEAM_NO_EXISTS);		$offset = isset($this->input['offset']) ? intval($this->input['offset']) : 0;		$count = isset($this->input['count']) ? intval($this->input['count']) : 10;		$blacklist = $this->team->black_list($team_id, $offset, $count);		$this->setXmlNode('team_blacklist', 'blacklist');		if (!empty($blacklist))		{			foreach ($blacklist as $v)			{				$this->addItem($v);			}		}		$this->output();	}		/**	 * 获取黑名单用户总数	 */	public function blacklist_count()	{		$team_id = isset($this->input['team_id']) ? intval($this->input['team_id']) : -1;		if ($team_id < 0) $this->errorOutput(PARAM_WRONG);		$team_info = $this->team->detail($team_id, 1);		if (!$team_info) $this->errorOutput(TEAM_NO_EXISTS);		$result = $this->team->blacklist_count($team_id);		echo json_encode($result);	}		/**	 * 获取申请活动召集者信息	 */	public function action_apply()	{		$team_id = isset($this->input['team_id']) ? intval($this->input['team_id']) : -1;		if ($team_id < 0) $this->errorOutput(PARAM_WRONG);		$team_info = $this->team->detail($team_id, 1);		if (!$team_info) $this->errorOutput(TEAM_NO_EXISTS);		$offset = isset($this->input['offset']) ? intval($this->input['offset']) : 0;		$count = isset($this->input['count']) ? intval($this->input['count']) : 20;		$condition = 'team_id = ' . $team_id;		if (isset($this->input['state']))		{			$condition .= ' AND state = ' . intval($this->input['state']);		}		$limit = array($offset, $count);		$apply_info = $this->team->get_apply_list($condition, $limit);		$this->setXmlNode('apply_info' , 'apply');		if (!empty($apply_info))		{			foreach ($apply_info as $apply)			{				$this->addItem($apply);			}		}		$this->output();	}		/**	 * 获取申请活动召集者总数	 */	public function apply_count()	{		$team_id = isset($this->input['team_id']) ? intval($this->input['team_id']) : -1;		if ($team_id < 0) $this->errorOutput(PARAM_WRONG);		$team_info = $this->team->detail($team_id, 1);		if (!$team_info) $this->errorOutput(TEAM_NO_EXISTS);		$condition = 'team_id = ' . $team_id;		if (isset($this->input['state']))		{			$condition .= ' AND state = ' . intval($this->input['state']);		}		$info = $this->team->get_apply_count($condition);		echo json_encode($info);	}		/**	 * 检测是否申请过行动召集者	 */	public function is_apply()	{		$team_id = intval($this->input['team_id']);		$team_info = $this->team->detail($team_id, 1);		if (!$team_info['team_id']) $this->errorOutput(TEAM_NO_EXISTS);		$user_id = intval($this->user['user_id']);		$result = $this->team->is_apply($team_id, $user_id);		$this->addItem($result);		$this->output();	}		/**	 * 检查小组名称是否存在	 */	public function check_team_name()	{		$name = trim(urldecode($this->input['team_name']));		if (empty($name)) $this->errorOutput(PARAM_WRONG);		$result = $this->team->check_team_name($name);		$this->addItem($result);		$this->output();	}		/*	//获取小组最新公告信息	public function notice()	{		$team_id = isset($this->input['team_id']) ? intval($this->input['team_id']) : -1;		if ($team_id < 0) $this->errorOutput(PARAM_WRONG);		$team_info = $this->team->detail($team_id, 1);		if (!$team_info) $this->errorOutput(TEAM_NO_EXISTS);		$offset = isset($this->input['offset']) ? intval($this->input['offset']) : 0;		$count = isset($this->input['count']) ? intval($this->input['count']) : 1;		$notice_info = $this->team->get_notice_by_team($team_id, $offset, $count);		$this->setXmlNode('notice_info', 'notice');		if (!empty($notice_info))		{			foreach ($notice_info as $notice)			{				$this->addItem($notice);			}		}		$this->output();	}		//获取小组的公告总数	public function notice_count()	{		$team_id = isset($this->input['team_id']) ? intval($this->input['team_id']) : -1;		if ($team_id < 0) $this->errorOutput(PARAM_WRONG);		$team_info = $this->team->detail($team_id, 1);		if (!$team_info) $this->errorOutput(TEAM_NO_EXISTS);		$result = $this->team->get_notice_count($team_id);		echo json_encode($result);	}		//获取单个公告信息	public function notice_detail()	{		$id = isset($this->input['id']) ? intval($this->input['id']) : -1;		if ($id < 0) $this->errorOutput(PARAM_WRONG);		$result = $this->team->get_one_notice($id);		$this->setXmlNode('notice_info', 'notice');		$this->addItem($result);		$this->output();	}	*/		/**	 * 获取我关注的小组信息	 */	public function attention_team()	{		if ($this->input['user_id'])		{			$user_id = intval($this->input['user_id']);		}		else		{			$user_id = $this->user['user_id'];		}		$option = new option();		$data = array(			'user_id' => $user_id,			'source' => 'team',			'action' => 'attention',			'offset' => $this->input['offset'],			'count' => $this->input['count'],		);		$attention_info = $option->get_relation($data);		$this->addItem_withkey('total', $attention_info['data']['attention']['total']);					if ($attention_info['data'])		{			$team_ids = array();			foreach ($attention_info['data']['attention']['infos'] as $v)			{				$team_ids[] = $v['source_id'];			}			$team_info = $this->team->team_by_id(implode(',', $team_ids), 1);			$this->setXmlNode('team_info', 'team');			if (!empty($team_info))			{				foreach ($team_info as $team)				{					$this->addItem($team);				}			}		}		$this->output();	}		public function attention_team_count()	{		if (!$this->input['user_id'])		{			$user_id = intval($this->input['user_id']);		}		else		{			$user_id = $this->user['user_id'];		}		$option = new option();		$data = array(			'user_id' => $user_id,			'source' => 'team',			'action' => 'attention',		);		$attention_info = $option->count($data);		$this->setXmlNode('team_info', 'team');		$this->addItem($attention_info);		$this->output();	}		private function filter_data()	{		return array(			'key' => trim(urldecode($this->input['k'])),			'start_time' => strtotime(trim(urldecode($this->input['start_time']))),			'end_time' => strtotime(trim(urldecode($this->input['end_time']))),			'date_search' => trim($this->input['date_search']),			'state' => 3,			'team_type' => trim($this->input['team_type']),			'team_category' => trim($this->input['team_category']),			'hgupdn' => trim(urldecode($this->input['hgupdn'])),			'hgorder' => trim(urldecode($this->input['hgorder'])),			'_type' => trim($this->input['_type']),		);	}}$out = new teamApi();$action = $_INPUT['a'];if (!method_exists($out,$action)){	$action = 'show';}$out->$action();?>