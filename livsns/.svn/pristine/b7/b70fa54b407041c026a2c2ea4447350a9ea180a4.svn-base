<?php/*************************************************************************** * LivSNS 0.1 * (C)2004-2010 HOGE Software. * * $Id: albums.php 7586 2013-07-05 09:40:56Z yaojian $ *  *  *  ***************************************************************************/require_once './global.php';include_once CUR_CONF_PATH . 'lib/albums_app.class.php';define('MOD_UNIQUEID', 'albums');//模块标识class albumsApi extends appCommonFrm {    private $api;    public function __construct() {        parent::__construct();        $this -> api = new albums_app();    }    public function __destruct() {        parent::__destruct();        unset($this -> api);    }    /********************************************************************scala********************************************************************/    /**     * 增加相册设置封面     * 2013.12.26     */    public function set_surface_pic() {        if (!isset($this -> input['id']) || !$this -> input['id']) {            $this -> errorOutput(NO_ID);        }        if (!isset($this -> input['albums_id']) || !$this -> input['albums_id']) {            $this -> errorOutput(ALBUMS_ID);        }        $album_id = intval($this -> input['albums_id']);        $id = intval($this -> input['id']);        include (CUR_CONF_PATH . 'lib/Core.class.php');        $obj = new Core();        $photos_info = $obj -> detail('photos', " where id=$id");        $params['albums_cover'] = $photos_info['photos_info'];        $photos_info = unserialize($params['albums_cover']);        $imgurl = $photos_info['host'] . $photos_info['dir'] . $photos_info['filepath'] . $photos_info['filename'];        $re = $obj -> update('albums', $params, " where id=" . $album_id);                if ($re) {            $return['msg'] = "更新成功";            $return['status'] = 1;            $return['photo'] = $photos_info;            $return['imgurl'] = $imgurl;        } else {            $return['msg'] = "更新失败";            $return['status'] = 2;            $return['photo'] = $photos_info;            $return['imgurl'] = $imgurl;        }        $this -> addItem($return);        $this -> output();    }    public function audit() {        if (!isset($this -> input['id']) || !$this -> input['id']) {            $this -> errorOutput(NO_ID);        }        $id = intval($this -> input['id']);        include (CUR_CONF_PATH . 'lib/Core.class.php');        $obj = new Core();        $info = $obj -> detail('albums', ' WHERE id=' . $id);        if ($info['is_audit'] == 1) {            $params['is_audit'] = 2;            $return['status'] = 1;        } else {
            $params['is_audit'] = 1;            $return['status'] = 2;
        }        $re = $obj -> update('albums', $params, " where id=" . $id);        if ($re) {            $return['msg'] = "更新成功";        } else {            $return['msg'] = "更新失败";        }        $return['id'] = $id;        $this -> addItem($return);        $this -> output();    }    /********************************************************************\scala********************************************************************/    /**     * 获取相册数据     */    public function show() {        if ($this -> user['group_type'] > MAX_ADMIN_TYPE) {            //权限验证            $this -> verify_content_prms();        }        $offset = isset($this -> input['offset']) ? intval($this -> input['offset']) : 0;        $count = isset($this -> input['count']) ? intval($this -> input['count']) : 20;        $condition = $this -> filter_data();        $data = array('offset' => $offset, 'count' => $count, 'condition' => $condition);        $albums_info = $this -> api -> show($data);        $this -> setXmlNode('albums_info', 'albums');        if ($albums_info) {            foreach ($albums_info as $albums) {                $this -> addItem($albums);            }        }                $this -> output();    }    /**     * 获取相册总数     */    public function count() {        $condition = $this -> filter_data();        $info = $this -> api -> count($condition);        echo json_encode($info);    }    /**     * 获取单个相册数据     */    public function detail() {        if ($this -> user['group_type'] > MAX_ADMIN_TYPE) {            //权限验证            $this -> verify_content_prms(array('_action' => 'show'));        }        $id = intval($this -> input['id']);        if ($id <= 0)            $this -> errorOutput(PARAM_WRONG);        $albums_info = $this -> api -> detail(array('id' => $id));        if ($albums_info) {            //获取用户信息            $member_info = $this->getMemberInfo($albums_info['user_id']);            if ($member_info[$albums_info['user_id']])            {                $albums_info['user'] = $member_info[$albums_info['user_id']];            }            $albums_info['albums_cover'] = unserialize($albums_info['albums_cover']);            $this -> addItem($albums_info);        }        $this -> output();    }    /**     * 删除相册数据(逻辑删除)     */    public function delete() {        $id = trim(urldecode($this -> input['id']));        $id_arr = explode(',', $id);        $ids = array_filter($id_arr, 'filter_arr');        $id = implode(',', $ids);        if (empty($id))            $this -> errorOutput(PARAM_WRONG);        $info = $this -> api -> show(array('count' => -1, 'condition' => array('id' => $id)));        if (!$info)            $this -> errorOutput(OBJECT_NULL);        $validate = $cate_id = array();        foreach ($info as $v) {            $validate[$v['id']] = $v['id'];            if ($v['cate_id'])                $cate_id[$v['cate_id']][] = $v['id'];        }        $validate = implode(',', $validate);        if ($this -> user['group_type'] > MAX_ADMIN_TYPE) {            $sort_id = implode(',', $cate_id);            if ($sort_id) {                $category_info = $this -> api -> get_category($sort_id);                $sort_ids = array();                if ($category_info) {                    foreach ($category_info as $v) {                        $sort_ids[$v['id']] = $v['parents'];                    }                }                foreach ($info as $v) {                    if ($v['cate_id']) {                        $v['nodes'][$v['cate_id']] = $sort_ids[$v['cate_id']];                    }                    $this -> verify_content_prms($v);                }            } else {                $this -> verify_content_prms(array('_action' => 'delete'));            }        }        //删除相册下的照片        $this -> api -> update('photos', array('isdrop' => 1), array('albums_id' => $validate));        //删除相册下的评论        $this -> api -> update('comment', array('isdrop' => 1), array('albums_id' => $validate));        //删除相册下的赞        $this -> api -> update('praise', array('isdrop' => 1), array('albums_id' => $validate));        //删除相册        $result = $this -> api -> update('albums', array('isdrop' => 1), array('id' => $validate));        if ($cate_id) {            foreach ($cate_id as $k => $v) {                $this -> api -> update('category', array('albums_num' => -count($v)), array('id' => $k), true);            }        }        $this -> addItem($result);        $this -> output();    }    /**     * 过滤查询数据     */    private function filter_data() {        $name = isset($this -> input['k']) ? trim(urldecode($this -> input['k'])) : '';        $time = isset($this -> input['date_search']) ? intval($this -> input['date_search']) : '';        $start_time = trim($this -> input['start_time']);        $end_time = trim($this -> input['end_time']);        $cate_id = intval($this -> input['_id']);        $data = array('keyword' => $name, 'date_search' => $time, 'start_time' => $start_time, 'end_time' => $end_time, 'cate_id' => $cate_id);        //非管理员判断权限        if ($this -> user['group_type'] > MAX_ADMIN_TYPE) {            if ($authnode = $this -> user['prms']['app_prms'][APP_UNIQUEID]['nodes']) {                $authnode_str = $authnode ? implode(',', $authnode) : '';                if ($authnode_str === '0') {                    $data['cate_id'] = $authnode_str;                }                if ($authnode_str) {                    $authnode_str = $cate_id ? $authnode_str . ',' . $cate_id : $authnode_str;                    $info = $this -> api -> get_category($authnode_str);                    $authnode_array = array();                    foreach ($info as $v) {                        $authnode_array[$v['id']] = explode(',', $v['childs']);                    }                    $authnode_str = '';                    foreach ($authnode_array as $node_id => $n) {                        if ($node_id == $cate_id) {                            $node_father_array = $n;                            if (!in_array($cate_id, $authnode))                                continue;                        }                        $authnode_str .= implode(',', $n) . ',';                    }                    $authnode_str = true ? $authnode_str . '0' : trim($authnode_str, ',');                    if (!$cate_id) {                        $data['cate_id'] = $authnode_str;                    } else {                        $authnode_array = explode(',', $authnode_str);                        if (!in_array($cate_id, $authnode_array)) {                            if (!$auth_child_node_array = array_intersect($node_father_array, $authnode_array)) {                                $this -> errorOutput(NO_PRIVILEGE);                            }                            $data['cate_id'] = implode(',', $auth_child_node_array);                        }                    }                }            } else {                unset($data['cate_id']);            }        }        return $data;    }    public function check_data() {        //更新分类对应相册数据        $sql = 'UPDATE ' . DB_PREFIX . 'category c, (SELECT cate_id, count(id) AS num FROM ' . DB_PREFIX . 'albums WHERE isdrop = 0 AND cate_id > 0 GROUP BY cate_id) a SET c.albums_num = a.num WHERE c.id = a.cate_id';        $this -> db -> query($sql);        //更新相册对应照片数据        $sql = 'UPDATE ' . DB_PREFIX . 'albums a, (SELECT albums_id, count(id) AS num FROM ' . DB_PREFIX . 'photos WHERE isdrop = 0 GROUP BY albums_id) p SET a.photos_total = p.num WHERE a.id = p.albums_id';        $this -> db -> query($sql);        //更新相册对应已审核照片数据        $sql = 'UPDATE ' . DB_PREFIX . 'albums a, (SELECT albums_id, count(id) AS num FROM ' . DB_PREFIX . 'photos WHERE isdrop = 0 AND state = 1 GROUP BY albums_id) p SET a.photos_num = p.num WHERE a.id = p.albums_id';        $this -> db -> query($sql);        //更新照片对应评论数据        $sql = 'UPDATE ' . DB_PREFIX . 'photos p, (SELECT photo_id, count(id) AS num FROM ' . DB_PREFIX . 'comment WHERE isdrop = 0 GROUP BY photo_id) c SET p.comment_total = c.num WHERE p.id = c.photo_id';        $this -> db -> query($sql);        //更新照片对应已审核评论数据        $sql = 'UPDATE ' . DB_PREFIX . 'photos p, (SELECT photo_id, count(id) AS num FROM ' . DB_PREFIX . 'comment WHERE isdrop = 0 AND state = 1 GROUP BY photo_id) c SET p.comment_num = c.num WHERE p.id = c.photo_id';        $this -> db -> query($sql);        //更新照片对应赞数据        $sql = 'UPDATE ' . DB_PREFIX . 'photos p, (SELECT photo_id, count(id) AS num FROM ' . DB_PREFIX . 'praise WHERE isdrop = 0 GROUP BY photo_id) pr SET p.praise_num = pr.num WHERE p.id = pr.photo_id';        $this -> db -> query($sql);        //更新相册对应评论数据        $sql = 'UPDATE ' . DB_PREFIX . 'albums a, (SELECT albums_id, SUM(comment_num) AS comment_num, SUM(comment_total) AS comment_total FROM ' . DB_PREFIX . 'photos WHERE isdrop = 0 GROUP BY albums_id) p SET a.comment_total = p.comment_total, a.comment_num = p.comment_num WHERE a.id = p.albums_id';        $this -> db -> query($sql);        $this -> addItem(true);        $this -> output();    }    /**     * 设置相册属于哪个分类     */    public function setAlbumCate() {        if (!isset($this -> input['cate_id']) || !$this -> input['cate_id']) {            $this -> errorOutput(NO_CATE_ID);        }        if (!isset($this -> input['id']) || !$this -> input['id']) {            $this -> errorOutput(NO_ID);        }        $id = $this -> input['id'];        $cond = " WHERE id=$id";        $params['cate_id'] = $this -> input['cate_id'];        include (CUR_CONF_PATH . 'lib/Core.class.php');        $obj = new Core();        $datas = $obj -> update('albums', $params, $cond);        $this -> addItem($datas);        $this -> output();    }    	/**	 * 获取会员信息	 * @param Int|String $user_id	 */	private function getMemberInfo($user_id)	{	    if ($this->input['latest'])	    {	        //新会员	        include_once ROOT_PATH . 'lib/class/members.class.php';    		$newMember = new members();    		$member_info = $newMember->get_members($user_id);    		if ($member_info)    		{    		    $memberInfo = array();    		    foreach ($member_info as $v)    		    {    		        $memberInfo[$v['member_id']]['id'] = $v['member_id'];    		        $memberInfo[$v['member_id']]['nick_name'] = $v['member_name'];    		        $memberInfo[$v['member_id']]['avatar'] = $v['avatar'];    		    }    		}	    }	    else	    {	        include_once ROOT_PATH . 'lib/class/member.class.php';    		$member = new member();    		$member_info = $member->getMemberById($user_id);    		$member_info = $member_info[0];    		if ($member_info)    		{    		    $memberInfo = array();    		    foreach ($member_info as $k => $v)    		    {    		        $memberInfo[$k]['id'] = $v['id'];    		        $memberInfo[$k]['nick_name'] = $v['nick_name'];    		        $memberInfo[$k]['avatar'] = $v['avatar'];    		    }    		}	    }	    return $memberInfo;	}}function filter_arr(&$value) {    $value = intval($value);    return $value <= 0 ? false : true;}$out = new albumsApi();$action = $_INPUT['a'];if (!method_exists($out, $action)) {    $action = 'show';}$out -> $action();?>