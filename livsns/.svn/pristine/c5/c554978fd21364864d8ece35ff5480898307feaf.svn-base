<?phprequire_once './global.php';require_once '../lib/topic.class.php';require_once '../lib/team.class.php';include_once ROOT_PATH . 'lib/class/option.class.php';include_once ROOT_PATH . 'lib/class/mark.class.php';include_once ROOT_PATH . 'lib/class/team.class.php';class topicUpdateApi extends adminUpdateBase{	private $topic;	private $team;	private $teamApi;		public function __construct()	{		parent::__construct();		$this->topic = new topicClass();		$this->team = new teamClass();		$this->teamApi = new team();	}		public function __destruct()	{		parent::__destruct();		unset($this->topic);		unset($this->team);		unset($this->teamApi);	}		public function audit()	{			}		public function create()	{			}		public function publish()	{			}		public function sort()	{			}		public function update()	{			}		/*	//编辑话题	public function modify()	{		$rid = isset($this->input['rid']) ? intval($this->input['rid']) : -1;		if ($rid < 0) $this->errorOutput(PARAM_WRONG);		//检测编辑的话题是否存在		$reply_info = $this->topic->detail_reply($rid);		if (!$reply_info) $this->errorOutput(TEAM_NO_TOPIC);				$topic_info = $this->topic->detail($reply_info['topic_id']);				$data = array();		$subject = isset($this->input['subject']) ? trim(urldecode($this->input['subject'])) : '';		$content = isset($this->input['content']) ? trim(urldecode($this->input['content'])) : '';		if (($reply_info['subject'] && empty($subject)) || empty($content))		{			$this->errorOutput(PARAM_WRONG);		}		if ($reply_info['subject'] != $subject)		{			$data['subject'] = $subject;		}		if ($reply_info['content'] != $content)		{			$data['content'] = $content;		}		$data['update_time'] = TIMENOW;		$data['from_ip'] = hg_getip();		//保存编辑信息		if ($data['subject'])		{			$this->topic->update(array('subject' => $data['subject']), $reply_info['topic_id']);		}		$result = $this->topic->update_reply($data, $rid);		//附件的操作		if (isset($this->input['material']) && !$reply_info['reply_user_id'])		{			$img_info = unserialize(urldecode($this->input['material']));			$materialData = array(				'user_id' => $reply_info['poster_id'],				'user_name' => $reply_info['poster_name'],				'topic_id' => $reply_info['topic_id'],				'team_id' => $topic_info['source_id'],				'reply_id' => 0,			);			if(is_array($img_info) && !empty($img_info))			{				$materialNum = $this->topic->add_material($img_info, $materialData); //插入附件								//更新话题下的附件个数				$this->topic->update(array('material_num' => $materialNum), $reply_info['topic_id'], true);			}		}		//视频修改		if (isset($this->input['video_url']) && !$reply_info['reply_user_id'])		{			$video_url = trim(urldecode($this->input['video_url']));			$video_info = $this->teamApi->show_video($reply_info['topic_id'], 'topic');			if ($video_url != $video_info['url'])			{				$video->update_video($video_info['id'], $video_url, 'topic', $reply_info['topic_id']);			}		}		//标签修改		if (isset($this->input['topic_mark']) && !$reply_info['reply_user_id'])		{			$topic_mark = trim(urldecode($this->input['topic_mark']));			include_once ROOT_PATH . 'lib/class/mark.class.php';			$mark = new mark();			$data = array(				'source' => 'topic',				'source_id' => $reply_info['topic_id'],				'parent_id' => $topic_info['source_id'],				'action' => 'topic_tag',				'user_id' => $reply_info['poster_id']			);			if ($topic_mark)			{				$data['name'] = $topic_mark;			}			$result_mark = $mark->update_source_id_mark($data);			if ($result_mark)			{				$result['topic_mark'] = $topic_mark;				$this->topic->update(array('tags' => $topic_mark), $reply_info['topic_id']);			}			else			{				$this->errorOutput(FAIL_OP);			}		}		$this->addItem($result);		$this->output();	}	*/		/*	//批量审核话题数据	public function audit()	{			$topic_ids = $this->validate_data();		$result = $this->topic->update(array('state' => 1), $topic_ids);		$this->setXmlNode('topic_info', 'topic');		$this->addItem($result);		$this->output();	}	*/		/*	//批量打回(屏蔽)话题数据	public function back()	{		$topic_ids = $this->validate_data();		$result = $this->topic->update(array('state' => -1), $topic_ids);		$this->setXmlNode('topic_info', 'topic');		$this->addItem($result);		$this->output();	}	*/		/**	 * 批量删除话题数据	 */	public function delete()	{		$topic_ids = $this->validate_data();		$topic_info = $this->topic->topic_by_id($topic_ids);		$team = array();		foreach ($topic_info as $v)		{			$team[$v['source_id']][] = $v;		}		//删除话题下的回复数据		$this->topic->update_reply(array('state' => 0), '', $topic_ids);		//删除附件		$this->topic->update_topic_material(array('state' => 0), '', $topic_ids);		//删除视频		$this->topic->update_topic_video(array('state' => 0), '', $topic_ids);		//删除赞		$option = new option();		$favorData = array(			'source' => 'topic',			'action' => 'favor',			'source_id' => $topic_ids,			'state' => 0		);		$option->updateState($favorData);		//删除标签		$mark = new mark();		$markData = array(			'source' => 'topic',			'source_id' => $topic_ids,			'state' => 0		);		$mark->update_mark_state($markData);		//删除搜索		$this->teamApi->delete_search($topic_ids, 'topic');		//删除话题		$this->topic->update(array('state' => 0), $topic_ids);		if ($team)		{			//更新小组下话题数目			foreach ($team as $k=>$v)			{				$this->team->update(array('topic_num' => -intval(count($v))), $k, true);			}		}		$this->addItem($topic_ids);		$this->output();	}		/**	 * 批量恢复话题数据	 */	public function recover()	{		$topic_ids = trim(urldecode($this->input['topic_id']));		$topic_info = $this->topic->topic_by_id($topic_ids, 0);		$team = array();		foreach ($topic_info as $v)		{			$team[$v['source_id']][] = $v;		}		//恢复话题下的回复数据		$this->topic->update_reply(array('state' => 1), '', $topic_ids);		//恢复附件		$this->topic->update_topic_material(array('state' => 1), '', $topic_ids);		//恢复视频		$this->topic->update_topic_video(array('state' => 1), '', $topic_ids);		//恢复赞		$option = new option();		$favorData = array(			'source' => 'topic',			'action' => 'favor',			'source_id' => $topic_ids,			'state' => 1		);		$option->updateState($favorData);		//恢复标签		$mark = new mark();		$markData = array(			'source' => 'topic',			'source_id' => $topic_ids,			'state' => 1		);		$mark->update_mark_state($markData);		//恢复搜索		$this->teamApi->add_search($topic_ids, 'topic');		//恢复话题		$this->topic->update(array('state' => 1), $topic_ids);		if ($team)		{			//更新小组下话题数目			foreach ($team as $k=>$v)			{				$this->team->update(array('topic_num' => intval(count($v))), $k, true);			}		}		$this->addItem($topic_ids);		$this->output();	}		/**	 * 删除话题数据	 */	public function real_del()	{		$topic_ids = trim(urldecode($this->input['topic_id']));		$result = $this->del_data($topic_ids);		$this->addItem($result);		$this->output();	}		/**	 * 根据小组ID删除话题数据	 */	public function real_del_topic()	{		$team_ids = trim(urldecode($this->input['team_id']));		$ids = $this->topic->get_topic_ids($team_ids);		$result = $this->del_data(implode(',', $ids));		$this->addItem($result);		$this->output();	}		/**	 * 删除话题数据操作	 * @param String $topic_ids	 */	private function del_data($topic_ids)	{		//删除回复		$this->topic->del_reply($topic_ids);		//删除附件		$this->topic->del_material($topic_ids);		//删除视频		$this->topic->del_video($topic_ids);		//删除赞		$option = new option();		$favorData = array(			'source' => 'topic',			'source_id' => $topic_ids,			'action' => 'favor'		);		$option->delete($favorData);		//删除标签		$mark = new mark();		$markData = array(			'source' => 'topic',			'source_id' => $topic_ids,			'action' => 'topic_tag'		);		$mark->delete_source_id_mark($markData);		//删除话题足迹		$this->teamApi->delete_visit($topic_ids, 'topic');		//删除话题搜索		$this->teamApi->delete_search($topic_ids, 'topic');		//删除话题		$result = $this->topic->del_topic($topic_ids);		return $result;	}		/**	 * 验证数据	 */	private function validate_data()	{		$topic_ids = trim(urldecode($this->input['topic_id']));		$topic_ids = str_replace('，', ',', $topic_ids);			$id_array = explode(',', $topic_ids);		//过滤数组中的空值		$id_array = array_filter($id_array);		if(empty($id_array))		{			$this->errorOutput(PARAM_WRONG);		}		$topic_ids = implode(',', $id_array);		$topic_info = $this->topic->topic_by_id($topic_ids);		if (!$topic_info) $this->errorOutput(PARAM_WRONG);		$verify_topic_ids = array();		foreach ($topic_info as $topic)		{			$verify_topic_ids[] = $topic['topic_id'];		}		sort($id_array);		sort($verify_topic_ids);		if ($verify_topic_ids != $id_array)		{			$this->errorOutput(PARAM_WRONG);		}		return implode(',', $verify_topic_ids);	}		/**	 * 批量删除回复	 */	public function drop_reply()	{		$rids = trim(urldecode($this->input['rid']));		$rids = str_replace('，', ',', $rids);			$id_array = explode(',', $rids);		//过滤数组中的空值		$id_array = array_filter($id_array);		if(empty($id_array))		{			$this->errorOutput(PARAM_WRONG);		}		$rids = implode(',', $id_array);		$reply_info = $this->topic->reply_by_id($rids);		$verify_ids = array();		$topic = array();		foreach ($reply_info as $v)		{			$verify_ids[] = $v['rid'];			$topic[$v['topic_id']][] = $v;		}		$verify_ids = implode(',', $verify_ids);		$result = $this->topic->update_reply(array('state' => 0), $verify_ids);		if ($topic)		{			//更新小组分类下小组数目			foreach ($topic as $k=>$v)			{				$this->topic->update(array('replies' => -intval(count($v))), $k, true);			}		}		$this->addItem($result);		$this->output();	}		/**	 * 方法不存在的时候调用的方法	 */	public function none()	{		$this->errorOutput('调用的方法不存在');	}}$out = new topicUpdateApi();$action = $_INPUT['a'];if (!method_exists($out,$action)){	$action = 'none';}$out->$action();