<?php/**************************************************************************** LivSNS 0.1* (C)2004-2010 HOGE Software.** $Id: create.php 12691 2012-10-19 09:30:41Z daixin $***************************************************************************/define('ROOT_DIR', '../../');require(ROOT_DIR . 'global.php');class apply extends appCommonFrm{		function __construct()	{		parent::__construct();		require_once  'lib/activity.class.php';		$this->libactivity = new activityLib();		include_once (ROOT_PATH . 'lib/class/team.class.php');		$this->team = new team();	}		public function checkUserExit()	{		//$this->user = array('user_id'=>123456,'user_name' => dai888);		if(!$this->user['user_id'])		{			$this->errorOutput("用户没有登录");		}		return array('user_id'=>$this->user['user_id'],'user_name' => $this->user['user_name']);	}	//参数获取	public function getData()	{		$data = array();		$data = $this->checkUserExit();		//id		if($this->input['id'])		{			$data['id'] = trim($this->input['id']);		}		//活动		$data['action_id'] = trim($this->input['action_id']);		if(!$data['action_id'] || !is_numeric($data['action_id']))		{			$this->errorOutput("你申请的活动id参数不合法");		}		//申请人级别		if($this->input['levl'])		{			$data['levl'] = trim(urldecode($this->input['levl']));		}		$joinData = $this->libactivity->get('activity', 'start_time,end_time,need_info,need_num,need_pay,yet_join,team_id', array('action_id'=>$data['action_id'],'state'=>1), 0, 1, array());		if(!$joinData)		{			$this->errorOutput("你申请的活动已关闭或者不存在");		}		if($joinData['start_time'] > TIMENOW)		{			$this->errorOutput("你申请的活动报名尚未开始");		}		else if($joinData['end_time'] < TIMENOW)		{			$this->errorOutput("你申请的活动报名已经结束");		}		else 		{			//TODO		}		if($joinData['need_info'])		{			$limintData = array();			$limintData = explode(',', $joinData['need_info']);			if(is_array($limintData))			{				foreach($limintData as $k => $v )				{					if(isset($this->input[$v]))					{						$data[$v] = trim(urldecode($this->input[$v]));					}					else 					{						$this->errorOutput("你填写的资料信息不完整");					}				}			}		}		if(!$data['part_num'])		{			$data['part_num'] = 1;		}		if($joinData['need_num'])		{			if($joinData['need_num'] < $joinData['yet_join'] + $data['part_num'])			{				$this->errorOutput("你填写的人数超过剩余可报名人数大小");			}		}		$data['team_id'] = $joinData['team_id'];		return $data;	}		//判定用户与活动的关系	public function findUserWithActivity()	{		$data['action_id'] = urldecode(trim($this->input['action_id']));		$data['user_id'] = trim($this->input['user_id']);		$id = explode(',', $data['action_id']);		$result = array();		$result = $this->libactivity->get('activity_apply', 'action_id,count(id) as total', $data, 0, -1, array(), '', array('action_id'=>'','user_id'=>''));		if($result)		{			foreach($result as $k=>$v)			{				$ids[$v['action_id']] = $v['action_id'];				$this->addItem_withkey($v['action_id'], $v['total']);			}			$id = array_diff($id, $ids);		}		if($id)		{			foreach($id as $k=>$v)			{				$this->addItem_withkey($v, 0);			}		}		$this->output();	}		//创建	public function create()	{		$data = array();		//加载数据		$data = $this->getData();				//加载原始数据		$rawData = $this->libactivity->get('activity_apply','id,apply_status', array('user_id'=>$data['user_id'],'action_id'=>$data['action_id'],'state'=>1), 0, 1, array());		$result = $this->team->get_permission($data['team_id'], $data['user_id'], 'ADD_ACTIVITY');		if(!$result['permission'])		{			//$this->errorOutput("你没有权限操作");		}		//加载创建时间		$data['apply_time'] = TIMENOW;		//来源ip		$data['from_ip'] = hg_getip();		//来源部分		$data['app_name'] = $this->user['display_name'];		//来源客户端		$data['client'] = $_SERVER['HTTP_USER_AGENT'];				//有效的		$data['state'] = 1;		unset($data['team_id']);		if(!$rawData)		{			//加载审核状态			$data['apply_status'] = 0;			$result = $this->libactivity->insert('activity_apply', $data);			if($result)			{				//$this->libactivity->updateData($data['action_id'], array('apply_num'=>$data['part_num'],'yet_join'=>$data['part_num']), "+");				$this->libactivity->update('activity', array('apply_num'=>$data['part_num'],'yet_join'=>1), array('action_id'=>$data['action_id']),array('apply_num'=>$data['part_num'],'yet_join'=>$data['part_num']) );			}			$result = $data['apply_status'];		}		else 		{			if($this->libactivity->update('activity_apply', $data, array('id'=>$rawData['id'])))			{				$result = $rawData['apply_status'];			}		}		$action_arr = $this->libactivity->get('activity', 'user_id, action_name', array('action_id'=>$data['action_id']), 0,1, array());		//发送通知		include_once ROOT_PATH . '/lib/class/notify.class.php';		$notify = new notify();		$send_arr = array();		$send_arr[] = array(			'from_id' => 0,			'to_id' => $action_arr['user_id'],			'content' => '您的"' . $action_arr['action_name'] . '"行动有人报名！',			'page_link' => 'action.php?a=userList&action_id=' . $data['action_id'],			'link_text' => '去看看'		);		if ($send_arr)		{			$notify->notify_send(json_encode($send_arr), 0);		}		$this->setXmlNode('activity_apply', 'create');		$this->addItem_withkey('apply_status', $result);		$this->output();	}		//更新数据	public function update()	{		//TODO	}	//取消申请	public function delete()	{		$data = $this->getData();				if(!$data['action_id'] || !is_numeric($data['action_id']))		{			$this->errorOutput("你搜索得活动id参数不合法");		}		$rawData = $this->libactivity->get('activity_apply','id,apply_status,part_num', array('user_id'=>$data['user_id'],'action_id'=>$data['action_id'],'state'=>1), 0, 1, array());		if(!$rawData)		{			$this->errorOutput("你搜索得数据不存在");		}		$result = $this->team->get_permission($data['team_id'], $data['user_id'], 'ADD_ACTIVITY');		if(!$result['permission'])		{			$this->errorOutput("你没有权限操作");		}		//关闭		$data['state'] = 0;		$result = $this->libactivity->deteleActivityApply($data);		if($result)		{			$arr = array('apply_num'=> "-" . $rawData['part_num']);			if($rawData['0']['apply_status'] == 0 || $rawData['0']['apply_status'] == 2)			{				$arr['yet_join'] = "-1";			}			//$this->libactivity->updateData($data['action_id'], $arr, "-");			$this->libactivity->update('activity', $arr, array('action_id'=>$data['action_id']), $arr);		}		$this->setXmlNode('activity_apply', 'delete');		$this->addItem_withkey(array('state'=>$result));		$this->output();	}	//显示多条数据	public function show()	{		$offset = isset($this->input['offset']) ? intval($this->input['offset']) : 0;		$count = isset($this->input['count']) ? intval($this->input['count']) : 10;				//获取选取条件		$data = array();		$data = $this->getCondition();				$total = $this->libactivity->get('activity_apply','count(id) as total', $data, 0, 1, array());		$this->setXmlNode('activity_apply', 'show');		$this->addItem_withkey('total',$total);		if($total)		{			$result = $this->libactivity->get('activity_apply','*', $data, $offset, $count,array('levl'=>'desc','apply_time'=>'desc'));						$this->addItem_withkey('data',$result);			$ids = $sp ='';			foreach($result as $k=>$v)			{				$ids .= $sp .$v['user_id'];				$sp =',';			}			$this->addItem_withkey('user_ids',$ids);		}		$this->output();	}	//显示具体某条	public function detail()	{		$offset = isset($this->input['offset']) ? intval($this->input['offset']) : 0;		$count = isset($this->input['count']) ? intval($this->input['count']) : 6;				$action_id = trim(urldecode($this->input['action_id']));		if(!$action_id || !is_numeric($action_id))		{			$this->errorOutput("你搜索得活动id参数不合法");		}		//获取选取条件		$data = $this->getCondition();		$rawData = $this->libactivity->get('activity', 'action_id,need_info', array('action_id'=>$action_id,'state'=>1), 0 ,1, array());		if(!$rawData['action_id'])		{			$this->errorOutput("你搜索得活动id参数不存在");		}		$total = $this->libactivity->get('activity_apply', 'count(id) as toal', array('action_id'=>$action_id,'state'=>1), 0 , 1, array('apply_time'=>'desc'));		$this->addItem_withkey('total',$total);		if($total)		{			$limit = 'user_id,action_id,apply_status,apply_time,levl,client,from_ip';						if($rawData['need_info'])			{				 $limit .=  "," . $rawData['need_info'];			}						$result = $this->libactivity->get('activity_apply', $limit, array('action_id'=>$action_id,'state'=>1), 0 , -1, array('apply_time'=>'desc'));			$this->setXmlNode('activity_apply', 'detail');			if(!$result)			{				$this->addItem_withkey('data',array());			}			else			{				$user_ids = $sp = '';				foreach ($result as $k=>$v)				{					$user_ids .= $sp . $v['user_id'];					$sp = ',';				}				$this->addItem_withkey('data', $result);				if($user_ids)				{					$this->addItem_withkey('user_ids', $user_ids);				}			}		}		$this->output();	}	/**	 * 随机数个某个活动参与人数	 * Enter description here ...	 */	public function showRodom()	{		$action_id = trim(urldecode($this->input['action_id']));		if(!$action_id || !is_numeric($action_id))		{			$this->errorOutput("你搜索得活动id参数不合法");		}		$count = isset($this->input['count']) ? intval($this->input['count']) : 6;				//获取选取条件		$data = $this->getCondition();		$rawData = $this->libactivity->get('activity', 'action_id,need_info', array('action_id'=>$action_id,'state'=>1), 0 ,1, array());		if(!$rawData['action_id'])		{			$this->errorOutput("你搜索得活动id参数不存在");		}		$user_id = ($this->user['user_id']) ? $this->user['user_id'] : 0;		$total =  $this->libactivity->get('activity_apply', 'count(id) as total', array('action_id'=>$action_id,'state'=>1), 0, 1, array('RAND()'=>''),array('user_id'=>'!='.$user_id));		$this->addItem_withkey('total', $total);		if($total)		{			$limit = 'user_id,action_id,apply_status,apply_time,levl,client,from_ip,app_name';						if($rawData['need_info'])			{				 $limit .=  "," . $rawData['need_info'];			}						$result = $this->libactivity->get('activity_apply', $limit, array('action_id'=>$action_id,'state'=>1), 0, 6, array('RAND()'=>''),array('user_id'=>'!='.$user_id));			$this->setXmlNode('activity_apply', 'showRodom');			if(!$result)			{				$this->addItem_withkey('info',array());			}			else			{				$user_ids = $sp ='';				foreach ($result as $k=>$v)				{					$user_ids .= $sp . $v['user_id'];					$sp = ',';					}				$this->addItem_withkey('data', $result);				if($user_ids)				{					$this->addItem_withkey('user_ids', $user_ids);				}			}		}		$this->output();	}	//某个条件下的条数条数	public function count()	{		//获取选取条件		$data =  array();		$data = $this->getCondition();		$result = $this->libactivity->getActivityApply('count(id) as total', $data);		$this->setXmlNode('activity_apply', 'count');		$this->addItem_withkey('total',$result['total']);		$this->output();	}	//	public function getCondition ()	{		$data = array ();		//状态		if(isset($this->input['state']))		{			$state = trim($this->input['state']);			switch($state)			{				case 3://全部					break;				case 2:					$data['state'] = 0;;					break;				default:					$data['state'] = 1;					break;			}		}		else 		{			$data['state'] = 1;		}		$apply_status = trim($this->input['apply_status']);		switch($apply_status)		{			case 4://全部				break;			case 1:			case 3:				$data['apply_status'] = $apply_status;				break;			default:				$data['apply_status'] = '0,2';				break;		}		if(isset($this->input['action_id']))		{			$data['action_id'] = trim($this->input['action_id']);		}		if(isset($this->input['levl']))		{			switch($this->input['levl'])			{				case 1:				case 2:					$data['levl'] = $this->input['levl'];					break;				default:					break;			}		}		return $data;	}	//失误方法	function unknow()	{		$this->errorOutput("你搜索得方法不存在");	}	function __destruct()	{		parent::__destruct();		unset($this->libactivity);		unset($this->team);	}	}$out = new apply();$action = $_REQUEST['a'];if (!method_exists($out,$action)){	$action = 'unknow';}$out->$action();