<?php/**************************************************************************** LivSNS 0.1* (C)2004-2010 HOGE Software.** $Id: program_record_update.php 4728 2011-10-12 10:38:02Z lijiaying $***************************************************************************/require('global.php');define('MOD_UNIQUEID','program_library');//模块标识class libraryTypeUpdateApi extends adminUpdateBase{	private $obj;		public function __construct()	{		parent::__construct();		include(CUR_CONF_PATH . 'lib/library.class.php');		$this->obj = new library();	}	public function __destruct()	{		parent::__destruct();		unset($this->obj);	}		/**	 * 创建类型	 */	public function create()	{		$data = $this->filter_data();		//检测名称是否已存在		$check_result = $this->obj->check_type_exists($data['name']);		if ($check_result) $this->errorOutput(EXISTS);		$property = $data['property'];		unset($data['property']);		$result = $this->obj->create_type($data);		//创建类型和属性的关系		if ($property)		{			$result = $this->obj->create_relation($result['id'], $property);		}		$this->addItem($result);		$this->output();	}		/**	 * 修改类型	 */	public function update()	{		$type_id = isset($this->input['tid']) ? intval($this->input['tid']) : '';		if (empty($type_id)) $this->errorOutput(NOID);		//检测该类型是否存在		$type_info = $this->obj->detail_type($type_id);		if (!$type_info) $this->errorOutput(OBJECT_NULL);		//获取处理后的提交数据		$data = $this->filter_data();		$verify_data = array();		if ($type_info['name'] != $data['name'])		{			//验证名称是否存在			$check_result = $this->obj->check_type_exists($data['name']);			if ($check_result) $this->errorOutput(EXISTS);			$verify_data['name'] = $data['name'];		}		//修改类型对应的属性		if (!$data['property'])		{			if ($type_info['property'])			{				$this->obj->drop_relation(array('type_id' => $type_id));			}		}		else		{			if (!$type_info['property'])			{				$this->obj->create_relation($type_id, $data['property']);			}			else			{				$property_ids = array();				$add_ids = array();				$del_ids = array();				foreach ($type_info['property'] as $val)				{					$property_ids[] = $val['id'];					if (!in_array($val['id'], $data['property']))					{						$del_ids[] = $val['id'];					}				}				foreach ($data['property'] as $k=>$v)				{					if (!in_array($v, $property_ids))					{						$add_ids[] = $v;					}				}				//TODO			}		}		if ($verify_data)		{			$result = $this->obj->update_type($verify_data, $type_id);			$this->addItem($result);		}		$this->output();	}		/**	 * 删除类型	 */	public function delete()	{		$type_id = isset($this->input['tid']) ? trim(urldecode($this->input['tid'])) : '';		if (empty($type_id)) $this->errorOutput(NOID);		if (is_numeric($type_id)) $type_id = intval($type_id);		//删除类型与属性的关系		$this->obj->drop_relation(array('type_id' => $type_id));		//删除类型		$result = $this->obj->delete_type($type_id);		$this->addItem($result);		$this->output();	}		/**	 * 过滤类型提交数据	 */	private function filter_data()	{		$type_name = isset($this->input['name']) ? trim(urldecode($this->input['name'])) : '';		$property = isset($this->input['property']) ? trim(urldecode($this->input['property'])) : '';		$data = array();		if (empty($type_name))		{			$this->errorOutput(OBJECT_NULL);		}		$data['name'] = $type_name;		if ($property)		{			$property_ids = explode(',', $property);			$property_ids = array_filter($property_ids);			$property_ids = array_map('trimSpace', $property_ids);			$data['property'] = $property_ids;		}		return $data;	}		/**	 * 调用不存在的方法	 */	public function none()	{		$this->errorOutput('调用的方法不存在');	}		public function audit()	{			}		public function sort()	{			}		public function publish()	{			}}$out = new libraryTypeUpdateApi();$action = $_INPUT['a'];if (!method_exists($out,$action)){	$action = 'none';}$out->$action();function trimSpace($val){	return trim($val);}?>