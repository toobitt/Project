<?php/**************************************************************************** $Id: comment.class.php 17481 2013-07-05 09:36:46Z yaojian $***************************************************************************/class comment extends InitFrm{	public function __construct()	{		parent::__construct();	}	public function __destruct()	{		parent::__destruct();	}		/**	 * 获取评论数据	 * @param Array $data	 */	public function show($data)	{		if (!is_array($data))		{			return false;		}		$sql = 'SELECT c.*, p.photo_name FROM ' . DB_PREFIX . 'comment c LEFT JOIN ' . DB_PREFIX . 'photos p 		ON c.photo_id = p.id WHERE c.isdrop = 0 AND p.isdrop = 0';		if ($data['flag'])		{			$user_id = isset($this->user['user_id']) ? intval($this->user['user_id']) : 0;			if ($user_id)			{				$sql .= ' AND (c.state = 1 OR c.user_id = ' . $user_id . ')';			}			else			{				$sql .= ' AND c.state = 1';			}		}		if ($data['condition']) $sql .= $this->get_condition($data['condition']);		if ($data['count'] != -1)		{			$data_limit = ' LIMIT ' . $data['offset'] . ' , ' . $data['count'];		}		if ($data_limit) $sql .= $data_limit;		$query = $this->db->query($sql);		$info = array();		while ($rows = $this->db->fetch_array($query))		{			if ($rows['content'])			{				$rows['content'] = html_entity_decode($rows['content']);			}			$info[] = $rows;		}		return $info;	}		/**	 * 获取评论总数	 * @param Array $data 查询条件	 */	public function count($data = array(), $flag = false)	{		$sql = 'SELECT COUNT(id) AS total FROM ' . DB_PREFIX . 'comment WHERE isdrop = 0';		if ($flag)		{			$user_id = isset($this->user['user_id']) ? intval($this->user['user_id']) : 0;			if ($user_id)			{				$sql .= ' AND (state = 1 OR user_id = ' . $user_id . ')';			}			else			{				$sql .= ' AND state = 1';			}		}		if ($data) $sql .= $this->get_condition($data);		return $this->db->query_first($sql);	}		/**	 * 获取单个评论数据	 * @param String $table 查询表名	 * @param Array $data 查询条件	 * @param String $fields 读取的字段	 */	public function detail($table, $data, $fields = '*')	{		if (empty($table) || !is_array($data))		{			return false;		}		$sql = 'SELECT ' . $fields . ' FROM ' . DB_PREFIX . $table . ' WHERE isdrop = 0';		foreach ($data as $k => $v)		{			if (is_int($v) || is_float($v))			{				$sql .= ' AND ' . $k . ' = ' . $v;			}			elseif (is_string($v))			{				$sql .= ' AND ' . $k . ' = "' . $v . '"';			}		}		return $this->db->query_first($sql);	}		/**	 * 创建数据	 * @param Array $data 数据	 * @param String $pk 主键	 */	public function create($data, $pk = 'id')	{		if (!is_array($data))		{			return false;		}		$fields = '';		foreach ($data as $k => $v)		{			if (is_string($v))			{				$fields .= $k . "='" . $v . "',";			}			elseif (is_int($v) || is_float($v))			{				$fields .= $k . '=' . $v . ',';			}		}		$fields = rtrim($fields, ',');		$sql = 'INSERT INTO ' . DB_PREFIX . 'comment SET ' . $fields;		$this->db->query($sql);		$data[$pk] = $this->db->insert_id();		return $data;	}		/**	 * 更新数据	 * @param String $table 更新的表名	 * @param Array $data 更新的数据	 * @param Array $idsArr 更新的条件	 * @param Boolean $flag	 */	public function update($table, $data, $idsArr, $flag = false)	{		if (empty($table) || !is_array($data) || !is_array($idsArr)) 		{			return false;		}		$fields = '';		foreach ($data as $k => $v)		{			if ($flag)			{				$v = $v > 0 ? '+' . $v : $v;				$fields .= $k . '=' . $k . $v . ',';			}			else			{				if (is_string($v))				{					$fields .= $k . "='" . $v . "',";				}				elseif (is_int($v) || is_float($v))				{					$fields .= $k . '=' . $v . ',';				}			}		}		$fields = rtrim($fields, ',');		$sql = 'UPDATE ' . DB_PREFIX . $table . ' SET ' . $fields . ' WHERE 1';		if ($idsArr)		{			foreach ($idsArr as $key => $val)			{				if (is_int($val) || is_float($val))				{					$sql .= ' AND ' . $key . ' = ' . $val;				}				elseif (is_string($val))				{					$sql .= ' AND ' . $key . ' in (' . $val . ')';				}			}		}		return $this->db->query($sql);	}		/**	 * 删除数据	 * @param Array $data 删除条件	 */	public function delete($data)	{		if (!is_array($data))		{			return false;		}		$sql = 'DELETE FROM ' . DB_PREFIX . 'comment WHERE 1';		foreach ($data as $k => $v)		{			if (is_int($v) || is_float($v))			{				$sql .= ' AND ' . $k . ' = ' . $v;			}			elseif (is_string($v))			{				$sql .= ' AND ' . $k . ' IN (' . $v . ')';			}		}		return $this->db->query($sql);	}		/**	 * 获取查询条件	 * @param Array $data	 */	private function get_condition($data)	{		$condition = '';				//查询的关键字		if ($data['keyword'])		{			$condition .= " AND c.content LIKE '%" . $data['keyword'] . "%'";		}				//根据ID获取数据		if ($data['id'])		{			if (is_int($data['id']))			{				$condition .= " AND c.id = " . $data['id'];			}			elseif (is_string($data['id']))			{				$condition .= " AND c.id IN (" . $data['id'] . ")";			}		}				//查看自己的数据		if ($data['user_id'])		{			$condition .= " AND c.user_id = " . $data['user_id'];		}				//查看组织内的数据		if ($data['org_id'])		{			$condition .= " AND c.org_id = " . $data['org_id'];		}				//根据照片id获取数据		if ($data['photo_id'])		{			if (is_int($data['photo_id']))			{				$condition .= " AND c.photo_id = " . $data['photo_id'];			}			elseif (is_string($data['photo_id']))			{				$condition .= " AND c.photo_id IN (" . $data['photo_id'] . ")";			}		}				//根据照片id获取数据		if ($data['albums_id'])		{			if (is_int($data['albums_id']))			{				$condition .= " AND c.albums_id = " . $data['albums_id'];			}			elseif (is_string($data['albums_id']))			{				$condition .= " AND c.albums_id IN (" . $data['albums_id'] . ")";			}		}				switch ($data['isbanword'])		{			case 1:				$condition .= "";  //所有状态				break;			case 2:				$condition .= " AND c.isbanword = 0";  //无屏蔽字				break;			case 3:				$condition .= " AND c.isbanword = 1";  //有屏蔽字				break;			default:				break;		}				//查询状态		switch ($data['state'])		{			case 1:				$condition .= "";  //所有状态				break;			case 2:				$condition .= " AND c.state = 0";  //待审核				break;			case 3:				$condition .= " AND c.state = 1";  //已审核				break;			default:				break;		}				if ($data['start_time'])		{			$start_time = is_numeric($data['start_time']) ? intval($data['start_time']) : strtotime($data['start_time']);			$condition .= " AND c.create_time >= " . $start_time;		}				if ($data['end_time'])		{			$end_time = is_numeric($data['end_time']) ? intval($data['end_time']) : strtotime($data['end_time']);			$condition .= " AND c.create_time < " . $end_time;		}				//查询发布的时间        if ($data['date_search'])		{			$today = strtotime(date('Y-m-d'));			$tomorrow = strtotime(date('Y-m-d', TIMENOW+24*3600));			switch ($data['date_search'])			{				case 1://所有时间段					break;				case 2://昨天的数据					$yesterday = strtotime(date('y-m-d', TIMENOW-24*3600));					$condition .= " AND c.create_time > '" . $yesterday . "' AND c.create_time < '" . $today . "'";					break;				case 3://今天的数据					$condition .= " AND c.create_time > '" . $today . "' AND c.create_time < '" . $tomorrow . "'";					break;				case 4://最近3天					$last_threeday = strtotime(date('y-m-d', TIMENOW-2*24*3600));					$condition .= " AND c.create_time > '" . $last_threeday . "' AND c.create_time < '" . $tomorrow . "'";					break;				case 5://最近7天					$last_sevenday = strtotime(date('y-m-d', TIMENOW-6*24*3600));					$condition .= " AND c.create_time > '" . $last_sevenday . "' AND c.create_time < '" . $tomorrow . "'";					break;				default://所有时间段					break;			}		}				//排序		$sort = ' ORDER BY ';		if ($data['order'] && is_array($data['order']))		{			foreach ($data['order'] as $k => $v)			{				$sort .= $k . ' ' . $v . ', ';			}			$sort = rtrim($sort, ', ');		}		else		{			$sort .= 'c.id DESC';		}		$condition = $condition . $sort;		return $condition;	}}?>