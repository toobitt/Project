<?php/**************************************************************************** LivSNS 0.1* (C)2004-2010 HOGE Software.** $Id: photos.php 7586 2013-07-05 09:40:56Z yaojian $***************************************************************************/require_once './global.php';include_once '../lib/Core.class.php';include_once CUR_CONF_PATH . 'lib/photo.class.php';include_once CUR_CONF_PATH . 'lib/albums_app.class.php';define('MOD_UNIQUEID', 'photos');  //模块标识class photosApi extends appCommonFrm{	private $api;		public function __construct()	{		$this -> mPrmsMethods = array('show' => '查看', 'update' => '管理', 'delete' => '删除', 'audit' => '审核', '_node' => array('name' => '相册分类', 'filename' => 'category.php', 'node_uniqueid' => 'category', ));		parent::__construct();		$this->api = new photo();        $this->obj = new Core();	}	public function __destruct()	{		parent::__destruct();		unset($this->api);	}		/**	 * 获取照片数据	 */	public function show()	{		if ($this->user['group_type'] > MAX_ADMIN_TYPE)		{			//权限验证			$this->verify_content_prms();		}		$offset = isset($this->input['offset']) ? intval($this->input['offset']) : 0;		$count = isset($this->input['count']) ? intval($this->input['count']) : 20;		$condition = $this->filter_data();		$data = array(			'offset' => $offset,			'count' => $count,			'condition' => $condition		);		$photos_info = $this->api->show($data);		$this->setXmlNode('photos_info', 'photos');		$return = array(			'photos' => $photos_info		);		//获取客户端		$client_info = $this->api->get_client();		if ($client_info)		{			$return['clients'] = $client_info;		}		$this->addItem($return);		$this->output();	}		/**	 * 相册下的照片	 */	public function albums_photos()	{		if ($this->user['group_type'] > MAX_ADMIN_TYPE)		{			//权限验证			$this->verify_content_prms(array('_action' => 'show'));		}		$offset = isset($this->input['offset']) ? intval($this->input['offset']) : 0;		$count = isset($this->input['count']) ? intval($this->input['count']) : 20;		$condition = $this->filter_data();		$data = array(			'offset' => $offset,			'count' => $count,			'condition' => $condition		);		$photos_info = $this->api->show($data);		$albums_info = $this->api->detail('albums', array('id' => $condition['albums_id']));		//获取用户信息		$member_info = $this->getMemberInfo($albums_info['user_id']);		if ($member_info[$albums_info['user_id']])		{		    $albums_info['user'] = $member_info[$albums_info['user_id']];		}		$albums_info['albums_cover'] = unserialize($albums_info['albums_cover']);		$albums_info['photos'] = $photos_info;		$this->addItem($albums_info);		$this->output();	}		/**	 * 获取照片总数	 */	public function count()	{		$condition = $this->filter_data();		$data = array(			'condition' => $condition		);		$info = $this->api->count($data);		echo json_encode($info);	}		/**	 * 获取单个照片数据	 */	public function detail()	{		if ($this->user['group_type'] > MAX_ADMIN_TYPE)		{			//权限验证			$this->verify_content_prms(array('_action' => 'show'));		}		$id = intval($this->input['id']);		if ($id <= 0) $this->errorOutput(PARAM_WRONG);		$photos_info = $this->api->detail('photos', array('id' => $id));		if ($photos_info)		{			//获取用户头像信息		    $member_info = $this->getMemberInfo($photos_info['user_id']);		    if ($member_info[$photos_info['user_id']])		    {		        $photos_info['user'] = $member_info[$photos_info['user_id']];		    }			$this->addItem($photos_info);		}		$this->output();	}	    public function certify()    {        if(!$this->input['id'])        {            $this->errorOutput(NO_ID);        }                $id = intval($this->input['id']);        if(!isset($this->input['state']))        {            $this->errorOutput(NO_STATE);        }                if($this->input['state']==1)        {            $params['state'] = 1;            $re['status'] = 1;        }        if($this->input['state']==0)        {            $params['state'] = 0;            $re['status'] = 2;        }        $re['id'] = $id;        $result = $this->obj->update('photos',$params," where id=".$id);        $this->addItem($re);        $this->output();            }    	/**	 * 审核照片操作	 */	public function audit()	{		$id = trim(urldecode($this->input['id']));		$id_arr = explode(',', $id);		$ids = array_filter($id_arr, 'filter_arr');		$id = implode(',', $ids);		if (empty($id)) $this->errorOutput(PARAM_WRONG);		//查询未审核		$back_info = $this->api->show(array(			'count' => -1,			'condition' => array(				'state' => 2,				'id' => $id			)		));		if ($back_info)		{			$albums_id = $albums = $back_id = array();			foreach ($back_info as $v)			{				$back_id[$v['id']] = $v['id'];				$albums[$v['albums_id']][] = $v['id'];				$albums_id[$v['albums_id']] = $v['albums_id'];			}			//权限验证			if ($this->user['group_type'] > MAX_ADMIN_TYPE)			{				$albums_id = implode(',', $albums_id);				$this->verify_prms($albums_id, 'audit');			}			$back_id = implode(',', $back_id);			$result = $this->api->update('photos', array('state' => 1), array('id' => $back_id));			//更新数据			foreach ($albums as $k => $v)			{	        	$this->api->update('albums', array('photos_num' => count($v)), array('id' => $k), true);			}			$this->addItem($result);		}		$this->output();	}		//计划任务审核	public function planAudit()	{		$start_time = intval($this->input['start_time']);		$end_time = intval($this->input['end_time']);		$status = intval($this->input['status']);		$state = '';		if ($start_time && $end_time && $status)		{			switch ($status)			{				case 1:$state = 0;break;				case 2:$state = 1;break;				case 3:$state = 0;break;			}			$back_info = $this->api->show(array(				'count' => -1,				'condition' => array(					'state' => 2,					'isbanword' => 2,					'start_time' => $start_time,					'end_time' => $end_time				)			));			if ($back_info && $state && HAS_PIC)			{				$albums = $back_id = array();				foreach ($back_info as $v)				{					$back_id[$v['id']] = $v['id'];					$albums[$v['albums_id']][] = $v['id'];				}				$back_id = implode(',', $back_id);				$this->api->update('photos', array('state' => $state), array('id' => $back_id));				//更新数据				foreach ($albums as $k => $v)				{		        	$this->api->update('albums', array('photos_num' => count($v)), array('id' => $k), true);				}			}		}		$this->addItem(true);		$this->output();	}		/**	 * 删除照片数据	 */	public function delete()	{		$id = trim(urldecode($this->input['id']));		$id_arr = explode(',', $id);		$ids = array_filter($id_arr, 'filter_arr');		$id = implode(',', $ids);		if (empty($id)) $this->errorOutput(PARAM_WRONG);		$photos_info = $this->api->show(array(			'count' => -1,			'condition' => array(				'id' => $id			)		));		if (!$photos_info) $this->errorOutput(PARAM_WRONG);		$albums_id = $total_ids = $audit_ids = $photo_audit = array();		foreach ($photos_info as $v)		{			$albums_id[$v['albums_id']] = $v['albums_id'];			$total_ids[$v['albums_id']][] = $v['id'];			if ($v['state'] == 1)			{				$audit_ids[$v['id']] = $v['id']; //已审核的照片				$photo_audit[$v['albums_id']][] = $v['id'];			}		}		//权限验证		if ($this->user['group_type'] > MAX_ADMIN_TYPE)		{			$albums_id = implode(',', $albums_id);			$this->verify_prms($albums_id, 'delete');		}		if ($audit_ids)		{			$audit_ids = implode(',', $audit_ids);			//查询评论			include_once CUR_CONF_PATH . 'lib/comment.class.php';			$commentApi = new comment();			$comment_info = $commentApi->show(array(				'count' => -1,				'condition' => array(					'photo_id' => $audit_ids				)			));			if ($comment_info)			{				$albums_comment = $audit_comment = array();				foreach ($comment_info as $comment)				{					$albums_comment[$comment['albums_id']][] = $comment['id'];					if ($comment['state'] == 1)					{						$audit_comment[$comment['albums_id']][] = $comment['id'];					}				}			}			//删除照片下的评论			$this->api->update('comment', array('isdrop' => 1), array('photo_id' => $audit_ids));			//删除照片下的赞			$this->api->update('praise', array('isdrop' => 1), array('photo_id' => $audit_ids));		}		//删除照片		$result = $this->api->update('photos', array('isdrop' => 1), array('id' => $id));		//更新数据		foreach ($total_ids as $k => $v)		{			$this->api->update('albums', array('photos_total' => -count($v)), array('id' => $k), true);		}		if ($photo_audit)		{			foreach ($photo_audit as $k => $v)			{				$this->api->update('albums', array('photos_num' => -count($v)), array('id' => $k), true);			}		}		if ($albums_comment)		{			foreach ($albums_comment as $k => $v)			{				$this->api->update('albums', array('comment_total' => -count($v)), array('id' => $k), true);			}		}		if ($audit_comment)		{			foreach ($audit_comment as $k => $v)			{				$this->api->update('albums', array('comment_num' => -count($v)), array('id' => $k), true);			}		}		$this->addItem($result);		$this->output();	}		/**	 * 设置置顶、推荐等操作	 */	public function setting_top()	{		$id = trim(urldecode($this->input['id']));		$id_arr = explode(',', $id);		$ids = array_filter($id_arr, 'filter_arr');		$id = implode(',', $ids);		if (empty($id)) $this->errorOutput(PARAM_WRONG);		$type = trim(urldecode($this->input['type']));		if (!in_array($type, array_keys($this->settings['type'])))		{			$this->errorOutput(PARAM_WRONG);		}		$level = $this->settings['type'][$type]['value'];		$photos_info = $this->api->show(array(			'count' => -1,			'condition' => array(				'id' => $id			)		));		if (!$photos_info) $this->errorOutput(PARAM_WRONG);		$albums_id = $validate = array();		foreach ($photos_info as $v)		{			if (!($v['level'] & $level))			{				$validate[$v['id']] = $v['id'];			}			$albums_id[$v['albums_id']] = $v['albums_id'];		}		//权限验证		if ($this->user['group_type'] > MAX_ADMIN_TYPE)		{			$albums_id = implode(',', $albums_id);			$this->verify_prms($albums_id, 'update');		}		if ($validate)		{			$ids = implode(',', $validate);			$result = $this->api->update('photos', array('level' => $level), array('id' => $ids), true);			$this->addItem($result);		}		$this->output();	}		//权限验证	private function verify_prms($albums_id, $_action = '')	{		$albumsApi = new albums_app();		$albums_info = $albumsApi->show(array('count' => -1, 'condition' => array('id' => $albums_id)));		$cate_id = array();		if ($albums_info)		{			foreach ($albums_info as $v)			{				if ($v['cate_id']) $cate_id[$v['cate_id']][] = $v['id'];			}		}		$sort_id = implode(',', $cate_id);		if ($sort_id)		{			$category_info = $albumsApi->get_category($sort_id);			$sort_ids = array();			if ($category_info)			{				foreach ($category_info as $v)				{					$sort_ids[$v['id']] = $v['parents'];				}			}			foreach ($albums_info as $v)			{				if ($v['cate_id'])				{					$v['nodes'][$v['cate_id']] = $sort_ids[$v['cate_id']];				}				if ($_action) $v['_action'] = $_action;				$this->verify_content_prms($v);			}		}		else		{			if ($_action) $this->verify_content_prms(array('_action' => $_action));		}	}		/**	 * 过滤查询数据	 */	private function filter_data()	{		$name = isset($this->input['k']) ? trim(urldecode($this->input['k'])) : '';		$time = isset($this->input['date_search']) ? intval($this->input['date_search']) : '';		$start_time = trim($this->input['start_time']);		$end_time = trim($this->input['end_time']);		$state = isset($this->input['status']) ? intval($this->input['status']) : '';		$type = isset($this->input['type']) ? trim(urldecode($this->input['type'])) : '';		$albums_id = isset($this->input['albums_id']) ? intval($this->input['albums_id']) : 0;		$client = isset($this->input['client']) ? intval($this->input['client']) : 0;		$cate_id = intval($this->input['_id']);		$data = array(			'keyword' => $name,			'date_search' => $time,			'start_time' => $start_time,			'end_time' => $end_time,			'state' => $state,			'type' => $type,			'albums_id' => $albums_id,			'client' => $client		);		//非管理员判断权限		if ($this->user['group_type'] > MAX_ADMIN_TYPE)		{			if ($authnode = $this->user['prms']['app_prms'][APP_UNIQUEID]['nodes'])			{				$albumsApi = new albums_app();				$authnode_str = $authnode ? implode(',', $authnode) : '';				if ($authnode_str === '0')				{					$cate_id = $authnode_str;				}				if ($authnode_str)				{					$authnode_str = $cate_id ? $authnode_str .',' . $cate_id : $authnode_str;					$info = $albumsApi->get_category($authnode_str);					$authnode_array = array();					foreach ($info as $v)					{						$authnode_array[$v['id']] = explode(',', $v['childs']);					}					$authnode_str = '';					foreach ($authnode_array as $node_id => $n)					{						if ($node_id == $cate_id)						{							$node_father_array = $n;							if (!in_array($cate_id, $authnode)) continue;						}						$authnode_str .= implode(',', $n) . ',';					}					$authnode_str = true ? $authnode_str . '0' : trim($authnode_str, ',');					if (!$cate_id)					{						$cate_id = $authnode_str;					}					else					{						$authnode_array = explode(',', $authnode_str);						if (!in_array($cate_id, $authnode_array))						{							if (!$auth_child_node_array = array_intersect($node_father_array, $authnode_array))							{								$this->errorOutput(NO_PRIVILEGE);							}							$cate_id = implode(',', $auth_child_node_array);						}					}				}								$albums_info = $albumsApi->show(array('count' => -1, 'condition' => array('cate_id' => $cate_id)));				if ($albums_info && !$albums_id)				{					$albums_id = array();					foreach ($albums_info as $v)					{						$albums_id[$v['id']] = $v['id'];					}					$data['albums_id'] = implode(',', $albums_id);				}			}		}		return $data;	}		/**	 * 获取会员信息	 * @param Int|String $user_id	 */	private function getMemberInfo($user_id)	{	    if ($this->input['latest'])	    {	        //新会员	        include_once ROOT_PATH . 'lib/class/members.class.php';    		$newMember = new members();    		$member_info = $newMember->get_members($user_id);    		if ($member_info)    		{    		    $memberInfo = array();    		    foreach ($member_info as $v)    		    {    		        $memberInfo[$v['member_id']]['id'] = $v['member_id'];    		        $memberInfo[$v['member_id']]['nick_name'] = $v['member_name'];    		        $memberInfo[$v['member_id']]['avatar'] = $v['avatar'];    		    }    		}	    }	    else	    {	        include_once ROOT_PATH . 'lib/class/member.class.php';    		$member = new member();    		$member_info = $member->getMemberById($user_id);    		$member_info = $member_info[0];    		if ($member_info)    		{    		    $memberInfo = array();    		    foreach ($member_info as $k => $v)    		    {    		        $memberInfo[$k]['id'] = $v['id'];    		        $memberInfo[$k]['nick_name'] = $v['nick_name'];    		        $memberInfo[$k]['avatar'] = $v['avatar'];    		    }    		}	    }	    return $memberInfo;	}}function filter_arr(&$value){	$value = intval($value);	return $value <= 0 ? false : true;}$out = new photosApi();$action = $_INPUT['a'];if (!method_exists($out,$action)){	$action = 'show';}$out->$action();?>