<?php/*************************************************************************** * LivSNS 0.1 * (C)2004-2010 HOGE Software. * * $Id: photos.php 7586 2013-07-05 09:40:56Z yaojian $ ***************************************************************************/require_once './global.php';include_once CUR_CONF_PATH . 'lib/photo.class.php';include_once CUR_CONF_PATH . 'lib/Core.class.php';define('MOD_UNIQUEID', 'photos');  //模块标识class photosApi extends appCommonFrm{	private $api;	public function __construct()	{		parent::__construct();		$this->core = new Core();		$this->api = new photo();	}	public function __destruct()	{		parent::__destruct();		unset($this->api);	}	/**	 * 获取照片数据	 */	public function show()	{		$offset = isset($this->input['offset']) ? intval($this->input['offset']) : 0;		$count = isset($this->input['count']) ? intval($this->input['count']) : 20;		$condition = $this->filter_data();		$flag = isset($this->input['flag']) ? !!intval($this->input['flag']) : true;		$data = array(			'offset' => $offset,			'count' => $count,			'flag' => $flag,			'condition' => $condition		);		$photos_info = $this->api->show($data);		$this->setXmlNode('photos_info', 'photo');		if ($photos_info)		{			$user_ids = array();			foreach ($photos_info as $photo)			{				$user_ids[$photo['user_id']] = $photo['user_id'];			}			//获取用户头像信息			$user_ids = implode(',', $user_ids);			$member_info = $this->getMemberInfo($user_ids);			foreach ($photos_info as $k => $v)			{				if ($member_info[$v['user_id']])				{					$photos_info[$k]['user'] = $member_info[$v['user_id']];				}				$this->addItem($photos_info[$k]);			}		}		$this->output();	}	/**	 * 获取照片总数	 */	public function count()	{		$condition = $this->filter_data();		$flag = isset($this->input['flag']) ? !!intval($this->input['flag']) : true;		$data = array(			'condition' => $condition,			'flag' => $flag		);		$info = $this->api->count($data);		echo json_encode($info);	}	/**	 * 获取单个照片数据	 */	public function detail()	{		$id = intval($this->input['id']);		if ($id <= 0) $this->errorOutput(PARAM_WRONG);		$photo_info = $this->api->detail('photos', array('id' => $id));		if ($photo_info)		{			//获取用户头像信息			$member_info = $this->getMemberInfo($photo_info['user_id']);			if ($member_info[$photo_info['user_id']])			{				$photo_info['user'] = $member_info[$photo_info['user_id']];				if(is_array($photo_info['user']['avatar']))				{					foreach($photo_info['user']['avatar'] as $key=>$val)					{						$photo_info['user'][$key]= $val;					}				}			}		}		$this->addItem($photo_info);		$this->output();	}	/**	 * 获取某个用户发布的照片	 */	public function user_photos()	{		$offset = isset($this->input['offset']) ? intval($this->input['offset']) : 0;		$count = isset($this->input['count']) ? intval($this->input['count']) : 20;		$user_id = intval($this->input['uid']);		if ($user_id <= 0) $this->errorOutput(PARAM_WRONG);		//获取用户信息		if ($member_info = $this->getMemberInfo($user_id))		{			$user_info = $member_info[$user_id];		}		$flag = $user_id == $this->user['user_id'] ? false : true;		$data = array(			'offset' => $offset,			'count' => $count,			'flag' => $flag,			'user_id' => $user_id		);		$photos_info = $this->api->getPhotosByDate($data);		$user_info['publish'] = $photos_info;		//获取相册封面		$albums_info = $this->api->detail('albums', array('user_id' => $user_id), 'albums_cover');		$user_info['cover'] = unserialize($albums_info['albums_cover']);		$this->addItem($user_info);		$this->output();	}	/**	 * 发布照片	 */	public function create()	{		$user_info = array(			'user_id' => $this->user['user_id'],			'user_name' => $this->user['user_name'],			'org_id' => $this->user['org_id'],			'appid' => $this->user['appid'],			'appname' => $this->user['display_name'],			'create_time' => TIMENOW,			'ip' => hg_getip()		);		if (!$_FILES['Filedata'] || !$this->user['user_name'])		{			$this->errorOutput(FAILED);		}		//上传照片		include_once ROOT_PATH . 'lib/class/material.class.php';		$material = new material();		$pic_info = $material->addMaterial($_FILES);		if (!$pic_info) $this->errorOutput(FAILED);		$pic_brief = isset($this->input['breif']) ? trim($this->input['breif']) : '';		if ($pic_brief) {			//屏蔽字判断			include_once ROOT_PATH . 'lib/class/banword.class.php';			$banword = new banword();			$words = $banword->exists(urlencode($pic_brief));			if ($words)			{				$keywords = array();				foreach ($words as $v)				{					$keywords[] = $v['banname'];				}				$keywords = implode(',', $keywords);			}		}		$address = isset($this->input['address']) ? trim(urldecode($this->input['address'])) : '';		$longitude = isset($this->input['lng']) ? $this->input['lng'] : 0.0;		$latitude = isset($this->input['lat']) ? $this->input['lat'] : 0.0;		$uname = trim($this->user['user_name']);		$albums_info = $this->api->detail('albums', array('albums_name' => $uname), 'id');		if (!$albums_info)		{			$insertData = array(				'albums_name' => $uname,				'albums_cover' => serialize($pic_info)			);			$insertData = array_merge($insertData, $user_info);			$result = $this->api->create('albums', $insertData);			$albums_id = $result['id'];		}		else		{			$albums_id = $albums_info['id'];		}		if (!$albums_id) $this->errorOutput(FAILED);		$insertPhotoData = array(			'albums_id' => $albums_id,			'photo_name' => $pic_info['name'],			'photos_info' => serialize($pic_info),			'photos_brief' => $pic_brief,			'address' => $address,			'longitude' => $longitude,			'latitude' => $latitude		);		if ($keywords)		{			$insertPhotoData['banwords'] = $keywords;			$insertPhotoData['isbanword'] = 1;		}		if (HAS_PIC) $insertPhotoData['state'] = 1;		$insertPhotoData = array_merge($insertPhotoData, $user_info);		$result = $this->api->create('photos', $insertPhotoData);		if ($result)		{			//更新数据			$updateData = array('photos_total' => 1);			if (HAS_PIC) $updateData['photos_num'] = 1;			$this->api->update('albums', $updateData, array('id' => $albums_id), true);			$this->addItem($result);		}		$this->output();	}	/**	 *	 * 图片上传..	 * @param array $files $_FILES数组	 */	private function upload_img($files=array())	{		if (!$this->settings['App_material'])		{			$this->errorOutput('图片服务器未安装！');		}		if(empty($files))		{			$this->errorOutput('请传图片！');		}		class_exists('material') OR include ROOT_PATH . 'lib/class/material.class.php';		$tmp_files['Filedata'] = $files;		$material_pic = new material();		$imgInfo = $material_pic->addMaterial($tmp_files);		if(is_array($imgInfo)){			return $imgInfo;		}		return array();	}	/**	 * 创建图片	 */	public function create_photo()	{		$user_info = array(			'user_id' => $this->user['user_id'],			'user_name' => $this->user['user_name'],			'org_id' => $this->user['org_id'],			'appid' => $this->user['appid'],			'appname' => $this->user['display_name'],			'create_time' => TIMENOW,			'ip' => hg_getip()		);		if (!$_FILES['Filedata']) $this->errorOutput(FAILED);		$albums_id = intval($this->input['albums_id']);		if ($albums_id <= 0) $this->errorOutput('请传正确的相册id');		$albums_info = $this->api->detail('albums', array('id' => $albums_id), 'id');		if (!$albums_info) $this->errorOutput('此相册不存在');		$imgInfo = array();		$successnum = 0;//上传成功数目		$failnum = 0;//上传失败数目		if(is_array($_FILES['Filedata']['tmp_name'])){			$_files = array();			foreach ($_FILES['Filedata'] AS $name=>$value)			{				foreach ($value as $keys=>$values)				{					if($_FILES['Filedata']['tmp_name'][$keys]){						$_files[$keys][$name]=$values;					}				}			}			foreach ($_files as $_file)			{				if($tmpImgInfo = $this->upload_img($_file)){					$imgInfo[] = $tmpImgInfo;				}				else {					$imgInfo[] = array();					$failnum++;				}			}		}		else if ($_FILES['Filedata']['tmp_name']) {			if($tmpImgInfo = $this->upload_img($_FILES['Filedata'])){				$imgInfo[] = $tmpImgInfo;			}else{				$imgInfo[] = array();				$failnum++;			}		}		if (!$imgInfo) $this->errorOutput(FAILED);		$onlyFirst = true;		$pic_brief = isset($this->input['breif']) ? $this->input['breif'] : '';		$retData = array();		foreach ($imgInfo as $k => $pic_info){			if(empty($pic_info)){// 过滤上传失败图片				continue;			}			$onlyFirst&&$tmp_breif = '';			$onlyFirst&&$keywords = '';			if (is_array($pic_brief)) {				$tmp_breif = $pic_brief[$k];				$keywords = $this->banwords($tmp_breif);			}			elseif ($pic_brief&&$onlyFirst){				$tmp_breif = $pic_brief;				$keywords = $this->banwords($tmp_breif);				$onlyFirst = false;//如果为单个描述，仅调用一次检查就可以			}			$insertPhotoData = array(			'albums_id' => $albums_id,			'photo_name' => $pic_info['name'],			'photos_info' => serialize($pic_info),			'photos_brief' => $tmp_breif			);			if ($keywords)			{				$insertPhotoData['banwords'] = $keywords;				$insertPhotoData['isbanword'] = 1;			}			if (HAS_PIC) $insertPhotoData['state'] = 1;			$insertPhotoData = array_merge($insertPhotoData, $user_info);			$result = $this->api->create('photos', $insertPhotoData);			if($result){				$successnum++;				$result['photos_info']&&$result['photos_info'] = $pic_info;				$retData[] = $result;			}		}		if ($successnum)		{			//更新数据			$updateData = array('photos_total' => $successnum);			if (HAS_PIC) $updateData['photos_num'] = $successnum;			$this->api->update('albums', $updateData, array('id' => $albums_id), true);			foreach ($retData as $data)			$this->addItem($data);		}		$this->output();	}	public function banwords($tmp_breif)	{		//屏蔽字判断		!$tmp_breif||class_exists('banword') OR include ROOT_PATH . 'lib/class/banword.class.php';		$tmp_breif&&$banword = new banword();		$words = $banword->exists(urlencode($tmp_breif));		$_keywords = '';		if ($words)		{			$keywords = array();			foreach ($words as $v)			{				$keywords[] = $v['banname'];			}			$keywords&&$_keywords = implode(',', $keywords);		}		return $_keywords;	}	/**	 * 编辑图片	 */	public function update_photo()	{		$id = intval($this->input['id']);		if ($id <= 0) $this->errorOutput(PARAM_WRONG);		$pic_info = $this->api->detail('photos', array('id' => $id));		if (!$pic_info) $this->errorOutput(PARAM_WRONG);		$updateData = array();		$albums_id = intval($this->input['albums_id']);		$photo_name = trim(urldecode($this->input['photo_name']));		$photo_brief = trim(urldecode($this->input['breif']));		$albums_info = $this->api->detail('albums', array('id' => $albums_id), 'id');		if ($albums_info && $albums_id != $pic_info['albums_id'])		{			$updateData['albums_id'] = $albums_id;		}		if ($photo_name && $photo_name != $pic_info['photo_name'])		{			$updateData['photo_name'] = $photo_name;		}		if ($photo_brief && $photo_brief != $pic_info['photos_brief'])		{			$updateData['photos_brief'] = $photo_brief;			//屏蔽字判断			include_once ROOT_PATH . 'lib/class/banword.class.php';			$banword = new banword();			$words = $banword->exists(urlencode($photo_brief));			if ($words)			{				$keywords = array();				foreach ($words as $v)				{					$keywords[] = $v['banname'];				}				$keywords = implode(',', $keywords);				$updateData['banwords'] = $keywords;				if (!$pic_info['isbanword']) $updateData['isbanword'] = 1;			}			else			{				if ($pic_info['isbanword'])				{					$updateData['banwords'] = '';					$updateData['isbanword'] = 0;				}			}		}		if ($updateData)		{			$result = $this->api->update('photos', $updateData, array('id' => $id));			//更新数据			if ($updateData['albums_id'])			{				$updateAdd = array(					'photos_total' => 1,					'comment_num' => $pic_info['comment_num'],					'comment_total' => $pic_info['comment_total']				);				$updateDrop = array(					'photos_total' => -1,					'comment_num' => -$pic_info['comment_num'],					'comment_total' => -$pic_info['comment_total']				);				if ($pic_info['state'])				{					$updateAdd['photos_num'] = 1;					$updateDrop['photos_num'] = -1;				}				$this->api->update('albums', $updateDrop, array('id' => $pic_info['albums_id']), true);				$this->api->update('albums', $updateAdd, array('id' => $updateData['albums_id']), true);				$this->api->update('comment', array('albums_id' => $updateData['albums_id']), array('photo_id' => $id));				$this->api->update('praise', array('albums_id' => $updateData['albums_id'], array('photo_id' => $id)));			}			$this->addItem($result);		}		$this->output();	}	public function deletephoto()	{		$id = trim(urldecode($this->input['id']));		$query = "update ".DB_PREFIX."photos set isdrop=1 where id in ($id)";		$this->addItem($this->core->query_sql($query));		$this->output();	}	/**	 * 删除照片数据	 */	public function delete()	{		$id = trim(urldecode($this->input['id']));		$id_arr = explode(',', $id);		$ids = array_filter($id_arr, 'filter_arr');		$id = implode(',', $ids);		if (empty($id)) $this->errorOutput(PARAM_WRONG);		//查询自己发布的数据		$photos_info = $this->api->show(array(			'count' => -1, 			'condition' => array(				'id' => $id, 				'user_id' => $this->user['user_id']		)		));		if (!$photos_info) $this->errorOutput(FAILED);		$photo_ids = $audit_ids = array();		foreach ($photos_info as $photo)		{			$photo_ids[$photo['id']] = $photo['id']; //所有的			if ($photo['state'] == 1)			{				$audit_ids[$photo['id']] = $photo['id']; //已审核			}			$albums_id = $photo['albums_id'];		}		$dropPicNum = count($audit_ids); //删除的已审核的照片数		$dropTotalPic = count($photo_ids); //删除的所有的照片数		$photo_ids = implode(',', $photo_ids);		$audit_ids = implode(',', $audit_ids);		if ($audit_ids)		{			//查询有效的评论数			include_once CUR_CONF_PATH . 'lib/comment.class.php';			$commentApi = new comment();			$comment_num = $commentApi->count(array('photo_id' => $audit_ids, 'state' => 3));			$comment_total = $commentApi->count(array('photo_id' => $audit_ids));			//删除照片下的评论			$this->api->update('comment', array('isdrop' => 1), array('photo_id' => $audit_ids));			//删除照片下的赞			$this->api->update('praise', array('isdrop' => 1), array('photo_id' => $audit_ids));		}		if ($photo_ids)		{			//删除照片			$result = $this->api->update('photos', array('isdrop' => 1), array('id' => $photo_ids));		}		//更新数据		$updateData = array();		if ($dropPicNum) $updateData['photos_num'] = -$dropPicNum;		if ($dropTotalPic) $updateData['photos_total'] = -$dropTotalPic;		if ($comment_num) $updateData['comment_num'] = -$comment_num;		if ($comment_total) $updateData['comment_total'] = -$comment_total;		if ($updateData && $albums_id)		{			$this->api->update('albums', $updateData, array('id' => $albums_id), true);		}		if ($result) $this->addItem($result);		$this->output();	}	/**	 * 过滤查询数据	 */	private function filter_data()	{		$name = isset($this->input['k']) ? trim(urldecode($this->input['k'])) : '';		$time = isset($this->input['date_search']) ? intval($this->input['date_search']) : '';		$start_time = trim($this->input['start_time']);		$end_time = trim($this->input['end_time']);		$state = isset($this->input['status']) ? intval($this->input['status']) : '';		$type = isset($this->input['type']) ? trim(urldecode($this->input['type'])) : '';		$albums_id = isset($this->input['albums_id']) ? trim(urldecode($this->input['albums_id'])) : 0;		if (!strpos($albums_id, ',')) $albums_id = intval($albums_id);		$client = isset($this->input['client']) ? intval($this->input['client']) : 0;		$user_id = isset($this->input['uid']) ? intval($this->input['uid']) : 0;		return array(			'keyword' => $name,			'date_search' => $time,			'start_time' => $start_time,			'end_time' => $end_time,			'state' => $state,			'type' => $type,			'albums_id' => $albums_id,			'client' => $client,			'user_id' => $user_id		);	}	/**	 * 获取会员信息	 * @param Int|String $user_id	 */	private function getMemberInfo($user_id)	{		if ($this->input['latest'])		{			//新会员			include_once ROOT_PATH . 'lib/class/members.class.php';			$newMember = new members();			$member_info = $newMember->get_members($user_id);			if ($member_info)			{				$memberInfo = array();				foreach ($member_info as $v)				{					$memberInfo[$v['member_id']]['id'] = $v['member_id'];					$memberInfo[$v['member_id']]['nick_name'] = $v['member_name'];					$memberInfo[$v['member_id']]['avatar'] = $v['avatar'];				}			}		}		else		{			include_once ROOT_PATH . 'lib/class/member.class.php';			$member = new member();			$member_info = $member->getMemberById($user_id);			$member_info = $member_info[0];			if ($member_info)			{				$memberInfo = array();				foreach ($member_info as $k => $v)				{					$memberInfo[$k]['id'] = $v['id'];					$memberInfo[$k]['nick_name'] = $v['nick_name'];					$memberInfo[$k]['avatar'] = $v['avatar'];				}			}		}		return $memberInfo;	}	/**	 * 获取照片最多的用户	 */	public function get_active_user()	{		$query = "        SELECT id,user_id, user_name, COUNT( user_id ) AS total        FROM  ".DB_PREFIX."photos WHERE state=1 and isdrop=0         GROUP BY  `user_id`         HAVING total >1        ORDER BY total DESC ";		$datas = $this->core->query($query);		$members = array();		if(!$datas)		{			$this->addItem($members);			$this->output();		}		$member_id = '';		foreach($datas as $data)		{			$member_id .= $data['user_id'].",";		}		$member_id = substr($member_id, 0,-1);		$this->curl = $this->create_curl_obj('members');		$params['member_id'] = $member_id;		$params['a'] = 'show';		$params['r'] = 'member';		$re = $this->get_common_datas($params);		foreach($re as $data)		$this->addItem($data);		$this->output();	}	/**	 * 创建curl	 */	public function create_curl_obj($app_name)	{		$key = 'App_'.$app_name;		global $gGlobalConfig;		if(!$gGlobalConfig[$key])		{			return false;		}		return new curl($gGlobalConfig[$key]['host'], $gGlobalConfig[$key]['dir']);	}	/**	 * 解析curl数据	 */	public function get_common_datas($params)	{		$this->curl->setSubmitType('post');		$this->curl->setReturnFormat('json');		$this->curl->initPostData();		foreach($params as $key=>$val)		{			if($key!='r')			{				$this->curl->addRequestData($key,$val);			}			else			{				return $this->curl->request($val.".php");			}		}	}}function filter_arr(&$value){	$value = intval($value);	return $value <= 0 ? false : true;}$out = new photosApi();$action = $_INPUT['a'];if (!method_exists($out,$action)){	$action = 'show';}$out->$action();?>