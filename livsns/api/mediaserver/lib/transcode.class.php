<?php/* * 该类用于视频转码时一些操作 *  */class transcode{	var $curl;	private $url;/* * 提交转码服务器的时候所传的参数和值 * array (	  'sourceFile' => 		  array (		    0 => 			    array (			      'source' => '/web/mediauploads/mp4/2014/1393/4925/3762/139349253762.ssm/139349253762.mp4',			      'start' => '36.73',			      'duration' => '48.032',			      'is_water_marked' => '1',			      'is_recodec' => '1',			      'url' => '',			    ),		  ),	  'id' => '28015',	  'app_id' => '55',	  'app_key' => 'GLtPX7N7ijwb83wupXuIrEl1YvIeBbm7',	  'type' => 'transcode_mark',	  'targetDir' => '/web/mediauploads/mp4/2014/1393/5723/5755/139357235755.ssm/',	  'output_filename' => '139357235755',	  'config' => 	  array (	    'unique_id' => 'UD',	    'output_format' => 'mp4',	    'codec_format' => 'libx264',	    'codec_profile' => 'main',	    'width' => '640',	    'height' => '480',	    'video_bitrate' => '1200',	    'audio_bitrate' => '48',	    'frame_rate' => '24',	    'gop' => '250',	    'vpre' => 'slow',	    'is_open_water' => '1',	    'water_mark' => '20140108160549Qzkx.jpg',	    'water_offset' => '',	    'water_mark_x' => '0',	    'water_mark_y' => '0',	  ),	  'callback' => 		  array (		    'protocol' => 'http://',		    'host' => 'vapi1.dev.hogesoft.com',		    'dir' => 'admin/',		    'token' => 'aldkj12321aasd',		    'port' => '80',		    'filename' => 'video.php',		  ),	  'absolute_path' => '1',	  'metadata' => 		  array (		  ),) * */	public function __construct($arr = array())	{		if(!class_exists('curl'))		{			include_once(ROOT_PATH . 'lib/class/curl.class.php');		}		if(!empty($arr))		{			$protocol = $arr['protocol']?$arr['protocol']:'http://';			$this->url = $protocol.$arr['host'].':'.$arr['port'];		}		else		{			$this->url = false;		}		$this->curl = new curl();	}		//提交到转码服务器	public function addTranscodeTask($data)	{		if($this->url)		{			return $this->curl->curl_json($this->url,$data);		}		else		{			return json_encode(array('return' => 'fail'));		}	}		//获取当前正在执行的任务数	public function get_transcode_tasks()	{		$task = array('type' =>'transcode_tasks');		return $this->addTranscodeTask($task);	}		//获取当前转码服务版本号	public function get_transcode_version()	{		$task = array('type' =>'get_version');		return $this->addTranscodeTask($task);	}		//暂停指定的任务	public function pause_transcode_task($id)	{		$task = array('type' => 'transcode_operation','id' => $id,'operation' => 'pause');		return $this->addTranscodeTask($task);	}		//恢复任务	public function resume_transcode_task($id)	{		$task = array('type' => 'transcode_operation','id' => $id,'operation' => 'resume');		return $this->addTranscodeTask($task);	}		//停止任务	public function stop_transcode_task($id)	{		$task = array('type' => 'transcode_operation','id' => $id,'operation' => 'stop');		return $this->addTranscodeTask($task);	}		//获取任务进度	public function get_transcode_status($id = '')	{		$task = array('type' => 'transcode_status');		if($id)		{			$task['id'] = $id;		}		return $this->addTranscodeTask($task);	}		//上传水印	public function upload_water_transcode_task($url)	{		$task = array('type' => 'upload_water_mark_img','url' => $url);		return $this->addTranscodeTask($task);	}		//设置等待任务执行权重(优先级)	public function set_waiting_task_weight($id,$weight = 0)	{		$task = array('type' => 'set_weight','id' => $id,'weight' => $weight);		return $this->addTranscodeTask($task);	}		//获取转码服务器的配置	public function get_transcode_config()	{		$task = array('type' => 'get_config');		return $this->addTranscodeTask($task);	}		//更新转码配置	public function update_transcode_config($config)	{		$task = array(			'type' 										=> 'modify_config',			'default_transcode_file_source_path' 		=> $config['source_path'],			'default_transcode_file_destination_path' 	=> $config['target_path'],		);		return $this->addTranscodeTask($task);	}		//post文件以及带一些参数	public function post_files($file,$data,$url = '')	{		$url = $url?$url:$this->url;		//如果url与文件地址为空或有误则直接退出		if(!$url || !$file)		{			return json_encode(array('return' => 'fail'));		}		$this->curl->setSubmitType('post');		$this->curl->initPostData();		$this->curl->addRequestData('data',json_encode($data));		if(is_array($file))		{			foreach ($file AS $k => $v)			{				$this->curl->addRequestData('videofile[' .$k .']','@' . $v);			}		}		else		{			$this->curl->addRequestData('videofile','@' . $file);		}		return $this->curl->post_files($url);	}	//重新回调任务	public function redo_callback_task($id)	{		$task = array('type' => 'redo_callback','id' => $id);		return $this->addTranscodeTask($task);	}}?>