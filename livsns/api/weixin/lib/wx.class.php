<?php/**************************************************************************** LivSNS 0.1* (C)2004-2010 HOGE Software.** $Id: wx.class.php 3873 2013-03-29 15:26:24Z yj $***************************************************************************/class wxApi extends InitFrm{	public function __construct()	{		parent::__construct();	}		public function __destruct()	{		parent::__destruct();	}		/**	 * 获取微信数据	 * @param Array $data	 */	public function show($data)	{		if ($data['count'] != -1)		{			$data_limit = ' LIMIT ' . $data['offset'] . ' , ' . $data['count'];		}		$sql = 'SELECT * FROM ' . DB_PREFIX . 'message WHERE 1';		//获取查询条件		$condition = $this->get_condition($data['condition']);		$sql .= $condition;		if ($data_limit) $sql .= $data_limit;		$query = $this->db->query($sql);		$info = array();		while ($row = $this->db->fetch_array($query))		{			if ($row['picUrl'] && !$row['picInfo'])			{				//本地化图片				$material = new material();				$pic_info = $material->localMaterial($row['picUrl']);				$pic_info = $pic_info[0];				$this->update('message', array('picInfo' => serialize($pic_info)), array('id' => $row['id']));				$row['picInfo'] = $pic_info;			}			elseif (unserialize($row['picInfo']))			{				$row['picInfo'] = unserialize($row['picInfo']);			}			$info[] = $row;		}		return $info;	}		/**	 * 获取微信总数	 * @param Array $data	 */	public function count($data)	{		$condition = $this->get_condition($data);		$sql = 'SELECT COUNT(id) AS total FROM ' . DB_PREFIX . 'message WHERE 1';		if ($condition) $sql .= $condition;		return $this->db->query_first($sql);	}		/**	 * 获取单个微信信息	 * @param Int $id	 */	public function detail($id)	{		$sql = 'SELECT * FROM ' . DB_PREFIX . 'message WHERE id = ' . $id;		$info = $this->db->query_first($sql);		if ($info['picUrl'] && !$info['picInfo'])		{			//本地化图片			$material = new material();			$pic_info = $material->localMaterial($info['picUrl']);			$pic_info = $pic_info[0];			$this->update('message', array('picInfo' => serialize($pic_info)), array('id' => $info['id']));			$info['picInfo'] = $pic_info;		}		elseif (unserialize($info['picInfo']))		{			$info['picInfo'] = unserialize($info['picInfo']);		}		return $info;	}		public function get_config($uid)	{		$sql = 'SELECT * FROM ' . DB_PREFIX . 'user_config WHERE user_id = ' . $uid;		return $this->db->query_first($sql);	}		/**	 * 创建数据	 * @param String $table	 * @param Array $data	 * @param String $pk	 */	public function create($table, $data, $pk = 'id')	{		$fields = '';		foreach ($data as $k => $v)		{			if (is_string($v))			{				$fields .= $k . "='" . $v . "',";			}			elseif (is_numeric($v))			{				$fields .= $k . '=' . $v . ',';			}		}		$fields = rtrim($fields, ',');		$sql = 'INSERT INTO ' . DB_PREFIX . $table . ' SET ' . $fields;		$this->db->query($sql);		$data[$pk] = $this->db->insert_id();		return $data;	}		/**	 * 更新数据	 * @param String $table	 * @param Array $data	 * @param Array $idsArr	 * @param Boolean $flag	 */	public function update($table, $data, $idsArr, $flag = false)	{		$fields = '';		foreach ($data as $k => $v)		{			if ($flag)			{				$v = $v > 0 ? '+' . $v : $v;				$fields .= $k . '=' . $k . $v . ',';			}			else			{				if (is_string($v))				{					$fields .= $k . "='" . $v . "',";				}				elseif (is_numeric($v))				{					$fields .= $k . '=' . $v . ',';				}			}		}		$fields = rtrim($fields, ',');		$sql = 'UPDATE ' . DB_PREFIX . $table . ' SET ' . $fields . ' WHERE 1';		if ($idsArr)		{			foreach ($idsArr as $key => $val)			{				if (is_numeric($val))				{					$sql .= ' AND ' . $key . ' = ' . $val;				}				elseif (is_string($val))				{					$sql .= ' AND ' . $key . ' in (' . $val . ')';				}			}		}		return $this->db->query($sql);	}		/**	 * 获取查询条件	 * @param Array $data	 */	private function get_condition($data)	{		$condition = '';				//查询的关键字		if ($data['keyword'])		{			$condition .= " AND (fromUserName LIKE '%" . $data['keyword'] . "%' 			OR toUserName LIKE '%" . $data['keyword'] . "%' OR brief LIKE '%" . $data['keyword'] . "%')";		}				//查询微信的类型		switch ($data['type'])		{			case 1:				$condition .= " AND msgType = 'text'";  //文本				break;			case 2:				$condition .= " AND msgType = 'image'";  //图片				break;			case 3:				$condition .= " AND msgType = 'location'";  //地理位置				break;			case 4:				$condition .= " AND msgType = 'link'";  //链接				break;			case 5:				$condition .= " AND msgType = 'event'";  //事件推送				break;			case 6:				$condition .= " AND msgType = 'music'";  //音乐				break;			case 7:				$condition .= " AND msgType = 'news'";  //图文				break;		}				//状态		switch ($data['state'])		{			case 1:				$condition .= " AND state = 1";  //正常状态				break;			case 2:				$condition .= " AND state = 0";  //删除状态				break;			default:				$condition .= " AND state = 1";  //默认为正常状态				break;		}				if ($data['start_time'])		{			$start_time = strtotime($data['start_time']);			$condition .= " AND create_time >= " . $start_time;		}				if ($data['end_time'])		{			$end_time = strtotime($data['end_time']);			$condition .= " AND create_time < " . $end_time;		}				//查询发布的时间        if ($data['date_search'])		{			$today = strtotime(date('Y-m-d'));			$tomorrow = strtotime(date('Y-m-d', TIMENOW+24*3600));			switch ($data['date_search'])			{				case 1://所有时间段					break;				case 2://昨天的数据					$yesterday = strtotime(date('y-m-d', TIMENOW-24*3600));					$condition .= " AND  createTime > '" . $yesterday . "' AND createTime < '" . $today . "'";					break;				case 3://今天的数据					$condition .= " AND  createTime > '" . $today . "' AND createTime < '" . $tomorrow . "'";					break;				case 4://最近3天					$last_threeday = strtotime(date('y-m-d', TIMENOW-2*24*3600));					$condition .= " AND  createTime > '" . $last_threeday . "' AND createTime < '" . $tomorrow . "'";					break;				case 5://最近7天					$last_sevenday = strtotime(date('y-m-d', TIMENOW-6*24*3600));					$condition .= " AND  createTime > '" . $last_sevenday . "' AND createTime < '" . $tomorrow . "'";					break;				default://所有时间段					break;			}		}				//是否为星标		if (is_numeric($data['star']) && $data['star'] > -1)		{			$condition .= " AND funcFlag = " . $data['star'];		}				//根据微信ID获取数据		if ($data['id']) $condition .= " AND id IN (" . $data['id'] . ")";				//排序		$sort = ' ORDER BY ';		if ($data['order'] && is_array($data['order']))		{			foreach ($data['order'] as $k => $v)			{				$sort .= $k . ' ' . $v . ', ';			}			$sort = rtrim($sort, ',');		}		else		{			$sort .= 'id DESC';		}				$condition = $condition . $sort;		return $condition;	}}?>