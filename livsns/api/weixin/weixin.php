<?php/**************************************************************************** LivSNS 0.1* (C)2004-2010 HOGE Software.** $Id: weixin.php 12433 2013-03-29 15:27:16Z yj $***************************************************************************/require_once './global.php';require_once CUR_CONF_PATH . 'lib/wx.class.php';define('MOD_UNIQUEID', 'weixin'); //模块标识define('WITH_LOGIN', false);class weixin extends appCommonFrm{	private $weixin;	private $autoReply;	private $replyCon;	private $token;		public function __construct()	{		parent::__construct();		$this->weixin = new wxApi();		$this->init_config();	}	public function __destruct()	{		parent::__destruct();		unset($this->weixin);	}    	/**	 * 初始化配置信息	 */	private function init_config()	{		$uid = isset($this->input['u']) ? intval($this->input['u']) : 0;		if (!$uid) return false;		$config = $this->weixin->get_config($uid);		if (!$config) return false;		$this->autoReply = $config['auto_reply'];		$this->replyCon = $config['reply_content'];		$this->token = $config['token'];	}        /**     * 接受用户发送的微信消息     */    public function accept()    {    	if (isset($_GET["echostr"]))    	{    		$checkResult = $this->checkSignature();    		if ($checkResult)    		{    			echo $_GET["echostr"];exit;    		}    	}    	    	//获取POST数据		$postStr = $GLOBALS["HTTP_RAW_POST_DATA"];      	//处理POST数据 		if (!empty($postStr))		{			//解析收到的数据			$postObj = simplexml_load_string($postStr, 'SimpleXMLElement', LIBXML_NOCDATA);			$fromUserName = trim($postObj->FromUserName);			$toUserName = trim($postObj->ToUserName);			$createTime = intval($postObj->CreateTime);			$msgType = trim($postObj->MsgType);			$msgId = intval($postObj->MsgId);			$text = isset($postObj->Content) ? trim($postObj->Content) : '';			$picUrl = isset($postObj->PicUrl) ? trim($postObj->PicUrl) : '';			$latitude = isset($postObj->Location_X) ? floatval($postObj->Location_X) : -1;			$longitude = isset($postObj->Location_Y) ? floatval($postObj->Location_Y) : -1;			$scale = isset($postObj->Scale) ? intval($postObj->Scale) : -1;			$location = isset($postObj->Label) ? trim($postObj->Label) : '';			$title = isset($postObj->Title) ? trim($postObj->Title) : '';			$description = isset($postObj->Description) ? trim($postObj->Description) : '';			$url = isset($postObj->Url) ? trim($postObj->Url) : '';			$data = array(				'fromUserName' => $fromUserName,				'toUserName' => $toUserName,				'createTime' => $createTime,				'msgType' => $msgType,				'msgId' => $msgId			);			if (!empty($text)) $data['brief'] = hg_cutchars($text, 100);			if (!empty($picUrl)) $data['picUrl'] = $picUrl;			if ($latitude != -1) $data['latitude'] = $latitude;			if ($longitude != -1) $data['longitude'] = $longitude;			if ($scale != -1) $data['scale'] = $scale;			if (!empty($location)) $data['location'] = $location;			if (!empty($title)) $data['title'] = $title;			if (!empty($description)) $data['description'] = $description;			if (!empty($url)) $data['url'] = $url;			$info = $this->weixin->create('message', $data);			if ($data['msgType'] == 'text')			{				$textData = array(					'id' => $info['id'],					'content' => $text				);				$this->weixin->create('text_data', $textData);			}						//设置自动回复信息			if ($this->autoReply)			{				//默认回复文本信息				$fromUsername = $data['fromUserName'];		        $toUsername = $data['toUserName'];		        $time = TIMENOW;		        $msgType = 'text';	            $contentStr = $this->replyCon;		        $replyStr = '<xml>		                    <ToUserName><![CDATA[%s]]></ToUserName>		                    <FromUserName><![CDATA[%s]]></FromUserName>		                    <CreateTime>%s</CreateTime>		                    <MsgType><![CDATA[%s]]></MsgType>		                    <Content><![CDATA[%s]]></Content>		                    <FuncFlag>0</FuncFlag>		                    </xml>';	            $resultStr = sprintf($replyStr, $fromUsername, $toUsername, $time, $msgType, $contentStr);	            echo $resultStr;			}        }    }		/**	 * 回复用户发送的微信消息	 */	public function send()	{		$fromUserName = isset($this->input['fromUser']) ? trim(urldecode($this->input['fromUser'])) : '';		$toUserName = isset($this->input['toUser']) ? trim(urldecode($this->input['toUser'])) : '';		$createTime = isset($this->input['time']) ? intval($this->input['time']) : TIMENOW;		$msgType = isset($this->input['type']) ? trim(urldecode($this->input['type'])) : '';		$funcFlag = isset($this->input['flag']) ? !!intval($this->input['flag']) : 0;		if (empty($fromUserName) || empty($toUserName))		{			$this->errorOutput(PARAM_WRONG);		}		$data = array(			'fromUserName' => $fromUserName,			'toUserName' => $toUserName,			'createTime' => $createTime,			'msgType' => $msgType		);		$sendStr = '<xml>					<ToUserName><![CDATA['.$toUserName.']]></ToUserName>					<FromUserName><![CDATA['.$fromUserName.']]></FromUserName>					<CreateTime>'.$createTime.'</CreateTime>					<FuncFlag>'.$funcFlag.'</FuncFlag>';		if ($msgType == 'text')		{			$content = isset($this->input['text']) ? trim(urldecode($this->input['text'])) : '';			if (empty($content) || strlen($content) > 1024) $this->errorOutput(PARAM_WRONG);			$sendStr .= '<MsgType><![CDATA['.$msgType.']]></MsgType>						<Content><![CDATA['.$content.']]></Content>';		}		elseif ($msgType == 'music')		{			$title = isset($this->input['musicTitle']) ? trim(urldecode($this->input['musicTitle'])) : '';			$description = isset($this->input['musicIntro']) ? trim(urldecode($this->input['musicIntro'])) : '';			$musicUrl = isset($this->input['musicUrl']) ? trim(urldecode($this->input['musicUrl'])) : '';			$hqMusicUrl = isset($this->input['hqMusicUrl']) ? trim(urldecode($this->input['hqMusicUrl'])) : '';			if (empty($musicUrl)) $this->errorOutput(PARAM_WRONG);			$sendStr .= '<MsgType><![CDATA['.$msgType.']]></MsgType>						<Music> 							<Title><![CDATA['.$title.']]></Title> 							<Description><![CDATA['.$description.']]></Description> 							<MusicUrl><![CDATA['.$musicUrl.']]></MusicUrl> 							<HQMusicUrl><![CDATA['.$hqMusicUrl.']]></HQMusicUrl> 						</Music>';		}		elseif ($msgType == 'news')		{			$news = isset($this->input['news']) ? trim(urldecode($this->input['news'])) : '';			if (empty($news) || !unserialize($news)) $this->errorOutput(PARAM_WRONG);			$news = unserialize($news);			$total = $news['total'];			$items = $news['items'];			$sendStr .= '<MsgType><![CDATA['.$msgType.']]></MsgType>						<ArticleCount>'.$total.'</ArticleCount>						<Articles>';			foreach ($items as $v)			{				$sendStr .= '<item>								<Title><![CDATA['.$v['title'].']]></Title> 								<Description><![CDATA['.$v['description'].']]></Description>								<PicUrl><![CDATA['.$v['picurl'].']]></PicUrl>								<Url><![CDATA['.$v['url'].']]></Url>							 </item>';			}			$sendStr .= '</Articles>';		}		else		{			$this->errorOutput(PARAM_WRONG);		}		$sendStr .= '</xml>';				//TODO 发送微信		$ret = $weixin->send($sendStr);		if (!$ret) $this->errorOutput(FAILED);		//保存发布数据		$message_info = $this->weixin->create('message', $data);		if ($msgType == 'news' && $items)		{			foreach ($items as $v)			{				$articleData = array(					'm_id' => $message_info['id'],					'title' => $v['title'],					'description' => $v['description'],					'pic_url' => $v['picurl'],					'url' => $v['url']				);				$this->weixin->create('articles', $articleData);			}		}		$this->addItem($ret);		$this->output();	}		/**	 * 验证接入的URL是否有效	 */	private function checkSignature()	{        $signature = $_GET["signature"];  //微信加密签名        $timestamp = $_GET["timestamp"];  //时间戳        $nonce = $_GET["nonce"];          //随机数        		$token = $this->token;		$tmpArr = array($token, $timestamp, $nonce);		sort($tmpArr);		$tmpStr = implode($tmpArr);		$tmpStr = sha1($tmpStr);		return ($tmpStr == $signature) ? true : false;	}}$out = new weixin();$action = $_INPUT['a'];if (!method_exists($out,$action)){	$action = 'accept';}$out->$action();?>