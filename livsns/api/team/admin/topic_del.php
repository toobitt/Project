<?phprequire_once './global.php';require_once '../lib/team.class.php';require_once '../lib/topic.class.php';class topicDelApi extends adminReadBase{	private $team;	private $topic;		public function __construct()	{		parent::__construct();		$this->team = new teamClass();		$this->topic = new topicClass();	}		public function __destruct()	{		parent::__destruct();		unset($this->team);		unset($this->topic);	}		public function index()	{			}		/**	 * 获取话题信息	 */	public function show()	{		$offset = isset($this->input['offset']) ? intval($this->input['offset']) : 0;		$count = isset($this->input['count']) ? intval($this->input['count']) : 20;		$data_limit = ' LIMIT ' . $offset . ' , ' . $count;				$sql = 'SELECT t.*, tr.content, tr.from_ip, tr.rid FROM ' . DB_PREFIX . 'topic t 		LEFT JOIN ' . DB_PREFIX . 'topic_reply tr ON t.topic_id = tr.topic_id 		LEFT JOIN ' . DB_PREFIX . 'team tm ON tm.team_id = t.source_id 		WHERE tr.reply_user_id = 0 AND tm.state = 1';				//获取查询条件		$condition = $this->get_condition($this->filter_data());		$sql = $sql . $condition . $data_limit;		$query = $this->db->query($sql);		$info = array();		$topic_ids = $space = "";		while ($row = $this->db->fetch_array($query))		{			$topic_ids .= $space . $row['topic_id'];			$space = ',';			$row['content'] = htmlspecialchars_decode($row['content']);			$info[] = $row;		}				if(!$topic_ids)		{			return false;		}		$sql = "SELECT * FROM " . DB_PREFIX . "material WHERE topic_id IN (" . $topic_ids . ")";		$q = $this->db->query($sql);		$material = array();		while($row = $this->db->fetch_array($q))		{			$row['img_info'] = unserialize(htmlspecialchars_decode($row['img_info']));			$material[$row['topic_id']][] = $row;		}				$sql = "SELECT * FROM " . DB_PREFIX . "video WHERE source='topic' AND sid IN (" . $topic_ids . ")";		$q = $this->db->query($sql);		$video = array();		while($row = $this->db->fetch_array($q))		{			$video[$row['sid']] = $row;		}				foreach($info as $k => $v)		{			$info[$k]['topic_type'] = 'text';			if($video[$v['topic_id']])			{				$info[$k]['topic_type'] = 'video';				$info[$k]['data'] = $video[$v['topic_id']];			}			if($material[$v['topic_id']])			{				$info[$k]['topic_type'] = 'pic';				$info[$k]['data'] = $material[$v['topic_id']];			}		}		$this->setXmlNode('topic_info' , 'topic');		if (!empty($info))		{			foreach($info as $topic)			{				$this->addItem($topic);			}		}		$this->output();	}		/**	 * 获取话题总数	 */	public function count()	{		$sql  = "SELECT COUNT(t.topic_id) AS total FROM " . DB_PREFIX . "topic t 		LEFT JOIN " . DB_PREFIX . "team tm ON tm.team_id = t.source_id WHERE tm.state = 1";		$condition = $this->get_condition($this->filter_data());		$sql .= $condition;		$info = $this->db->query_first($sql);		echo json_encode($info);	}		public function detail()	{			}		/**	 * 处理传递的数据	 */	private function filter_data()	{		$order_fields = trim(urldecode($this->input['hgorder']));		$order_method = trim(urldecode($this->input['hgupdn']));		if (!$order_fields) $order_fields = 'pub_time';		if (strtoupper($order_method) != 'ASC') $order_method = 'desc';		return array(			'key' => trim(urldecode($this->input['k'])),			'user_name' => trim(urldecode($this->input['user_name'])),			'start_time' => strtotime(trim(urldecode($this->input['start_time']))),			'end_time' => strtotime(trim(urldecode($this->input['end_time']))),			'date_search' => trim($this->input['date_search']),			'state' => isset($this->input['state']) ? trim($this->input['state']) : 5,			'team_id' => trim($this->input['team_id']),			'thread_img' => trim($this->input['thread_img']),			'order' => array($order_fields => $order_method)		);	}		/**	 * 查询条件	 * @param Array $data	 */	private function get_condition($data = array())	{		$condition = '';			//查询的关键字		if($data['key'])		{			$condition .= " AND t.subject LIKE '%" . $data['key'] . "%' ";		}			//查询帖子用户		if($data['user_name'])		{			$condition .= " AND t.creater_name = '" . $data['user_name'] . "' ";		}			//查询的起始时间		if($data['start_time'])		{			$condition .= " AND t.pub_time > " . $data['start_time'];		}			//查询的结束时间		if($data['end_time'])		{			$condition .= " AND t.pub_time < " . $data['end_time'];		}			//查询发布的时间		if(is_numeric($data['date_search']))		{			$today = strtotime(date('Y-m-d'));			$tomorrow = strtotime(date('Y-m-d',TIMENOW+24*3600));			switch(intval($data['date_search']))			{				case 1://所有时间段					break;				case 2://昨天的数据					$yesterday = strtotime(date('y-m-d',TIMENOW-24*3600));					$condition .= " AND t.pub_time > '".$yesterday."' AND t.pub_time < '".$today."'";					break;				case 3://今天的数据					$condition .= " AND t.pub_time > '".$today."' AND t.pub_time < '".$tomorrow."'";					break;				case 4://最近3天					$last_threeday = strtotime(date('y-m-d',TIMENOW-2*24*3600));					$condition .= " AND t.pub_time > '".$last_threeday."' AND t.pub_time < '".$tomorrow."'";					break;				case 5://最近7天					$last_sevenday = strtotime(date('y-m-d',TIMENOW-6*24*3600));					$condition .= " AND t.pub_time > '".$last_sevenday."' AND t.pub_time < '".$tomorrow."'";					break;				default://所有时间段					break;			}		}			//查询话题的状态		if(is_numeric($data['state']))		{				switch(intval($data['state']))			{				case 1: //所有状态					$condition .=" AND t.state != 0";				break;				case 2: //正常					$condition .=" AND t.state = 1";				break;				case 3: //已屏蔽					$condition .=" AND t.state = -1";				break;				case 4: //已关闭					$condition .=" AND t.state = 2";				break;				case 5: //已删除					$condition .=" AND t.state = 0";				break;				default:					$condition .=" AND t.state != 0";				break;			}		}			//查询小组下的讨论区		if(is_numeric($data['team_id']))		{			$condition .= " AND t.source_id = " . intval($data['team_id']);		}			//查询图片贴，视频贴		if(is_numeric($data['thread_img']))		{			switch(intval($data['thread_img']))			{				case 1://所有帖子					break;				case 2://图片贴					$condition .=" AND t.contain_img=1";					break;				case 3://视频贴					$condition .=" AND t.contain_media=1";					break;				default:					break;			}		}				$orderby = ' ORDER BY ';		if ($data['order'] && is_array($data['order']))		{			$order = '';			foreach ($data['order'] as $k => $v)			{				$order .= ',t.' . $k . ' ' . strtoupper($v);			}			$order = substr($order, 1);		}		else		{			$order = 't.pub_time DESC';		}		$orderby .= $order;				return $condition . $orderby;	}}$out = new topicDelApi();$action = $_INPUT['a'];if (!method_exists($out,$action)){	$action = 'show';}$out->$action();