<?phprequire_once './global.php';require_once '../lib/team.class.php';require_once '../lib/topic.class.php';include_once ROOT_PATH . 'lib/class/notify.class.php';include_once ROOT_PATH . 'lib/class/option.class.php';include_once ROOT_PATH . 'lib/class/mark.class.php';include_once ROOT_PATH . 'lib/class/activity.class.php';include_once ROOT_PATH . 'lib/class/team.class.php';define('APP_UNIQUEID','team');class teamUpdateApi extends adminUpdateBase{	private $team;	private $topic;	private $notify;	private $teamApi;		public function __construct()	{		parent::__construct();		$this->team = new teamClass();		$this->topic = new topicClass();		$this->notify = new notify();		$this->teamApi = new team();	}		public function __destruct()	{		parent::__destruct();		unset($this->team);		unset($this->topic);		unset($this->notify);		unset($this->teamApi);	}		/**	 * 创建小组	 */		public function create()	{		//处理传递的数据		$data = $this->check_data();		$apply_info = $this->team->apply_detail($data['id']);		if (!$apply_info) $this->errorOutput(PARAM_WRONG);				//检测小组类型是否存在		if (!isset($data['team_type'])) $this->errorOutput(PARAM_WRONG);		$result_type = $this->team->check_team_type($data['team_type']);		if (!$result_type) $this->errorOutput(PARAM_WRONG);				//检测小组分类是否存在		$result_category = $this->team->check_team_category($data['team_category']);		if (!$result_category) $this->errorOutput(PARAM_WRONG);				//检测创建的小组名称是否存在		$result_name = $this->team->check_team_name($data['team_name']);		if ($result_name) $this->errorOutput(TEAM_EXISTS);				//检测用户创建的小组的个数		$result_num = $this->team->check_create_team_num($this->user['user_id']);		if ($result_num >= $this->settings['create_team_num'])		{			$this->errorOutput(SYSTEM_LIMIT);		}		unset($data['id']);				$data['creater_id'] = $apply_info['user_id'];		$data['creater_name'] = $apply_info['user_name'];		$data['pub_time'] = TIMENOW;		$data['state'] = 1;		$data['app_name'] = $apply_info['display_name'];				//创建小组		$result = $this->team->create($data);				//标签创建		if (isset($data['tags']) && $data['tags'] && $result)		{			$mark = new mark();			$mark_data = array(				'source' => 'team',				'source_id' => $result['team_id'],				'parent_id' => $result['team_id'],				'action' => 'team_tag',				'user_id' => $result['creater_id'],				'name' => $data['tags']			);			$result_mark = $mark->create_source_id_mark($mark_data);			if ($result_mark)			{				$result['team_mark'] = $data['tags'];				$this->team->update(array('tags' => $data['tags']), $result['team_id']);			}			else			{				$this->errorOutput(FAIL_OP);			}		}		//插入搜索		$this->teamApi->add_search($result['team_id'], 'team');				$this->team->update_team_apply(array('team_id' => $result['team_id']), $apply_info['id']);		//更新小组类型下小组数目		$this->team->update_team_type($result['team_type']);		//更新小组分类下小组数目		$this->team->update_team_category($result['team_category']);		$this->addItem($apply_info['id']);		$this->output();	}		/**	 * 上传小组标识	 */	public function upload()	{			include_once(ROOT_PATH . 'lib/class/material.class.php');		$upload = new material();		$result = $upload->addMaterial($_FILES);		$ret['data'] = serialize($result);		$ret['url'] = $result['host'] . $result['dir'] .'100x75/'. $result['filepath'] . $result['filename'];		$this->addItem($ret);		$this->output();	}		/**	 * 处理传递的参数	 */	private function check_data()	{			$data = $this->filter_data();		$apply_id = intval($this->input['apply_id']);		if (!$apply_id)		{			$this->errorOutput(PARAM_WRONG);		}		$data['id'] = $apply_id;		return $data;	}		/**	 * 更新小组信息操作	 */	public function update()	{		$team_id = intval($this->input['team_id']);				//检测对应的小组是否存在		$team_info = $this->team->detail($team_id);		if (!$team_info) $this->errorOutput(TEAM_NO_EXISTS);				$data = $this->filter_data();		$verify_data = array();		if (isset($data['team_type']) && $data['team_type'])		{			$result_type = $this->team->check_team_type($data['team_type']);			if (!$result_type) $this->errorOutput(PARAM_WRONG);			$verify_data['team_type'] = $data['team_type'];		}		if ($team_info['team_category'] != $data['team_category'])		{			//检测小组分类是否存在			$result_category = $this->team->check_team_category($data['team_category']);			if (!$result_category) $this->errorOutput(PARAM_WRONG);			$verify_data['team_category'] = $data['team_category'];		}				if ($team_info['team_name'] != $data['team_name'])		{			//检测更新的小组名称是否存在			$result_name = $this->team->check_team_name($data['team_name'], $team_id);			if ($result_name) $this->errorOutput(TEAM_EXISTS);			$verify_data['team_name'] = $data['team_name'];		}		if ($team_info['introduction'] != $data['introduction'])		{			$verify_data['introduction'] = $data['introduction'];		}		if (isset($data['team_logo']) && $data['team_logo'])		{			$verify_data['team_logo'] = $data['team_logo'];		}		if (isset($data['notice']))		{			if ($team_info['notice'] != $data['notice'])			{				$verify_data['notice'] = $data['notice'];			}		}		$verify_data['update_time'] = TIMENOW;		$result = $this->team->update($verify_data, $team_id);				//标签更新		if ($team_info['tags'] != $data['tags'])		{			$team_mark = $data['tags'];		}		if (isset($team_mark) && $result)		{			$mark = new mark();			$data = array(				'source' => 'team',				'source_id' => $team_id,				'parent_id' => $team_id,				'action' => 'team_tag',				'user_id' => $team_info['creater_id']			);			if ($team_mark)			{				$data['name'] = $team_mark;			}			$result_mark = $mark->update_source_id_mark($data);			if ($result_mark)			{				$this->team->update(array('tags' => $team_mark), $team_id);			}			else			{				$this->errorOutput(FAIL_OP);			}		}		//更新搜索		$this->teamApi->update_search($team_id, 'team');				$this->addItem($result);		$this->output();	}		/**	 * 小组数据批量审核	 */	public function audit()	{		$team_ids = $this->validate_data();		$team_info = $this->team->team_by_id($team_ids, 0);		$no_audit_id = array();		$team_type = array();		$team_category = array();		foreach ($team_info as $v)		{			$no_audit_id[] = $v['team_id'];			$team_type[$v['team_type']][] = $v;			$team_category[$v['team_category']][] = $v;		}		if ($no_audit_id)		{			$no_audit_ids = implode(',', $no_audit_id);			$result = $this->team->update(array('state' => 1), $no_audit_ids);			if ($result)			{				//更新搜索				$this->teamApi->update_search($no_audit_ids, 'team');								$option = new option();				//发送通知				$send_arr = array();				$send_con = array();				foreach ($team_info as $v)				{					$send_con['from_id'] = 0;					$send_con['to_id'] = $v['creater_id'];					$send_con['content'] = '您申请的"' . $v['team_name'] . '"小组已通过审核！';					$send_con['page_link'] = 'team.php?team_id=' . $v['team_id'];					$send_con['link_text'] = '点击查看';					$send_arr[] = $send_con;										$data = array(						'user_id' => $v['creater_id'],						'source' => 'team',						'source_id' => $v['team_id'],						'action' => 'attention'					);					$option_info = $option->get_relation($data);					if ($option_info['total'] == 0)					{						$option->add_relation($v['creater_id'], 'team', $v['team_id'], 'attention');						$this->team->update(array('attention_num' => 1), $v['team_id'], true);					}				}				if ($send_arr)				{					$this->notify->notify_send(json_encode($send_arr), 0);				}			}		}		else		{			$result = true;		}		if ($team_type)		{			//更新小组类型下小组数目			foreach ($team_type as $k=>$v)			{				$this->team->update_team_type($k, intval(count($v)));			}		}		if ($team_category)		{			//更新小组分类下小组数目			foreach ($team_category as $k=>$v)			{				$this->team->update_team_category($k, intval(count($v)));			}		}		$this->setXmlNode('team_info', 'team');		$this->addItem($result);		$this->output();	}		/**	 * 小组数据批量删除	 */	public function delete()	{		$team_ids = $this->validate_data();		$team_info = $this->team->team_by_id($team_ids); //获取不为删除状态的数据		$verify_ids = array();		$team_type = array();		$team_category = array();		foreach ($team_info as $v)		{			$verify_ids[] = $v['team_id'];			//获取非关闭的信息			if ($v['state'] == 1)			{				$team_type[$v['team_type']][] = $v;				$team_category[$v['team_category']] = $v;			}		}		$verify_ids = implode(',', $verify_ids);				//设置小组下的数据为删除状态		$this->setState($verify_ids, 0);				//删除小组		$result = $this->team->update(array('state' => -1), $verify_ids);				if ($result)		{			//删除小组搜索			$this->teamApi->delete_search($verify_ids, 'team');		}				if ($team_type)		{			//更新小组类型下小组数目			foreach ($team_type as $k=>$v)			{				$this->team->update_team_type($k, -intval(count($v)));			}		}		if ($team_category)		{			//更新小组分类下小组数目			foreach ($team_category as $k=>$v)			{				$this->team->update_team_category($k, -intval(count($v)));			}		}		$this->setXmlNode('team_info', 'team');		$this->addItem($result);		$this->output();	}		/**	 * 批量恢复小组数据	 */	public function recover()	{		$team_ids = trim(urldecode($this->input['team_id']));		$team_info = $this->team->team_by_id($team_ids, -1);		$verify_ids = array();		$team_type = array();		$team_category = array();		foreach ($team_info as $v)		{			$verify_ids[] = $v['team_id'];			$team_type[$v['team_type']][] = $v;			$team_category[$v['team_category']] = $v;		}		$verify_ids = implode(',', $verify_ids);		//设置小组下的数据为正常状态		$this->setState($verify_ids, 1);				//恢复小组		$result = $this->team->update(array('state' => 1), $verify_ids);				if ($result)		{			//插入小组搜索			$this->teamApi->add_search($verify_ids, 'team');		}				if ($team_type)		{			//更新小组类型下小组数目			foreach ($team_type as $k=>$v)			{				$this->team->update_team_type($k, intval(count($v)));			}		}		if ($team_category)		{			//更新小组分类下小组数目			foreach ($team_category as $k=>$v)			{				$this->team->update_team_category($k, intval(count($v)));			}		}		$this->setXmlNode('team_info', 'team');		$this->addItem($result);		$this->output();	}		//设置状态	private function setState($team_ids, $state)	{		//删除小组的关注		$option = new option();		$attenData = array(			'source' => 'team',			'action' => 'attention',			'source_id' => $team_ids,			'state' => $state		);		$option->updateState($attenData);				//删除小组的标签包含主题标签		$mark = new mark();		$markData = array(			'parent_id' => $team_ids,			'state' => $state		);		$mark->update_mark_state($markData);				//删除小组下的行动召集者		$this->team->update_apply(array('status' => $state), '', $team_ids);				//删除小组下的黑名单		$this->team->update_blacklist(array('status' => $state), '', $team_ids);				//删除申请的小组信息		$this->team->update_team_apply(array('status' => $state), '', $team_ids);				//删除小组下的话题		$this->setTopicState($team_ids, $state);				//删除小组下的行动		$action = new activityCLass();		$actionData = array(			'team_id' => $team_ids,			'type' => 'team',			'state' => $state		);		$action->updateDeleteState($actionData);	}		//逻辑删除还原话题数据	private function setTopicState($team_ids, $state)	{		$topic_ids = $this->topic->get_topic_ids($team_ids, true); //获取未删除的话题数据		if ($topic_ids)		{			//删除话题下的回复数据			$rids = $this->topic->get_reply_ids($topic_ids); //获取未删除的回复数据			if ($rids && is_array($rids))			{				$this->topic->update_reply(array('state' => $state, 'type_state' => 'team'), implode(',', $rids));			}			//删除附件			$this->topic->update_topic_material(array('state' => $state, 'type_state' => 'team'), '', $topic_ids);			//删除视频			$this->topic->update_topic_video(array('state' => $state, 'type_state' => 'team'), '', $topic_ids);			//删除赞			$option = new option();			$favorData = array(				'source' => 'topic',				'action' => 'favor',				'source_id' => $topic_ids,				'state' => $state,				'type_state' => 'team'			);			$option->updateState($favorData);			//删除标签			$mark = new mark();			$markData = array(				'source' => 'topic',				'source_id' => $topic_ids,				'state' => $state,				'type_state' => 'team'			);			$mark->update_mark_state($markData);						if ($state == 0)			{				//删除话题搜索				$this->teamApi->delete_search($topic_ids, 'topic');			}			elseif ($state == 1)			{				//插入话题搜索				$this->teamApi->add_search($topic_ids, 'topic');			}						//删除话题			$this->topic->update(array('state' => $state, 'type_state' => 'team'), $topic_ids);		}	}		/**	 * 删除小组所有信息	 * @param String $ids	 */	public function real_del()	{		$team_ids = trim(urldecode($this->input['team_id']));		//删除小组的关注		$option = new option();		$attenData = array(			'source' => 'team',			'source_id' => $team_ids,			'action' => 'attention'		);		$option->delete($attenData);		//删除小组的标签		$mark = new mark();		$markData = array(			'source' => 'team',			'source_id' => $team_ids,			'action' => 'team_tag'		);		$mark->delete_source_id_mark($markData);		//删除小组的主题标签		$themeMarkData = array(			'source' => 'team',			'source_id' => $team_ids,			'action' => 'team_theme'		);		$mark->delete_source_id_mark($themeMarkData);		//删除小组下的行动召集者		$this->team->del_apply($team_ids);		//删除小组下的黑名单		$this->team->del_blacklist($team_ids);		//删除小组下的话题		$this->teamApi->del_all($team_ids);		//删除小组下的行动		$action = new activityCLass();		$out = $action->clear(array('team_id' => $team_ids));		//删除小组的足迹		$teamApi->delete_visit($team_ids, 'team');		//删除申请小组数据		$this->team->del_team_apply($team_ids);		//删除小组搜索		$this->teamApi->delete_search($team_ids, 'team');		//删除小组		$result = $this->team->del_team($team_ids);		$this->addItem($result);		$this->output();	}		/**	 * 验证数据	 */	private function validate_data()	{		$team_ids = trim(urldecode($this->input['team_id']));		$team_ids = str_replace('，', ',', $team_ids);			$id_array = explode(',', $team_ids);		//过滤数组中的空值		$id_array = array_filter($id_array);		if(empty($id_array))		{			$this->errorOutput(PARAM_WRONG);		}		$team_ids = implode(',', $id_array);		$team_info = $this->team->team_by_id($team_ids);		if (!$team_info) $this->errorOutput(PARAM_WRONG);		$verify_team_ids = array();		foreach ($team_info as $team)		{			$verify_team_ids[] = $team['team_id'];		}		sort($id_array);		sort($verify_team_ids);		if ($verify_team_ids != $id_array)		{			$this->errorOutput(PARAM_WRONG);		}		return implode(',', $verify_team_ids);	}		/**	 * 处理传递的参数	 */	private function filter_data()	{				$team_name = trim(urldecode($this->input['name']));		$tags = trim(urldecode($this->input['tags']));		$team_type = intval($this->input['type']);		$team_category = intval($this->input['category']);		$introduction = isset($this->input['intro']) ? trim(urldecode($this->input['intro'])) : '';		$notice = isset($this->input['notice']) ? trim(urldecode($this->input['notice'])) : '';		$team_logo = isset($this->input['logo']) ? trim(urldecode($this->input['logo'])) : '';		$permission = isset($this->input['permission']) ? intval($this->input['permission']) : PERMISSION_ALL;		if (empty($team_name) || !$team_category || empty($introduction) || $permission < 0)		{			$this->errorOutput(PARAM_WRONG);		}		$data = array(			'team_name' => $team_name,			'team_category' => $team_category,			'introduction' => $introduction,			'tags' => $tags,			'notice' => $notice,			'permission' => $permission,		);		if ($team_logo)		{			$data['team_logo'] = $team_logo;		}		if ($team_type)		{			$data['team_type'] = $team_type;		}		return $data;	}		public function publish()	{			}		public function sort()	{			}		/**	 * 方法不存在的时候调用的方法	 */	public function none()	{		$this->errorOutput('调用的方法不存在');	}}$out = new teamUpdateApi();$action = $_INPUT['a'];if (!method_exists($out,$action)){	$action = 'none';}$out->$action();/*	//开启小组	public function open_team()	{		$team_ids = $this->validate_data();		$team_info = $this->team->team_by_id($team_ids, 2);		$close_ids = array();		$team_type = array();		$team_category = array();		foreach ($team_info as $v)		{			$close_ids[] = $v['team_id'];			$team_type[$v['team_type']][] = $v;			$team_category[$v['team_category']][] = $v;		}		if ($close_ids)		{			//恢复小组的关注			$option = new option();			$option->updateState(array(				'source' => 'team',				'source_id' => implode(',', $close_ids),				'state' => 1			));						//恢复小组的标签			$mark = new mark();			$markData = array(				'parent_id' => implode(',', $close_ids),				'state' => 1			);			$mark->update_mark_state($markData);			$result = $this->team->update(array('state' => 1), implode(',', $close_ids));			if ($result)			{				//发送通知				$option = new option();				$send_arr = array();				foreach ($team_info as $k => $v)				{					$send_con = array();					$send_con['from_id'] = 0;					$send_con['to_id'] = $v['creater_id'];					$send_con['content'] = '您的"' . $v['team_name'] . '"小组被管理员开启！';					$send_arr[] = $send_con;										//获取对应小组的关注的用户信息					$members_info = $option->members('team', $v['team_id'], 'attention', 0, -1);					if ($members_info['data']['attention'])					{						$send_con = array();						foreach ($members_info['data']['attention']['infos'] as $k => $val)						{							if ($val['user_id'] != $v['creater_id'])							{								$send_con['from_id'] = 0;								$send_con['to_id'] = $val['user_id'];								$send_con['content'] = '您关注的"' . $v['team_name'] . '"小组被管理员开启！';								$send_arr[] = $send_con;							}						}					}				}				if ($send_arr)				{					$this->notify->notify_send(json_encode($send_arr), 0);				}			}		}		else		{			$result = true;		}		if ($team_type)		{			//更新小组类型下小组数目			foreach ($team_type as $k=>$v)			{				$this->team->update_team_type($k, count($v));			}		}		if ($team_category)		{			//更新小组分类下小组数目			foreach ($team_category as $k=>$v)			{				$this->team->update_team_category($k, count($v));			}		}		$this->setXmlNode('team_info', 'team');		$this->addItem($result);		$this->output();	}	//关闭小组	public function close_team()	{		$team_ids = $this->validate_data();		$team_info = $this->team->team_by_id($team_ids, 1);		$audit_ids = array();		$team_type = array();		$team_category = array();		foreach ($team_info as $v)		{			$audit_ids[] = $v['team_id'];			$team_type[$v['team_type']][] = $v;			$team_category[$v['team_category']][] = $v;		}		if ($audit_ids)		{			//删除小组的关注			$option = new option();			$option->updateState(array(				'source' => 'team',				'source_id' => implode(',', $audit_ids),				'state' => 0			));						//删除小组的标签			$mark = new mark();			$markData = array(				'parent_id' => implode(',', $audit_ids),				'state' => 0			);			$mark->update_mark_state($markData);			$result = $this->team->update(array('state' => 2), implode(',', $audit_ids));			if ($result)			{				//发送通知				$option = new option();				$send_arr = array();				foreach ($team_info as $k => $v)				{					$send_con = array();					$send_con['from_id'] = 0;					$send_con['to_id'] = $v['creater_id'];					$send_con['content'] = '您的"' . $v['team_name'] . '"小组已被管理员关闭！';					$send_arr[] = $send_con;										//获取对应小组的关注的用户信息					$members_info = $option->members('team', $v['team_id'], 'attention', 0, -1);					if ($members_info['data']['attention'])					{						$send_con = array();						foreach ($members_info['data']['attention']['infos'] as $k => $val)						{							if ($val['user_id'] != $v['creater_id'])							{								$send_con['from_id'] = 0;								$send_con['to_id'] = $val['user_id'];								$send_con['content'] = '您关注的"' . $v['team_name'] . '"小组已被管理员关闭！';								$send_arr[] = $send_con;							}						}					}				}				if ($send_arr)				{					$this->notify->notify_send(json_encode($send_arr), 0);				}			}		}		else		{			$result = true;		}		if ($team_type)		{			//更新小组类型下小组数目			foreach ($team_type as $k=>$v)			{				$this->team->update_team_type($k, -count($v));			}		}		if ($team_category)		{			//更新小组分类下小组数目			foreach ($team_category as $k=>$v)			{				$this->team->update_team_category($k, -count($v));			}		}		$this->setXmlNode('team_info', 'team');		$this->addItem($result);		$this->output();	}		//小组数据批量打回	public function back()	{		$team_ids = $this->validate_data();		$team_info = $this->team->team_by_id($team_ids, 1);		$audit_id = array();		$team_type = array();		$team_category = array();		foreach ($team_info as $v)		{			$audit_id[] = $v['team_id'];			$team_type[$v['team_type']][] = $v;			$team_category[$v['team_category']] = $v;		}		if ($audit_id)		{			$result = $this->team->update(array('state' => 0), implode(',', $audit_id));			$option = new option();			foreach ($team_info as $v)			{					$data = array(					'user_id' => $v['creater_id'],					'source' => 'team',					'source_id' => $v['team_id'],					'action' => 'attention'				);				$option_info = $option->get_relation($data);				if ($option_info['total'] > 0)				{					$option->drop_relation($v['creater_id'], 'team', $v['team_id'], 'attention');					$this->team->update(array('attention_num' => -1), $v['team_id'], true);				}			}		}		else		{			$result = true;		}		if ($team_type)		{			//更新小组类型下小组数目			foreach ($team_type as $k=>$v)			{				$this->team->update_team_type($k, -count($v));			}		}		if ($team_category)		{			//更新小组分类下小组数目			foreach ($team_category as $k=>$v)			{				$this->team->update_team_category($k, -count($v));			}		}		$this->setXmlNode('team_info', 'team');		$this->addItem($result);		$this->output();	}*/