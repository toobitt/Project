<?phprequire_once './global.php';require_once './lib/team.class.php';require_once './lib/topic.class.php';include_once ROOT_PATH . '/lib/class/team.class.php';include_once ROOT_PATH . '/lib/class/option.class.php';include_once ROOT_PATH . 'lib/class/mark.class.php';class topicUpdateApi extends outerUpdateBase{	private $team;	private $topic;	private $teamApi;		public function __construct()	{		parent::__construct();		$this->team = new teamClass();		$this->topic = new topicClass();		$this->teamApi = new team();	}		public function __destruct()	{		parent::__destruct();		unset($this->team);		unset($this->topic);		unset($this->teamApi);	}		/**	 * 创建话题	 */	public function create()	{		//处理传递的数据		$data = $this->filter_data();		if ($data['source_name'] == 'team')		{			//验证来源是否存在			$team_info = $this->team->detail($data['source_id'], 1);			if (!$team_info) $this->errorOutput(TEAM_NO_EXISTS);		}		$data['creater_id'] = $this->user['user_id'];		$data['creater_name'] = $this->user['user_name'];		$data['pub_time'] = TIMENOW;		$data['last_poster_name'] = $this->user['user_name'];		$data['last_time'] = TIMENOW;		$data['views'] = 1;		$data['app_name'] = $this->user['display_name'];				$reply_data = array();		$reply_data['content'] = $data['content'];		unset($data['content']);		//创建话题		$result = $this->topic->create($data);				$reply_data['topic_id'] = $result['topic_id'];		$reply_data['subject'] = $result['subject'];		$reply_data['poster_id'] = $result['creater_id'];		$reply_data['poster_name'] = $result['creater_name'];		$reply_data['pub_time'] = $result['pub_time'];		$reply_data['update_time'] = $result['pub_time'];		$reply_data['from_ip'] = hg_getip();		$reply_data['reply_num'] = 0;		$reply_data['floor'] = 0;		$reply_data['app_name'] = $this->user['display_name'];		//对应话题数据的创建		$reply = $this->topic->add_reply($reply_data);				//附件图片的操作		if (isset($this->input['material']) && $this->input['material'])		{			$img_info = unserialize(trim(urldecode($this->input['material'])));						$materialData = array(				'user_id' => $result['creater_id'],				'user_name' => $result['creater_name'],				'topic_id' => $result['topic_id'],				'team_id' => $data['source_id'],				'reply_id' => 0,			);			if(is_array($img_info) && !empty($img_info))			{				$materialNum = $this->topic->add_material($img_info, $materialData); //插入附件				//更新话题下的附件个数				$this->topic->update(array('material_num' => $materialNum), $result['topic_id'], true);			}		}				//视频添加		if (isset($this->input['video_url']) && $this->input['video_url'])		{			$video_url = trim(urldecode($this->input['video_url']));			$this->teamApi->add_video($video_url, 'topic', $result['topic_id']);		}				//标签操作		if (isset($this->input['topic_mark']) && $this->input['topic_mark'])		{			$topic_mark = trim(urldecode($this->input['topic_mark']));			$mark = new mark();			$mark_data = array(				'source' => 'topic',				'source_id' => $result['topic_id'],				'parent_id' => $data['source_id'],				'action' => 'topic_tag',				'user_id' => $result['creater_id'],				'name' => $topic_mark			);			$result_mark = $mark->create_source_id_mark($mark_data);			if ($result_mark)			{				$result['topic_mark'] = $topic_mark;				$this->topic->update(array('tags' => $topic_mark), $result['topic_id']);			}			else			{				$this->errorOutput(FAIL_OP);			}		}		//插入搜索		$this->teamApi->add_search($result['topic_id'], 'topic');		//更新小组的话题数		$this->team->update(array('topic_num' => 1), $result['source_id'], true);		$this->setXmlNode('topic_info' , 'topic');		$this->addItem($result['topic_id']);		$this->output();	}		/**	 * 更新话题的查看数和赞的个数	 */	public function update_total()	{		$view_num = intval($this->input['view_num']);		$favor_num = intval($this->input['favor_num']);		$data = array();		if ($visit_num > 0) $data['visit_num'] = $visit_num;		if ($favor_num > 0) $data['favor_num'] = $favor_num;				$topic_id = intval($this->input['topic_id']);				//检测对应的话题是否存在		$topic_info = $this->topic->detail($topic_id, 1);		if ($topic_info && $data)		{			$result = $this->topic->update($data, $topic_id, true);			$this->addItem($result);			$this->output();		}	}		/**	 * 编辑话题和回复	 */	public function update()	{		$rid = isset($this->input['rid']) ? intval($this->input['rid']) : -1;		if ($rid < 0) $this->errorOutput(PARAM_WRONG);				//检测编辑的话题或回复是否存在		$reply_info = $this->topic->detail_reply($rid);		if (!$reply_info) $this->errorOutput(TEAM_NO_TOPIC);				//检测是否开启讨论		$topic_info = $this->topic->detail($reply_info['topic_id']);		if ($topic_info['state'] == 2) $this->errorOutput(TOPIC_CLOSE);				//判断用户权限		$user_type = $this->team->check_user_type($this->user['user_id'], $topic_info['source_id']);				if ($user_type['level'])		{			if ($user_type['level'] == 4) $this->errorOutput(NO_PERMISSION);			if ($this->user['user_id'] != $reply_info['poster_id'])			{				$this->errorOutput(NO_PERMISSION);			}		}		$data = array();		$subject = isset($this->input['subject']) ? trim(urldecode($this->input['subject'])) : '';		$content = isset($this->input['content']) ? trim(urldecode($this->input['content'])) : '';		if (($reply_info['subject'] && empty($subject)) || empty($content))		{			$this->errorOutput(PARAM_WRONG);		}		if ($reply_info['subject'] != $subject)		{			$data['subject'] = $subject;		}		if ($reply_info['content'] != $content)		{			$data['content'] = $content;		}		$data['update_time'] = TIMENOW;		$data['from_ip'] = hg_getip();		//保存编辑信息		if ($data['subject'])		{			$this->topic->update(array('subject' => $data['subject']), $reply_info['topic_id']);		}		$result = $this->topic->update_reply($data, $rid);		//附件的操作		if (isset($this->input['material']) && !$reply_info['reply_user_id'])		{			$img_info = unserialize(urldecode($this->input['material']));			$materialData = array(				'user_id' => $reply_info['poster_id'],				'user_name' => $reply_info['poster_name'],				'topic_id' => $reply_info['topic_id'],				'team_id' => $topic_info['source_id'],				'reply_id' => 0,			);			if(is_array($img_info) && !empty($img_info))			{				$materialNum = $this->topic->add_material($img_info, $materialData); //插入附件								//更新话题下的附件个数				$this->topic->update(array('material_num' => $materialNum), $reply_info['topic_id'], true);			}		}				//视频修改		if (isset($this->input['video_url']) && !$reply_info['reply_user_id'])		{			$video_url = trim(urldecode($this->input['video_url']));			$video_info = $this->teamApi->show_video($reply_info['topic_id'], 'topic');			if ($video_url != $video_info['url'])			{				$video->update_video($video_info['id'], $video_url, 'topic', $reply_info['topic_id']);			}		}				//标签修改		if (isset($this->input['topic_mark']) && !$reply_info['reply_user_id'])		{			$topic_mark = trim(urldecode($this->input['topic_mark']));			$mark = new mark();			$data = array(				'source' => 'topic',				'source_id' => $reply_info['topic_id'],				'parent_id' => $topic_info['source_id'],				'action' => 'topic_tag',				'user_id' => $reply_info['poster_id']			);			if ($topic_mark)			{				$data['name'] = $topic_mark;			}			$result_mark = $mark->update_source_id_mark($data);			if ($result_mark)			{				$result['topic_mark'] = $topic_mark;				$this->topic->update(array('tags' => $topic_mark), $reply_info['topic_id']);			}			else			{				$this->errorOutput(FAIL_OP);			}		}		if (!$reply_info['reply_user_id'])		{			//更新搜索			$this->teamApi->update_search($reply_info['topic_id'], 'topic');		}		$this->addItem($result);		$this->output();	}		/**	 * 删除附件操作	 */	public function del_img()	{		$topic_id = intval($this->input['t_id']);		$topic_info = $this->topic->detail($topic_id, 1);		if (!$topic_info['topic_id']) $this->errorOutput(TEAM_NO_TOPIC);		if ($topic_info['creater_id'] != $this->user['user_id'])		{			$this->errorOutput(NO_PERMISSION);		}		$ids = trim(urldecode($this->input['ids']));		$ids = str_replace('，', ',', $ids);			$id_array = explode(',', $ids);		//过滤数组中的空值		$id_array = array_filter($id_array);		if(empty($id_array))		{			$this->errorOutput(PARAM_WRONG);		}		$img_ids = implode(',', $id_array);		$result = $this->topic->del_img($topic_id, $img_ids);		$this->addItem($result);		$this->output();	}		/**	 * (加精|置顶)操作	 */	public function topic_op()	{		$topic_id = isset($this->input['topic_id']) ? intval($this->input['topic_id']) : -1;		if ($topic_id < 0) $this->errorOutput(PARAM_WRONG);		$topic_info = $this->topic->detail($topic_id, 1);		if (!$topic_info) $this->errorOutput(TEAM_NO_TOPIC);		$action = trim(urldecode($this->input['action']));		$op = trim(urldecode($this->input['op']));		if (!in_array($action, array('is_essence', 'is_sticky')) || !in_array($op, array('add', 'reduction')))		{			$this->errorOutput(PARAM_WRONG);		}		$condition = array();		if ($op == 'add')		{			$condition[$action] = 1;		}		elseif ($op == 'reduction')		{			$condition[$action] = 0;		}		$result = $this->topic->update($condition, $topic_id);		$this->addItem($result);		$this->output();	}		/**	 * (删除|屏蔽)话题	 */	public function delete()	{		$topic_id = isset($this->input['topic_id']) ? intval($this->input['topic_id']) : -1;		if ($topic_id < 0) $this->errorOutput(PARAM_WRONG);		$topic_info = $this->topic->detail($topic_id, 1);		if (!$topic_info) $this->errorOutput(TEAM_NO_TOPIC);		$action = trim(urldecode($this->input['action']));		if (empty($action)) $action = 'drop';		$condition = array();		if ($action == 'drop')		{			$condition['state'] = 0;		}		elseif ($action == 'hidden')		{			$condition['state'] = -1;		}		//删除话题回复		$this->topic->update_reply($condition, '', $topic_id);				//删除附件		$this->topic->update_topic_material($topic_id, 0);				//删除视频		$this->topic->update_topic_video($topic_id, 0);				//删除赞		$option = new option();		$favorData = array(			'source' => 'topic',			'action' => 'favor',			'source_id' => $topic_id,			'state' => 0		);		$option->updateState($favorData);				//删除标签		$mark = new mark();		$markData = array(			'source' => 'topic',			'source_id' => $topic_id,			'state' => 0		);		$mark->update_mark_state($markData);				//删除搜索		$this->teamApi->delete_search($topic_id, 'topic');				//删除话题		$result = $this->topic->update($condition, $topic_id);				if ($action == 'drop')		{			//更新话题数			$this->team->update(array('topic_num' => -1), $topic_info['source_id'], true);		}				$this->addItem($result);		$this->output();	}		/**	 * (删除|屏蔽)回复	 */	public function drop_reply()	{		$rid = isset($this->input['rid']) ? intval($this->input['rid']) : -1;		if ($rid < 0) $this->errorOutput(PARAM_WRONG);		$reply_info = $this->topic->detail_reply($rid);		if (!$reply_info) $this->errorOutput(TEAM_NO_TOPIC);		$action = trim(urldecode($this->input['action']));		if (empty($action)) $action = 'drop';		$condition = array();		if ($action == 'drop')		{			$condition['state'] = 0;		}		elseif ($action == 'hidden')		{			$condition['state'] = -1;		}		$result = $this->topic->update_reply($condition, $rid);				if ($action == 'drop')		{			//更新回复数			$this->topic->update(array('replies' => -1), $reply_info['topic_id'], true);		}				$this->addItem($result);		$this->output();	}		/**	 * 回复话题操作	 */	public function reply()	{		$rid = intval($this->input['rid']);		$content = trim(urldecode($this->input['content']));		if (!$rid || empty($content))		{			$this->errorOutput(PARAM_WRONG);		}		$reply_info = $this->topic->detail_reply($rid);		if (!$reply_info) $this->errorOutput(PARAM_WRONG);		//获取当前最大楼层数		$max_floor = $this->topic->get_max_floor($reply_info['topic_id']);		$data = array(			'topic_id' => $reply_info['topic_id'],			'poster_id' => $this->user['user_id'],			'poster_name' => $this->user['user_name'],			'reply_num' => $reply_info['rid'],			'floor' => $max_floor,			'content' => $content,			'pub_time' => TIMENOW,			'from_ip' => hg_getip(),			'reply_user_id' => $reply_info['poster_id'],			'reply_user_name' => $reply_info['poster_name'],			'reply_content' => $reply_info['content'],//$reply_info['floor'] ? $reply_info['content'] : ''			'app_name' => $this->user['display_name']		);		if ($reply_info['reply_user_id'] == 0)		{			$data['reply_num'] = 0;		}		$result = $this->topic->add_reply($data);		if ($result)		{			//更新话题的回复数			$this->topic->update(array('replies' => 1), $reply_info['topic_id'], true);						//更新话题的最后发布者和时间			$updateData = array(				'last_poster_name' => $data['poster_name'],				'last_time' => $data['pub_time']			);			$this->topic->update($updateData, $reply_info['topic_id']);						$this->addItem($result);		}		$this->output();	}		/**	 * 处理传递的参数	 */	private function filter_data()	{		$source_id = intval($this->input['source_id']);		$source_name = trim(urldecode($this->input['source_name']));		$subject = trim(urldecode($this->input['subject']));		$content = trim(urldecode($this->input['content']));				if ($source_id <= 0 || empty($source_name))		{			$this->errorOutput(PARAM_WRONG);		}		return array(			'source_id' => $source_id,			'source_name' => $source_name,			'subject' => $subject,			'content' => $content,		);	}		/**	 * 方法不存在的时候调用的方法	 */	public function none()	{		$this->errorOutput('调用的方法不存在');	}}$out = new topicUpdateApi();$action = $_INPUT['a'];if (!method_exists($out,$action)){	$action = 'none';}$out->$action();