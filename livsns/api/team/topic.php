<?phprequire_once './global.php';require_once './lib/topic.class.php';include_once ROOT_PATH . '/lib/class/team.class.php';class topicApi extends outerReadBase{	private $topic;		public function __construct()	{		parent::__construct();		$this->topic = new topicClass();	}		public function __destruct()	{		parent::__destruct();		unset($this->topic);	}		/**	 * 获取话题信息	 */	public function show()	{		$offset = isset($this->input['offset']) ? intval($this->input['offset']) : 0;		$count = isset($this->input['count']) ? intval($this->input['count']) : 20;		$condition = $this->filter_data();		$topics = $this->topic->show($offset, $count, $condition);		$this->setXmlNode('topic_info', 'topic');		if(!empty($topics))		{			foreach($topics as $topic)			{				$this->addItem($topic);			}		}		$this->output();	}		/**	 * 获取话题总数	 */	public function count()	{		$condition = $this->filter_data();		$info = $this->topic->count($condition);		echo json_encode($info);	}		/**	 * 根据话题的ID获取信息	 */	public function get_topic_by_id()	{		$topic_ids = trim(urldecode($this->input['topic_ids']));		$topics = $this->topic->topic_by_id($topic_ids, 1);		$this->setXmlNode('topic_info', 'topic');		$this->addItem($topics);		$this->output();	}		/**	 * 获取单个话题的信息	 */	public function detail()	{		if (isset($this->input['id']))		{			$topic_id = intval($this->input['id']);		}		elseif (isset($this->input['topic_id']))		{			$topic_id = intval($this->input['topic_id']);		}		else		{			$topic_id = -1;		}		if ($topic_id < 0) $this->errorOutput(PARAM_WRONG);		$topic = $this->topic->detail($topic_id, 1);		if ($topic['topic_id'])		{			//获取附件信息			$condition = 'topic_id = ' . $topic_id;			$topic['material'] = $this->topic->get_material_info($condition, '');			//获取视频信息			$video = new team();			$topic['video'] = $video->show_video($topic_id, 'topic');			$topic['id'] = $topic_id;		}		$this->addItem($topic);		$this->output();	}		/**	 * 某个话题的回复列表	 */	public function reply_list()	{		$offset = isset($this->input['offset']) ? intval($this->input['offset']) : 0;		$count = isset($this->input['count']) ? intval($this->input['count']) : 20;		$topic_id = intval($this->input['topic_id']);		$reply_list = $this->topic->reply_list($topic_id, $offset, $count);		$this->setXmlNode('reply_info', 'reply');		if (!empty($reply_list))		{			foreach ($reply_list as $reply)			{				$this->addItem($reply);			}		}		$this->output();	}		/**	 * 某个话题的回复总数	 */	public function reply_count()	{		$topic_id = intval($this->input['topic_id']);		$info = $this->topic->reply_count($topic_id);		echo json_encode($info);	}		/**	 * 单个回复信息	 */	public function detail_reply()	{		$rid = intval($this->input['rid']);		$reply_info = $this->topic->detail_reply($rid);		$this->setXmlNode('reply_info', 'reply');		$this->addItem($reply_info);		$this->ootput();	}		/**	 * 获取附件信息	 */	public function material_info()	{		$topic_id = trim(urldecode($this->input['topic_id']));		$condition = 'topic_id in (' . $topic_id . ')';		$material_info = $this->topic->get_material_info($condition, false);		if (!empty($material_info))		{			foreach ($material_info as $material)			{				$this->addItem_withkey($material['topic_id'], $material);			}		}		$this->output();	}		/**	 * 处理传递的数据	 */	private function filter_data()	{		return array(			'key' => trim(urldecode($this->input['k'])),			'user_name' => trim(urldecode($this->input['user_name'])),			'start_time' => strtotime(trim(urldecode($this->input['start_time']))),			'end_time' => strtotime(trim(urldecode($this->input['end_time']))),			'date_search' => trim($this->input['date_search']),			'state' => 2,			'team_id' => trim($this->input['team_id']),			'thread_img' => trim($this->input['thread_img']),			'order' => array('is_sticky' => 'desc', 'is_essence' => 'desc', 'topic_id' => 'desc')		);	}}$out = new topicApi();$action = $_INPUT['a'];if (!method_exists($out,$action)){	$action = 'show';}$out->$action();