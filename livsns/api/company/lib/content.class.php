<?php/*************************************************************************** * $Id: content.class.php 17481 2013-04-19 09:36:46Z yaojian $ ***************************************************************************/class content extends InitFrm{    public function __construct()    {        parent::__construct();    }    public function __destruct()    {        parent::__destruct();    }    /**     *     * @Description: todo     * @author     Kin     * @date       2014-5-27 上午09:09:34     */    public function show($data)    {        $sql = 'SELECT * FROM ' . DB_PREFIX . 'content WHERE 1';        //获取查询条件        $condition = $this->get_condition($data['condition']);        $sql .= $condition;        if ($data['count'] != -1) {            $sql .= ' LIMIT ' . $data['offset'] . ' , ' . $data['count'];        }        $query           = $this->db->query($sql);        $info            = array();        $app_uniqueid    = array();        $columnIds       = array();        $columnNames     = array();        $clickAndComment = array();        $publishIds      = array();        $sourceId        = array();        $contentId       = array();        while ($rows = $this->db->fetch_array($query)) {            $app_uniqueid[$rows['id']] = $rows['app_uniqueid'];            //审核状态            $rows['state_name'] = $this->settings['state'][$rows['state']];            if ($rows['column_id'] && unserialize($rows['column_id'])) {                $rows['columns'] = unserialize($rows['column_id']);                if ($rows['columns'] && is_array($rows['columns']) && ! empty($rows['columns'])) {                    $columnIds = array_merge($columnIds, array_keys($rows['columns']));                }            }            if ($rows['publish_id']) {                $publishIds[] = $rows['publish_id'];            }            if ($rows['source'] == 'vote' && $rows['source_id']) {                $sourceId[] = $rows['source_id'];            }            if ($rows['source'] == 'news' && $rows['source_id']) {                $contentId[] = $rows['source_id'];            }            if ($rows['indexpic']) {                $rows['indexpic'] = @unserialize($rows['indexpic']) ? @unserialize($rows['indexpic']) : '';            }            $info[] = $rows;        }        //重新获取栏目名称        if (! empty($columnIds) && $this->settings['App_publishcontent']) {            $columnIds = implode(',', array_unique($columnIds));            include_once ROOT_PATH . 'lib/class/publishconfig.class.php';            $publishconfig = new publishconfig();            $columnNames   = $publishconfig->get_columnname_by_ids('id,name', $columnIds);            //获取对应的点击次数            $clickAndComment = $publishconfig->getClickCountByPublishids($publishIds);        }        //获取投票数        if (! empty($sourceId) && $this->settings['App_vote']) {            $sourceId = implode(',', array_unique($sourceId));            include_once ROOT_PATH . 'lib/class/vote.class.php';            $vote     = new vote();            $voteInfo = $vote->getTotal($sourceId);        }        //获取扩展字段内容        if (! empty($contentId) && $this->settings['App_catalog']) {            $contentId = implode(',', array_unique($contentId));            include_once ROOT_PATH . 'lib/class/catalog.class.php';            $catalog         = new catalog();            $param[0]        = array(                'app_uniqueid' => 'news',                'mod_uniqueid' => 'news',                'content_id'   => $contentId,            );            $catalog_Content = $catalog->getAllcontent($param);        }        if (! empty($app_uniqueid)) {            $uniqueid = implode(',', array_unique($app_uniqueid));            include_once ROOT_PATH . 'lib/class/auth.class.php';            $auth     = new Auth();            $app_info = $auth->get_app('', $uniqueid);        }        if (! empty($info) && ! empty($app_info) && $app_info && is_array($app_info)) {            foreach ($info as $key => $val) {                if ($val['columns'] && is_array($val['columns']) && ! empty($val['columns'])) {                    foreach ($val['columns'] as $columnId => $columnName) {                        $info[$key]['columns'][$columnId] = $columnNames[$columnId];                    }                }                foreach ($app_info as $app) {                    if ($val['app_uniqueid'] == $app['bundle']) {                        if ($app['bundle'] == 'news') {                            $info[$key]['source_name'] = '文章';                        } else {                            $info[$key]['source_name'] = $app['name'];                        }                    }                }            }        }        foreach ($info as $k => $v) {            $info[$k]['catalog_type'] = array();            foreach ($clickAndComment as $ko => $vo) {                if (intval($info[$k]['publish_id']) == intval($ko)) {                    $info[$k]['comment_count'] = $vo['comment_num'];                    $info[$k]['click_num']     = $vo['click_num'];                }            }            //投票参与数            if (is_array($voteInfo)) {                foreach ($voteInfo as $ko => $vo) {                    if ($ko == $v['source_id']) {                        $info[$k]['vote_total'] = $vo['person_total'];                    }                }            }            foreach ($catalog_Content as $ko => $vo) {                $catalog_type = array();                if ($ko == $v['source_id']) {                    foreach ($vo as $koo => $voo) {                        array_push($catalog_type, $koo);                    }                    $info[$k]['catalog_type'] = array_unique($catalog_type);                }            }        }        return $info;    }    /**     * 获取数据总数     *     * @param Array $data     */    public function count($data)    {        $condition = $this->get_condition($data);        $sql       = 'SELECT COUNT(id) AS total FROM ' . DB_PREFIX . 'content WHERE 1';        if ($condition)            $sql .= $condition;        return $this->db->query_first($sql);    }    /**     * 获取单个数据     *     * @param String $table     * @param Array  $data     */    public function detail($table, $data)    {        $sql = 'SELECT * FROM ' . DB_PREFIX . $table . ' WHERE 1';        foreach ($data as $k => $v) {            if (is_int($v) || is_float($v)) {                $sql .= ' AND ' . $k . ' = ' . $v;            } elseif (is_string($v)) {                $sql .= ' AND ' . $k . ' = "' . $v . '"';            }        }        return $this->db->query_first($sql);    }    /**     * 创建数据     *     * @param String $table 表     * @param Array  $data  数据     * @param String $pk    主键     */    public function create($table, $data, $pk = 'id')    {        if (! $table || ! is_array($data))            return FALSE;        $fields = '';        foreach ($data as $k => $v) {            if (is_string($v)) {                $fields .= $k . "='" . $v . "',";            } elseif (is_int($v) || is_float($v)) {                $fields .= $k . '=' . $v . ',';            }        }        $fields = rtrim($fields, ',');        $sql    = 'INSERT INTO ' . DB_PREFIX . $table . ' SET ' . $fields;        $this->db->query($sql);        $data[$pk] = $this->db->insert_id();        return $data;    }    /**     * 更新数据     *     * @param String  $table  表     * @param Array   $data   数据     * @param Array   $idsArr 条件     * @param Boolean $flag     */    public function update($table, $data, $idsArr, $flag = FALSE)    {        if (! $table || ! is_array($data) || ! is_array($idsArr))            return FALSE;        $fields = '';        foreach ($data as $k => $v) {            if ($flag) {                $v = $v > 0 ? '+' . $v : $v;                $fields .= $k . '=' . $k . $v . ',';            } else {                if (is_string($v)) {                    $fields .= $k . "='" . $v . "',";                } elseif (is_int($v) || is_float($v)) {                    $fields .= $k . '=' . $v . ',';                }            }        }        $fields = rtrim($fields, ',');        $sql    = 'UPDATE ' . DB_PREFIX . $table . ' SET ' . $fields . ' WHERE 1';        if ($idsArr) {            foreach ($idsArr as $key => $val) {                if (is_int($val) || is_float($val)) {                    $sql .= ' AND ' . $key . ' = ' . $val;                } elseif (is_string($val)) {                    $sql .= ' AND ' . $key . ' in (' . $val . ')';                }            }        }        return $this->db->query($sql);    }    /**     * 删除数据     * @paramString $table     *     * @param Array $data     */    public function delete($table, $data)    {        if (empty($table) || ! is_array($data))            return FALSE;        $sql = 'DELETE FROM ' . DB_PREFIX . $table . ' WHERE 1';        foreach ($data as $k => $v) {            if (is_int($v) || is_float($v)) {                $sql .= ' AND ' . $k . ' = ' . $v;            } elseif (is_string($v)) {                $sql .= ' AND ' . $k . ' IN (' . $v . ')';            }        }        return $this->db->query($sql);    }    /**     * 获取查询条件     *     * @param Array $data     */    private function get_condition($data)    {        $condition = '';        //获取无栏目数据        if ($data['no_column_data']) {            $condition .= ' AND column_id = ""';        }        //根据栏目获取数据,不支持批量        if (array_key_exists('column_id', $data) && $data['site_id']) {            $column_id = intval($data['column_id']) ? intval($data['column_id']) : 0;            if ($column_id > 0) {                include_once ROOT_PATH . 'lib/class/publishconfig.class.php';                $auth   = new publishconfig();                $fields = isset($this->input['fields']) ? trim(urldecode($this->input['fields'])) : '*';                $fid    = $column_id ? $column_id : 0;                if ($fid < 0)                    $this->errorOutput(PARAM_WRONG);                $where            = ' AND site_id = ' . $data['site_id'] . ' AND fid = ' . $fid . ' ORDER BY order_id ASC ';                $child_columns    = $auth->get_column($fields, $where);                $child_column_ids = array();                if ($child_columns && is_array($child_columns) && ! empty($child_columns)) {                    foreach ($child_columns as $val) {                        $child_column_ids[] = $val['id'];                    }                }                if (! empty($child_column_ids)) {                    $child_column_ids = implode(',', $child_column_ids);                    $column_id        = $column_id . ',' . $child_column_ids;                    $sql              = 'SELECT cid FROM ' . DB_PREFIX . 'column_cid WHERE column_id IN ( ' . $column_id . ')';                    $query            = $this->db->query($sql);                    $arr              = array();                    while ($row = $this->db->fetch_array($query)) {                        $arr[] = $row['cid'];                    }                    if (! empty($arr)) {                        $condition .= " AND id IN (" . implode(',', $arr) . ")";                    } else {                        $condition .= " AND id = -1 ";                    }                } else {                    $column_id = $column_id;                    $sql       = 'SELECT cid FROM ' . DB_PREFIX . 'column_cid WHERE column_id IN ( ' . $column_id . ')';                    $query     = $this->db->query($sql);                    $arr       = array();                    while ($row = $this->db->fetch_array($query)) {                        $arr[] = $row['cid'];                    }                    if (! empty($arr)) {                        $condition .= " AND id IN (" . implode(',', $arr) . ")";                    } else {                        $condition .= " AND id = -1 ";                    }                }            } else {                $condition .= " AND id = -1 ";            }        }        //查询的关键字        if ($data['keyword']) {            $condition .= " AND title LIKE '%" . $data['keyword'] . "%'";        }        //根据站点查询信息        if (isset($data['site_id'])) {            if (is_int($data['site_id'])) {                $condition .= " AND site_id = " . $data['site_id'];            } elseif (is_string($data['site_id'])) {                $condition .= " AND site_id IN (" . $data['site_id'] . ")";            }        }        //根据ID获取数据        if ($data['id']) {            if (is_int($data['id']) && $data['id'] > 0) {                $condition .= " AND id = " . $data['id'];            } elseif (is_string($data['id'])) {                $condition .= " AND id IN (" . $data['id'] . ")";            }        }        //根据用户获取数据        if ($data['uid']) {            if (is_int($data['uid']) && $data['uid'] > 0) {                $condition .= " AND user_id = " . $data['uid'];            } elseif (is_string($data['uid'])) {                $condition .= " AND user_id IN (" . $data['uid'] . ")";            }        }        //查询状态        switch ($data['state']) {            case 1:                $condition .= "";  //所有状态                break;            case 2:                $condition .= " AND state = 0";  //待审核                break;            case 3:                $condition .= " AND state = 1";  //已审核                break;            case 4:                $condition .= " AND state = 2";  //未通过                break;            default:                break;        }        //查询类型        if ($data['type'] && $data['type'] != 'all') {            $condition .= " AND source = '" . $data['type'] . "'";        }        if ($data['start_time']) {            $start_time = strtotime($data['start_time']);            $condition .= " AND create_time >= " . $start_time;        }        if ($data['end_time']) {            $end_time = strtotime($data['end_time']);            $condition .= " AND create_time < " . $end_time;        }        //查询发布的时间        if ($data['date_search']) {            $today    = strtotime(date('Y-m-d'));            $tomorrow = strtotime(date('Y-m-d', TIMENOW + 24 * 3600));            switch ($data['date_search']) {                case 1://所有时间段                    break;                case 2://昨天的数据                    $yesterday = strtotime(date('y-m-d', TIMENOW - 24 * 3600));                    $condition .= " AND create_time > '" . $yesterday . "' AND create_time < '" . $today . "'";                    break;                case 3://今天的数据                    $condition .= " AND create_time > '" . $today . "' AND create_time < '" . $tomorrow . "'";                    break;                case 4://最近3天                    $last_threeday = strtotime(date('y-m-d', TIMENOW - 2 * 24 * 3600));                    $condition .= " AND create_time > '" . $last_threeday . "' AND create_time < '" . $tomorrow . "'";                    break;                case 5://最近7天                    $last_sevenday = strtotime(date('y-m-d', TIMENOW - 6 * 24 * 3600));                    $condition .= " AND create_time > '" . $last_sevenday . "' AND create_time < '" . $tomorrow . "'";                    break;                default://所有时间段                    break;            }        }        //排序        $sort = ' ORDER BY ';        if ($data['order'] && is_array($data['order'])) {            foreach ($data['order'] as $k => $v) {                $sort .= $k . ' ' . $v . ', ';            }            $sort = rtrim($sort, ', ');        } else {            $sort .= ' order_id DESC, id DESC ';        }        $condition = $condition . $sort;        return $condition;    }    /**     *     * @Description: 建立栏目和内容ID的关系     * @author     Kin     * @date       2014-5-22 下午02:06:45     */    public function column_cid($column_id, $cid)    {        $cid = intval($cid);        if (! $column_id) {            return $this->del_column_cid($cid);        }        $columnIds   = explode(',', $column_id);        $newRelation = array();        foreach ($columnIds as $val) {            $newRelation[] = $val;        }        $sql   = 'SELECT * FROM ' . DB_PREFIX . 'column_cid WHERE cid = ' . $cid;        $query = $this->db->query($sql);        $arr   = array();        while ($row = $this->db->fetch_array($query)) {            $arr[$row['id']] = $row['column_id'];        }        //增加        $addRelation = array_diff($newRelation, $arr);        if (! empty($addRelation)) {            $sql = 'INSERT INTO ' . DB_PREFIX . 'column_cid (id, column_id, cid) VALUES';            foreach ($addRelation as $val) {                $sql .= '( "", ' . $val . ',' . $cid . ') ,';            }            $sql = rtrim($sql, ',');            $this->db->query($sql);        }        $delRelation = array_diff($arr, $newRelation);        if (! empty($delRelation)) {            $delId = array_keys($delRelation);            $sql   = 'DELETE FROM ' . DB_PREFIX . 'column_cid WHERE id IN (' . implode(',', $delId) . ')';            $this->db->query($sql);        }    }    public function del_column_cid($cid)    {        if ($cid) {            $sql = 'DELETE FROM ' . DB_PREFIX . 'column_cid WHERE cid IN (' . $cid . ')';            $this->db->query($sql);        }        return $cid;    }    public function get_columnPath_by_ids($siteId, $columnIds)    {        if (! $columnIds || ! $siteId) {            return '';        }        $columns   = array();        $columnIds = is_string($columnIds) ? explode(',', $columnIds) : $columnIds;        include_once ROOT_PATH . 'lib/class/publishconfig.class.php';        $publishconfig = new publishconfig();        $column        = $publishconfig->get_column('id,name,childs,is_last,fid,parents', ' AND site_id = ' . $siteId);        if ($column && is_array($column) && ! empty($column)) {            foreach ($column as $key => $val) {                $columns[$val['id']] = $val;            }        }        $columnPath = array();        foreach ($columnIds as $columnId) {            $columnPath[$columnId] = $this->get_columnPath($columnId, $columns);        }        return $columnPath;    }    /**     *     * @Description: 此处未用无限级分类实现，等待以后整改     * @author     Kin     * @date       2014-7-22 上午11:23:01     */    private function get_columnPath($columnId, $columns)    {        if ($columns[$columnId]['fid'] != 0) {            return $path = $columns[$columns[$columnId]['fid']]['name'] . '>' . $columns[$columnId]['name'];        } else {            return $columns[$columnId]['name'];        }    }        /**     * 获取外链内容的总数     */    public function getOutlinkCounts($site_id = 0)    {    	$sql = "SELECT COUNT(id) AS total FROM " . DB_PREFIX . "content where outlink != '' and site_id = ".$site_id;    	$count = $this->db->query_first($sql);    	return $count;    }        public function new_update($table, $data, $idsArr, $flag = FALSE)    {    	if (! $table || ! is_array($data) || ! is_array($idsArr))    		return FALSE;    	$fields = '';    	foreach ($data as $k => $v) {    		if ($flag) {    			$v = $v > 0 ? '+' . $v : $v;    			$fields .= $k . '=' . $k . $v . ',';    		} else {    			if (is_string($v)) {    				$fields .= $k . "='" . $v . "',";    			} elseif (is_int($v) || is_float($v)) {    				$fields .= $k . '=' . $v . ',';    			}    		}    	}    	$fields = rtrim($fields, ',');    	$sql    = 'UPDATE ' . DB_PREFIX . $table . ' SET ' . $fields . ' WHERE 1';    	if ($idsArr) {    		foreach ($idsArr as $key => $val) {    			if (is_int($val) || is_float($val)) {    				$sql .= ' AND ' . $key . ' = ' . $val;    			} elseif (is_string($val)) {    				$sql .= ' AND ' . $key . ' in (\'' . $val . '\')';    			}    		}    	}    	return $this->db->query($sql);    }}?>