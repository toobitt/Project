<?php/**************************************************************************** LivSNS 0.1* (C)2004-2010 HOGE Software.** $Id: content.php 7586 2013-04-19 09:40:56Z yaojian $***************************************************************************/require_once './global.php';include_once CUR_CONF_PATH . 'lib/content.class.php';define('MOD_UNIQUEID', 'content');  //模块标识class contentApi extends appCommonFrm{	private $api;		public function __construct()	{		parent::__construct();		$this->api = new content();	}	public function __destruct()	{		parent::__destruct();		unset($this->api);	}		/**	 * 获取内容信息	 */	public function show()	{		$offset = isset($this->input['offset']) ? intval($this->input['offset']) : 0;		$count = isset($this->input['count']) ? intval($this->input['count']) : 20;		$condition = $this->filter_data();		$data = array(			'offset' => $offset,			'count' => $count,			'condition' => $condition		);		$content_info = $this->api->show($data);		foreach($content_info as $content){			$this->addItem($content);		}	// 		$this->setXmlNode('content_info', 'content');		$this->output();	}		/**	 * 获取内容总数	 */	public function count()	{		$condition = $this->filter_data();		$info = $this->api->count($condition);		echo json_encode($info);	}		/**	 * 获取单个内容	 */	public function detail()	{		$id = intval($this->input['id']);		if ($id <= 0) $this->errorOutput(PARAM_WRONG);		$flag = intval($this->input['flag']);		$queryData = array('id' => $id);		$content_info = $this->api->detail('content', $queryData);		if ($content_info && $content_info['user_id'] != $this->user['user_id'])		{		    $this->errorOutput(MODIFY_OTHER);		}		$column_path = $content_info['column_path'] ? unserialize($content_info['column_path']) : '';		if ($column_path && is_array($column_path) && !empty($column_path))		{			$columnIds = array_keys($column_path);			$column_path = $this->api->get_columnPath_by_ids($content_info['site_id'], $columnIds);		}		if ($flag)		{			switch ($content_info['source'])			{				case 'news':					$content_info = $this->news_detail($content_info['source_id']);				break;				case 'photo':					$content_info = $this->photo_detail($content_info['source_id']);				break;				case 'video':					$content_info = $this->video_detail($content_info['source_id']);				break;				case 'special':					$content_info = $this->special_detail($content_info['source_id']);				break;				case 'vote':					$content_info = $this->vote_detail($content_info['source_id']);				break;			}			if ($content_info) $content_info['column_path'] = $column_path;		}		if ($content_info)		{			$this->addItem($content_info);		}		else		{			$this->api->delete('content', $queryData);		}		$this->output();	}		private function news_detail($id)	{		include_once ROOT_PATH . 'lib/class/news.class.php';		$newsApi = new news();		return $newsApi->detail($id);	}		private function photo_detail($id)	{		include_once ROOT_PATH . 'lib/class/tuji.class.php';		$picApi = new tuji();		$photo_info = $picApi->detail($id);		if (!$photo_info['tuji']['id']) return false;		return $photo_info;	}		private function video_detail($id)	{		include_once ROOT_PATH . 'lib/class/livmedia.class.php';		$videoApi = new livmedia();		$info = $videoApi->get_videos($id);		$info = $info[0][$id];		if ($info['column_id'])		{			$info['column_id'] = unserialize($info['column_id']);			$info['column_id'] = array_keys($info['column_id']);			$info['column_id'] = implode(',', $info['column_id']);		}		if ($info['img_info'])		{			$info['img_info'] = unserialize($info['img_info']);		}		if ($info['ori_url'])		{			$info['outlink'] = $this->videoUrlParser($info['ori_url']);		}				return $info;	}		private function special_detail($id)	{		include_once ROOT_PATH . 'lib/class/special.class.php';		$specialApi = new special();		$special_info = $specialApi->detail($id);		if (!$special_info['id']) return false;		return $special_info;	}	/**	 * 	 * @Description 获取投票详情	 * @author Kin	 * @date 2014-2-26 上午11:15:00	 */	private function vote_detail($id)	{		include_once ROOT_PATH . 'lib/class/vote.class.php';		$voteApi = new vote();		$vote_info = $voteApi->detail($id);		if (!$vote_info['id'])		{			return false;		} 		if($vote_info && is_array($vote_info))		{			foreach ($vote_info['options'] as $k=>$v) 			{				$vote_info['options'][$k]['describes'] = unserialize($v['describes']);			}		}				return $vote_info;	}		/**	 * 过滤数据	 */	private function filter_data()	{		$site_id = intval($this->input['sid']);		$keyword = trim($this->input['keyword']);		$state = intval($this->input['state']);		$type = trim($this->input['type']);		$ids = trim($this->input['id']);		$column_id = trim($this->input['column_id']);		$child_column_id = trim($this->input['child_column_id']);		$no_column_data = $this->input['no_column_data'];		$arr = array(			'site_id'			=> $site_id,			'keyword' 			=> $keyword,			'state' 			=> $state,			'type' 				=> $type,			'id'				=> $ids,			'child_column_id'	=> $child_column_id,			'no_column_data'	=> $no_column_data,			'user_id'			=> $user_id,			);		if ($this->input['column_id'])		{			$arr['column_id'] = $column_id;		}		return $arr;	}		/**	 * 	 * @Description: 根据优酷土豆视频播放页面解析视频信息	 * @author Kin   	 * @date 2014-5-6 下午05:14:21	 */	public function videoUrlParser($url, $water_id = 0)	{		if (!$url)		{			echo json_encode(array('msg' => '参数错误', 'error' => 1));exit();		}		require_once ROOT_PATH . 'lib/class/videourlparser.class.php';		$obj = new VideoUrlparser();		$data = $obj->parse($url);		if (!$data)		{			return false;		}		//图片本地化		if ($data['img'])		{			require_once ROOT_PATH . 'lib/class/material.class.php';			$this->material = new material();						$info = $this->material->localMaterial($data['img'], 0, 0, $water_id);			if (!$info)			{				return false;			}			$info = $info[0];			$data['img'] = array(						'id'		=> $info['id'],						'host'		=> $info['host'],						'dir' 		=> $info['dir'],						'filepath'	=> $info['filepath'],						'filename'	=> $info['filename'],						'imgwidth'	=> $info['imgwidth'],						'imgheight'	=> $info['imgheight'],					);		}		return $data;			}		public function draft_count()	{		$sid = $this->input['sid'];		unset($this->input);		$info = $this->api->count(array('site_id' => $sid, 'no_column_data'=> true));		echo json_encode($info);	}		public function sort()	{	    $ret = $this->drag_order('content', 'order_id');	    $this->addItem($ret);	    $this->output();	}		/**	 * 根据时间要求，获取当前时间之前对应时间内，上传的内容数	 * @author jitao	 * @day 天数	 * @site_id 站点ID	 */	public function getContentByTime()	{		$day = intval($this->input['day']);		$site_id = intval($this->input['site_id']);		$needTime = TIMENOW-($day*24*60*60);		$sql = "select * from ".DB_PREFIX."content where site_id = ".$site_id." and create_time > ".$needTime;		$content_info = $this->db->fetch_all($sql);		$this->addItem($content_info);		$this->output();	}		/**	 * 获取外链的内容的总数	 */	public function getOutlinkCounts()	{		$site_id = intval($this->input['site_id']);		$count = $this->api->getOutlinkCounts($site_id);		$this->addItem($count);		$this->output();	}}$out = new contentApi();$action = $_INPUT['a'];if (!method_exists($out,$action)){	$action = 'show';}$out->$action();?>