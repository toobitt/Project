<?phpclass markLib extends InitFrm{	public function __construct()	{		parent::__construct();	}	public function __destruct()	{		parent::__destruct();	}	//参数获取	public function getName()	{		$name = '';		if(isset($this->input['name']) && strlen($this->input['name']))		{			$name = trim(urldecode($this->input['name']));		}		return $name;	}	//参数判定	public function processDataMarkName($mark_name)	{		$mark_strlen = 0;		if(defined('CHINESE_EQUAL_ENGLISH') && CHINESE_EQUAL_ENGLISH)//一个中文相当于一个英文		{			if(defined('CODEING'))			{				$mark_strlen = @mb_strlen($mark_name, CODEING);			}			else 			{				$mark_strlen = @mb_strlen($mark_name, 'utf-8');			}		}		else 		{			$mark_strlen = strlen($mark_name);		}		if(defined('MARK_NAME_LIMIT') && $mark_strlen > MARK_NAME_LIMIT)		{			$this->errorOutput("你的设置字数过多");		}		if(!$mark_strlen)		{			$this->errorOutput("你的设置里有参数问题");		}		return true;	}	//用户处理	public function checkUserExit()	{		$this->user = array('user_id'=>84);		if(!$this->user['user_id'])		{			$this->errorOutput("用户没有登录");		}		return $this->user['user_id'];	}		//插入操作	public function insert($table,$data)	{		$result = false;		if(is_array($data))		{			$sql = $sp = "";			$sql .= "insert into " . DB_PREFIX . $table . " set ";			foreach ($data as $k =>$v)			{				$sql .= $sp . $k ."='" . $v . "'";				$sp = ','; 			}			$this->db->query($sql);			$result = $this->db->insert_id();		}		return $result;	}	//	public function update($table, $data = array(), $conds = array(), $ck = array())	{		$result = false;		if($data)		{			$sql = $sp = '';			$sql .= "update " . DB_PREFIX . $table . " set ";			foreach ($data as $k => $v)			{				$sql .= $sp . $k . "=";				if($ck[$k])				{					$sql .= $k . "+";				}				$sql .= "'" . $v . "'";				$sp = ',';			}			$sql .= " where 1";			if($conds)			{				foreach ($conds as $k => $v)				{					if(strpos($v, ','))					{						$sql .= " and " . $k . " in (" . $v . ")";					}					else 					{						$sql .= " and " . $k . " = '" . $v . "'";					}				}			}			$result = $this->db->query($sql);		}			return $result;	}	//获取操作	public function get($table, $vals = '*', $conds = array(),  $offset = 0, $count = 1,  $sequence = array(), $name = array())	{		$result = false;		$sql = " select ". $vals ." from " . DB_PREFIX . $table." ";		$sql .= " where 1 ";		if($name)		{			foreach($name as $k =>$v)			{				$sql .= " and " . $k  . $v . "";			}		}		if($conds)		{			foreach($conds as $k =>$v)			{				if(strpos($v, ','))				{					$sql .= " and " . $k . " in (" . $v . ")";				}				else 				{					$sql .= " and " . $k . " = '" . $v . "'";				}			}		}				if($sequence)		{			$sql .= " ORDER BY ";$sp = '';			foreach ($sequence as $k=>$v)			{				$sql .= $sp . " " . $k . " " . $v;				$sp = ',';			}		}				if($count > 0)		{			$sql .= ' LIMIT ' . $offset . ' , ' . $count;		}			    $query = $this->db->query($sql);				if($count != 1)		{			while($row = $this->db->fetch_array($query))			{				$result[] = $row;			}		}		else 		{			if(strpos($vals, ',') || $vals =='*')			{				while($row = $this->db->fetch_array($query))				{					$result = $row;				}			}			else 			{				while($row = $this->db->fetch_row($query))				{					$result = $row['0'];				}			}					}		return $result;	}	//	public function delete($table, $conds = array())	{		$result = false;		if($conds)		{			$sql = '';			$sql .= "delete from " . DB_PREFIX .  $table . " ";						$sql .= " where 1 ";			if($conds)			{				foreach ($conds as $k => $v)				{					if(strpos($v, ','))					{						$sql .= " and " . $k . " in (" . $v . ")";					}					else 					{						$sql .= " and " . $k . " = '" . $v . "'";					}				}			}			$result = $this->db->query($sql);		}		return $result;	}	//	public function getSourceMarks($data, $offset = 0, $count = 1, $sequence = array())	{		$sql = "select g.sid,t.name as mark_name,g.mark_id,g.source,g.source_id,g.action,g.parent_id from " . DB_PREFIX . "name t," . DB_PREFIX . "mark_action g where  t.nid = g.mark_id ";		if($data)		{			foreach($data as $k => $v)			{								if(strpos($v, ','))				{					$sql .= " and g." . $k . " in (" . $v . ")";				}				else 				{					$sql .= " and g." . $k . "='" . $v . "'";				}			}		}		$sql .= " and t.state=1 and g.state=1 ";		if($sequence)		{			$sql .= " ORDER BY ";$sp = '';			foreach ($sequence as $k=>$v)			{				$sql .= $sp . " g." . $k . " " . $v;				$sp = ',';			}		}		if($count > 0)		{			$sql .= " limit " . $offset . " , " . $count;		}		$query = $this->db->query($sql);		while($row = $this->db->fetch_array($query))		{			$result[$row['sid']] = $row;		}		return $result;	}	public function getKindMarksName($data, $offset = 0, $count = 1, $sequence = array())	{		$sql = "SELECT t.id,t.mark_id, g.name AS kind_name,t.kind_id FROM `" . DB_PREFIX . "kind_action` t, `" . DB_PREFIX . "name` g WHERE t.mark_id = g.nid ";		if($data)		{			foreach($data as $k => $v)			{				if($k == 'name')				{					$sql .= " AND t.`kind_id` in ( SELECT nid AS kind_id FROM `" . DB_PREFIX . "name` WHERE " . $k . " in( ". $v. ") and state = 1 )";				}				else 				{					if(strpos($v, ','))					{						$sql .= " and t." . $k . " in (" . $v . ")";					}					else 					{						$sql .= " and t." . $k . "='" . $v . "'";					}				}			}		}		$sql .= " and g.state=1 ";		if($sequence)		{			$sql .= " ORDER BY ";$sp = '';			foreach ($sequence as $k=>$v)			{				$sql .= $sp . " t." . $k . " " . $v;				$sp = ',';			}		}		if($count > 0)		{			$sql .= " limit " . $offset . " , " . $count;		}		$query = $this->db->query($sql);		while($row = $this->db->fetch_array($query))		{			$result[] = $row;		}		return $result;	}	//	public function getKindMarks($vals = '', $data, $offset = 0, $count = 1, $sequence = array())	{		/*		$sql = "SELECT t.id,t.mark_id, g.name AS mark_name,t.create_time,t.kind_id,t.user_id FROM `" . DB_PREFIX . "kind_action` t, `" . DB_PREFIX . "name` g WHERE t.mark_id = g.nid ";		if($data)		{			foreach($data as $k => $v)			{				if($k == 'name')				{					$sql .= " AND t.`kind_id` in ( SELECT nid AS kind_id FROM `" . DB_PREFIX . "name` WHERE " . $k . " in( ". $v. ") and state = 1 )";				}				else 				{					if(strpos($v, ','))					{						$sql .= " and t." . $k . " in (" . $v . ")";					}					else 					{						$sql .= " and t." . $k . "='" . $v . "'";					}				}			}		}		$sql .= " and g.state=1 ";		*/		$sql = "SELECT ".$vals."		FROM (		SELECT t.id, t.mark_id, g.name AS mark_name, t.create_time, t.user_id, t.kind_id		FROM `" . DB_PREFIX . "kind_action` t, `" . DB_PREFIX . "name` g		WHERE t.mark_id = g.nid		AND g.action =0		AND g.state =1 ";		foreach($data as $k => $v)		{			if(strpos($v, ','))			{				$sql .= " and t." . $k . " in (" . $v . ")";			}			else 			{				$sql .= " and t." . $k . "='" . $v . "'";			}		}		$sql .= " AND t.user_id = '0'		)b, `" . DB_PREFIX . "name` c		WHERE b.kind_id = c.nid		AND c.action =1		AND c.state =1";		if($sequence)		{			$sql .= " ORDER BY ";$sp = '';			foreach ($sequence as $k=>$v)			{				$sql .= $sp . " b." . $k . " " . $v;				$sp = ',';			}		}		if($count > 0)		{			$sql .= " limit " . $offset . " , " . $count;		}		$query = $this->db->query($sql);		while($row = $this->db->fetch_array($query))		{			$result[] = $row;		}		return $result;	}	public function getIdsByMark($data, $offset = 0, $count = 1, $sequence = array())	{		$sql = "select g.create_time,g.source,g.source_id from " . DB_PREFIX . "name t," . DB_PREFIX . "mark_action g where  t.nid = g.mark_id ";		if($data)		{			foreach($data as $k => $v)			{								if(strpos($v, ','))				{					$sql .= " and t." . $k . " in (" . $v . ")";				}				else 				{					$sql .= " and t." . $k . "='" . $v . "'";				}			}		}		$sql .= " and t.state=1 and g.state=1 ";		if($sequence)		{			$sql .= " ORDER BY ";$sp = '';			foreach ($sequence as $k=>$v)			{				$sql .= $sp . " g." . $k . " " . $v;				$sp = ',';			}		}		if($count > 0)		{			$sql .= " limit " . $offset . " , " . $count;		}		$query = $this->db->query($sql);		while($row = $this->db->fetch_array($query))		{			$result[] = $row;		}		return $result;	}	//	public function getSourceKindsMarks($vals = '', $data, $offset = 0, $count = 1, $sequence = array(), $group =array())	{		$sql = "select  ".$vals." from " . DB_PREFIX . "name t," . DB_PREFIX . "mark_action g where  t.nid = g.mark_id ";		if($data)		{			foreach($data as $k => $v)			{				if($k == 'name')				{					if(strpos($v, ','))					{						$sql .= " and t." . $k . " in (" . $v . ")";					}					else 					{						$sql .= " and t." . $k . "='" . $v . "'";					}				}				else 				{					if(strpos($v, ','))					{						$sql .= " and g." . $k . " in (" . $v . ")";					}					else 					{						$sql .= " and g." . $k . "='" . $v . "'";					}				}			}		}		$sql .= " and t.state=1 and g.state=1 ";		if($group)		{			$sql .= " group BY ";$sp = '';			foreach ($group as $k=>$v)			{				$sql .= $sp . " " . $k . " " . $v;				$sp = ',';			}		}		if($sequence)		{			$sql .= " ORDER BY ";$sp = '';			foreach ($sequence as $k=>$v)			{				$sql .= $sp . " " . $k . " " . $v;				$sp = ',';			}		}				if($count > 0)		{			$sql .= " limit " . $offset . " , " . $count;		}		$query = $this->db->query($sql);		while($row = $this->db->fetch_array($query))		{			if($vals == 'count(sid) as total')			{				$result = $row;			}			else 			{				$result[$row['sid']] = $row;			}		}		return $result;	}	//编码	function str_utf8_unicode($str)	{		$newstr = '';		@mb_internal_encoding("UTF-8"); //this IS A MUST!! PHP has trouble with multibyte when no internal encoding is set!		$dictLen = intval(@mb_strlen($str));  		for($i=0; $i<$dictLen; $i++) 		{			$tcChar = mb_substr($str, $i, 1);			if($tcChar == ',' || $tcChar == '，')			{				$newstr .= ' ';			}			else			{				$newstr .= hg_utf8_unicode($tcChar);			}		}		return $newstr;	}	//编码	function hg_utf8_unicode($c) 	{		switch(strlen($c)) 		{			case 1:				$n = ord($c);			break;			case 2:				$n = (ord($c[0]) & 0x3f) << 6;				$n += ord($c[1]) & 0x3f;			break;			case 3:				$n = (ord($c[0]) & 0x1f) << 12;				$n += (ord($c[1]) & 0x3f) << 6;				$n += ord($c[2]) & 0x3f;			break;			case 4:				$n = (ord($c[0]) & 0x0f) << 18;				$n += (ord($c[1]) & 0x3f) << 12;				$n += (ord($c[2]) & 0x3f) << 6;				$n += ord($c[3]) & 0x3f;			break;		}		return dechex($n);	}}?>