<?php/**************************************************************************** LivSNS 0.1* (C)2004-2010 HOGE Software.** $Id: banword.php 16491 2013-01-08 06:01:19Z yaojian $***************************************************************************/require_once './global.php';require_once CUR_CONF_PATH . 'lib/banword.class.php';define('MOD_UNIQUEID', 'banword'); //模块标识class banwordUpdateApi extends adminUpdateBase{	private $banword;		public function __construct()	{		parent::__construct();		$this->banword = new banwordClass();	}	public function __destruct()	{		parent::__destruct();		unset($this->banword);	}		/**	 * 增加屏蔽字	 */	public function create()	{		//权限验证		$this->verify_content_prms(array('_action' => 'manage'));		$data = trim(urldecode($this->input['banwords']));		if (empty($data)) $this->errorOutput(OBJECT_NULL);		$data = preg_split('/[\n\r]+/', $data);		$result = $this->check_data($data);		$this->addItem($result);		$this->output();	}		/**	 * 导入屏蔽词数据	 */	public function import()	{		//权限验证		$this->verify_content_prms(array('_action' => 'manage'));		$file_path = $_FILES['banword']['tmp_name'];		$data = file($file_path);		$result = $this->check_data($data);		$this->addItem($result);		$this->output();	}		/**	 * 处理入库操作	 * @param Array $data	 */	private function check_data($data)	{		if (!$data || !is_array($data)) return false;		$insertData = array();		$where = array();		foreach ($data as $v)		{			$v = trim($v);			if (!empty($v))			{				$tmpData = explode('=', $v);				$find = htmlspecialchars(trim($tmpData[0]));				$replace = count($tmpData) > 1 ? htmlspecialchars(trim($tmpData[1])) : '';				$insertData[$find] = $replace;				$where[] = 'banname = "' . $find . '"';			}		}		if ($where)		{			$where = implode(' OR ', $where);			$where = ' AND (' . $where . ')';			$ret = $this->banword->show(0, -1, $where);			$source = array();			foreach ($ret as $v)			{				$source[] = $v['banname'];			}		}		if ($insertData)		{			$newData = array();			foreach ($insertData as $key => $val)			{								if (!in_array(str_replace('\\', '', $key), $source))				{					$newData[$key] = $val;				}			}			if ($newData)			{				$banwords = array();				foreach ($newData as $find => $replace)				{					$banwords[] = '("' . $find . '", "' . $replace . '")';				}				if ($banwords)				{					$insertSource = array();					$insertSource['fields'] = array('banname', 'banwd');					$insertSource['values'] = implode(', ', $banwords);					return $this->banword->create($insertSource, 2);				}			}		}		return false;	}	/**	 * 清空屏蔽字表	 */	public function clean()	{		//权限验证		$this->verify_content_prms(array('_action' => 'manage'));		$result = $this->banword->emptyData('banword');		$this->addItem($result);		$this->output();	}	/**	 * 删除屏蔽字	 */	public function delete()	{		//权限验证		$this->verify_content_prms(array('_action' => 'manage'));		$ids = trim(urldecode($this->input['id']));		$ids = str_replace('，', ',', $ids);			$id_array = explode(',', $ids);		//过滤数组中的空值		$id_array = array_filter($id_array);		if(empty($id_array))		{			$this->errorOutput(OBJECT_NULL);		}		$ids = implode(',', $id_array);		$result = $this->banword->delete($ids);		$this->addItem($result);		$this->output();	}	/**	 * 更新屏蔽字	 */	public function update()	{		//权限验证		$this->verify_content_prms(array('_action' => 'manage'));		$id = intval($this->input['id']);		$replace = htmlspecialchars(trim(urldecode($this->input['replace'])));		if (empty($replace)) $replace = '';		$find = htmlspecialchars(trim(urldecode($this->input['find'])));		if (empty($find) || !$id)		{			$this->errorOutput(OBJECT_NULL);		}		$result = $this->banword->detail($id);		if (!$result) $this->errorOutput(OBJECT_NULL);		$updateData = array();		if ($result['banname'] != $find)		{			//检测屏蔽字是否已经存在			$result = $this->banword->exists($find);			if ($result['total'] > 0) $this->errorOutput(BANWORD_EXISTS);			$updateData['banname'] = $find;		}		if ($result['banwd'] != $replace)		{			$updateData['banwd'] = $replace;		}		if ($updateData)		{				$updateResult = $this->banword->update($updateData, $id);		}		else		{			$updateResult = true;		}		$this->addItem($updateResult);		$this->output();	}		public function audit() {}		public function publish() {}		public function sort() {}		/**	 * 方法不存在的时候调用的方法	 */	public function none()	{		$this->errorOutput('调用的方法不存在');	}}$out = new banwordUpdateApi();$action = $_INPUT['a'];if (!method_exists($out, $action)){	$action = 'none';}$out->$action();?>